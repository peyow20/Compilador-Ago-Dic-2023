Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CORCHDER
    CORCHIZQ
    FOR
    MOD
    TO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM VAR vars acum_func main
Rule 2     main -> MAIN PARIZQ PARDER bloque
Rule 3     funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
Rule 4     funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
Rule 5     param -> TIPO ID guardar_param COMA param
Rule 6     param -> TIPO ID guardar_param
Rule 7     param -> empty
Rule 8     insertar_nombre_funcion -> <empty>
Rule 9     guardar_param -> <empty>
Rule 10    fin_declaracion_funcion -> <empty>
Rule 11    acum_func -> funcion acum_func
Rule 12    acum_func -> empty
Rule 13    id_lista -> ID COMA id_lista
Rule 14    id_lista -> ID
Rule 15    id_lista -> arreglo
Rule 16    vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 17    vars -> empty
Rule 18    TIPO -> INT
Rule 19    TIPO -> FLOAT
Rule 20    TIPO -> CHAR
Rule 21    TIPO -> BOOL
Rule 22    arreglo -> ARR LLAVIZQ CTEI LLAVDER
Rule 23    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 24    estatuto -> asignacion
Rule 25    estatuto -> condicion
Rule 26    estatuto -> escritura
Rule 27    estatuto -> while_condicion
Rule 28    multiples_estatutos -> estatuto multiples_estatutos
Rule 29    multiples_estatutos -> empty
Rule 30    asignacion -> ID IGUAL expresion PUNCOM
Rule 31    escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM
Rule 32    print_expresion -> expresion multiples_print
Rule 33    print_expresion -> CTESTRING multiples_print
Rule 34    multiples_print -> COMA print_expresion
Rule 35    multiples_print -> empty
Rule 36    expresion -> expresion AND expresion
Rule 37    expresion -> expresion OR expresion
Rule 38    expresion -> exp
Rule 39    expresion -> exp MAYOR exp
Rule 40    expresion -> exp MENOR exp
Rule 41    expresion -> exp DIFF exp
Rule 42    expresion -> exp IGIG exp
Rule 43    expresion -> exp MAYIG exp
Rule 44    expresion -> exp MENIG exp
Rule 45    exp -> termino exp_operacion
Rule 46    exp_operacion -> MAS termino exp_operacion
Rule 47    exp_operacion -> MENOS termino exp_operacion
Rule 48    exp_operacion -> empty
Rule 49    termino -> factor termino_operador
Rule 50    termino_operador -> POR factor termino_operador
Rule 51    termino_operador -> DIV factor termino_operador
Rule 52    termino_operador -> empty
Rule 53    factor -> PARIZQ expresion PARDER
Rule 54    factor -> MAS var_cte
Rule 55    factor -> MENOS var_cte
Rule 56    factor -> var_cte
Rule 57    factor -> empty
Rule 58    var_cte -> ID
Rule 59    var_cte -> CTEI
Rule 60    var_cte -> CTEF
Rule 61    var_cte -> CTEC
Rule 62    var_cte -> CTEB
Rule 63    empty -> <empty>
Rule 64    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
Rule 65    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
Rule 66    verificar_if -> <empty>
Rule 67    verificar_bloque_if -> <empty>
Rule 68    verificar_bloque_else -> <empty>
Rule 69    while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
Rule 70    guardar_posicion_while -> <empty>
Rule 71    verificar_expresion_while -> <empty>
Rule 72    llenar_cuadruplo_while -> <empty>

Terminals, with rules where they appear

AND                  : 36
ARR                  : 22
BOOL                 : 21
CHAR                 : 20
COMA                 : 5 13 34
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 62
CTEC                 : 61
CTEF                 : 60
CTEI                 : 22 59
CTESTRING            : 33
DIFF                 : 41
DIV                  : 51
DO                   : 69
DOSPUN               : 16
ELSE                 : 65
FLOAT                : 19
FOR                  : 
FUNC                 : 3 4
ID                   : 1 3 4 5 6 13 14 30 58
IF                   : 64 65
IGIG                 : 42
IGUAL                : 30
INT                  : 18
LLAVDER              : 22 23
LLAVIZQ              : 22 23
MAIN                 : 2
MAS                  : 46 54
MAYIG                : 43
MAYOR                : 39
MENIG                : 44
MENOR                : 40
MENOS                : 47 55
MOD                  : 
OR                   : 37
PARDER               : 2 3 4 31 53 64 65 69
PARIZQ               : 2 3 4 31 53 64 65 69
POR                  : 50
PRINT                : 31
PROGRAM              : 1
PUNCOM               : 1 16 30 31 64 65
RETURN               : 3 4
TO                   : 
VAR                  : 1 3 4
VOID                 : 4
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

TIPO                 : 3 5 6 16
acum_func            : 1 11
arreglo              : 15
asignacion           : 24
bloque               : 2 3 4 64 65 65 69
condicion            : 25
empty                : 7 12 17 29 35 48 52 57
escritura            : 26
estatuto             : 28
exp                  : 3 38 39 39 40 40 41 41 42 42 43 43 44 44
exp_operacion        : 45 46 47
expresion            : 30 32 36 36 37 37 53 64 65 69
factor               : 49 50 51
fin_declaracion_funcion : 3 4
funcion              : 11
guardar_param        : 5 6
guardar_posicion_while : 69
id_lista             : 13 16
insertar_nombre_funcion : 3 4
llenar_cuadruplo_while : 69
main                 : 1
multiples_estatutos  : 23 28
multiples_print      : 32 33
param                : 3 4 5
print_expresion      : 31 34
program              : 0
termino              : 45 46 47
termino_operador     : 49 50 51
var_cte              : 54 55 56
vars                 : 1 3 4 16
verificar_bloque_else : 65
verificar_bloque_if  : 64 65
verificar_expresion_while : 69
verificar_if         : 64 65
while_condicion      : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM VAR vars acum_func main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM VAR vars acum_func main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM VAR vars acum_func main

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . VAR vars acum_func main

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID PUNCOM VAR . vars acum_func main
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (15) id_lista -> . arreglo
    (63) empty -> .
    (22) arreglo -> . ARR LLAVIZQ CTEI LLAVDER

    ID              shift and go to state 6
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)
    ARR             shift and go to state 11

    vars                           shift and go to state 7
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9
    arreglo                        shift and go to state 10

state 6

    (13) id_lista -> ID . COMA id_lista
    (14) id_lista -> ID .

    COMA            shift and go to state 12
    DOSPUN          reduce using rule 14 (id_lista -> ID .)


state 7

    (1) program -> PROGRAM ID PUNCOM VAR vars . acum_func main
    (11) acum_func -> . funcion acum_func
    (12) acum_func -> . empty
    (3) funcion -> . FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
    (4) funcion -> . FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
    (63) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 63 (empty -> .)

    acum_func                      shift and go to state 13
    funcion                        shift and go to state 14
    empty                          shift and go to state 15

state 8

    (16) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 17


state 9

    (17) vars -> empty .

    FUNC            reduce using rule 17 (vars -> empty .)
    MAIN            reduce using rule 17 (vars -> empty .)
    LLAVIZQ         reduce using rule 17 (vars -> empty .)


state 10

    (15) id_lista -> arreglo .

    DOSPUN          reduce using rule 15 (id_lista -> arreglo .)


state 11

    (22) arreglo -> ARR . LLAVIZQ CTEI LLAVDER

    LLAVIZQ         shift and go to state 18


state 12

    (13) id_lista -> ID COMA . id_lista
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (15) id_lista -> . arreglo
    (22) arreglo -> . ARR LLAVIZQ CTEI LLAVDER

    ID              shift and go to state 6
    ARR             shift and go to state 11

    id_lista                       shift and go to state 19
    arreglo                        shift and go to state 10

state 13

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func . main
    (2) main -> . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 14

    (11) acum_func -> funcion . acum_func
    (11) acum_func -> . funcion acum_func
    (12) acum_func -> . empty
    (3) funcion -> . FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
    (4) funcion -> . FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
    (63) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 63 (empty -> .)

    funcion                        shift and go to state 14
    acum_func                      shift and go to state 22
    empty                          shift and go to state 15

state 15

    (12) acum_func -> empty .

    MAIN            reduce using rule 12 (acum_func -> empty .)


state 16

    (3) funcion -> FUNC . TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
    (4) funcion -> FUNC . VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL

    VOID            shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    TIPO                           shift and go to state 23

state 17

    (16) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28

    TIPO                           shift and go to state 29

state 18

    (22) arreglo -> ARR LLAVIZQ . CTEI LLAVDER

    CTEI            shift and go to state 30


state 19

    (13) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 13 (id_lista -> ID COMA id_lista .)


state 20

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func main .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM VAR vars acum_func main .)


state 21

    (2) main -> MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 31


state 22

    (11) acum_func -> funcion acum_func .

    MAIN            reduce using rule 11 (acum_func -> funcion acum_func .)


state 23

    (3) funcion -> FUNC TIPO . insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
    (8) insertar_nombre_funcion -> .

    ID              reduce using rule 8 (insertar_nombre_funcion -> .)

    insertar_nombre_funcion        shift and go to state 32

state 24

    (4) funcion -> FUNC VOID . insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
    (8) insertar_nombre_funcion -> .

    ID              reduce using rule 8 (insertar_nombre_funcion -> .)

    insertar_nombre_funcion        shift and go to state 33

state 25

    (18) TIPO -> INT .

    ID              reduce using rule 18 (TIPO -> INT .)
    PUNCOM          reduce using rule 18 (TIPO -> INT .)


state 26

    (19) TIPO -> FLOAT .

    ID              reduce using rule 19 (TIPO -> FLOAT .)
    PUNCOM          reduce using rule 19 (TIPO -> FLOAT .)


state 27

    (20) TIPO -> CHAR .

    ID              reduce using rule 20 (TIPO -> CHAR .)
    PUNCOM          reduce using rule 20 (TIPO -> CHAR .)


state 28

    (21) TIPO -> BOOL .

    ID              reduce using rule 21 (TIPO -> BOOL .)
    PUNCOM          reduce using rule 21 (TIPO -> BOOL .)


state 29

    (16) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 34


state 30

    (22) arreglo -> ARR LLAVIZQ CTEI . LLAVDER

    LLAVDER         shift and go to state 35


state 31

    (2) main -> MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 36


state 32

    (3) funcion -> FUNC TIPO insertar_nombre_funcion . ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion

    ID              shift and go to state 37


state 33

    (4) funcion -> FUNC VOID insertar_nombre_funcion . ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion

    ID              shift and go to state 38


state 34

    (16) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (15) id_lista -> . arreglo
    (63) empty -> .
    (22) arreglo -> . ARR LLAVIZQ CTEI LLAVDER

    ID              shift and go to state 6
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)
    LLAVIZQ         reduce using rule 63 (empty -> .)
    ARR             shift and go to state 11

    id_lista                       shift and go to state 8
    vars                           shift and go to state 39
    empty                          shift and go to state 9
    arreglo                        shift and go to state 10

state 35

    (22) arreglo -> ARR LLAVIZQ CTEI LLAVDER .

    DOSPUN          reduce using rule 22 (arreglo -> ARR LLAVIZQ CTEI LLAVDER .)


state 36

    (2) main -> MAIN PARIZQ PARDER . bloque
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 40

state 37

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID . PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion

    PARIZQ          shift and go to state 42


state 38

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID . PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion

    PARIZQ          shift and go to state 43


state 39

    (16) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    FUNC            reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    MAIN            reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    LLAVIZQ         reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 40

    (2) main -> MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 2 (main -> MAIN PARIZQ PARDER bloque .)


state 41

    (23) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (28) multiples_estatutos -> . estatuto multiples_estatutos
    (29) multiples_estatutos -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . while_condicion
    (63) empty -> .
    (30) asignacion -> . ID IGUAL expresion PUNCOM
    (64) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (31) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (69) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    LLAVDER         reduce using rule 63 (empty -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    PRINT           shift and go to state 53
    WHILE           shift and go to state 54

    multiples_estatutos            shift and go to state 44
    estatuto                       shift and go to state 45
    empty                          shift and go to state 46
    asignacion                     shift and go to state 47
    condicion                      shift and go to state 48
    escritura                      shift and go to state 49
    while_condicion                shift and go to state 50

state 42

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ . param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
    (5) param -> . TIPO ID guardar_param COMA param
    (6) param -> . TIPO ID guardar_param
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (63) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28
    PARDER          reduce using rule 63 (empty -> .)

    TIPO                           shift and go to state 55
    param                          shift and go to state 56
    empty                          shift and go to state 57

state 43

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ . param PARDER VAR vars bloque RETURN fin_declaracion_funcion
    (5) param -> . TIPO ID guardar_param COMA param
    (6) param -> . TIPO ID guardar_param
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (63) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28
    PARDER          reduce using rule 63 (empty -> .)

    param                          shift and go to state 58
    TIPO                           shift and go to state 55
    empty                          shift and go to state 57

state 44

    (23) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 59


state 45

    (28) multiples_estatutos -> estatuto . multiples_estatutos
    (28) multiples_estatutos -> . estatuto multiples_estatutos
    (29) multiples_estatutos -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . while_condicion
    (63) empty -> .
    (30) asignacion -> . ID IGUAL expresion PUNCOM
    (64) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (31) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (69) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    LLAVDER         reduce using rule 63 (empty -> .)
    ID              shift and go to state 51
    IF              shift and go to state 52
    PRINT           shift and go to state 53
    WHILE           shift and go to state 54

    estatuto                       shift and go to state 45
    multiples_estatutos            shift and go to state 60
    empty                          shift and go to state 46
    asignacion                     shift and go to state 47
    condicion                      shift and go to state 48
    escritura                      shift and go to state 49
    while_condicion                shift and go to state 50

state 46

    (29) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 29 (multiples_estatutos -> empty .)


state 47

    (24) estatuto -> asignacion .

    ID              reduce using rule 24 (estatuto -> asignacion .)
    IF              reduce using rule 24 (estatuto -> asignacion .)
    PRINT           reduce using rule 24 (estatuto -> asignacion .)
    WHILE           reduce using rule 24 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 24 (estatuto -> asignacion .)


state 48

    (25) estatuto -> condicion .

    ID              reduce using rule 25 (estatuto -> condicion .)
    IF              reduce using rule 25 (estatuto -> condicion .)
    PRINT           reduce using rule 25 (estatuto -> condicion .)
    WHILE           reduce using rule 25 (estatuto -> condicion .)
    LLAVDER         reduce using rule 25 (estatuto -> condicion .)


state 49

    (26) estatuto -> escritura .

    ID              reduce using rule 26 (estatuto -> escritura .)
    IF              reduce using rule 26 (estatuto -> escritura .)
    PRINT           reduce using rule 26 (estatuto -> escritura .)
    WHILE           reduce using rule 26 (estatuto -> escritura .)
    LLAVDER         reduce using rule 26 (estatuto -> escritura .)


state 50

    (27) estatuto -> while_condicion .

    ID              reduce using rule 27 (estatuto -> while_condicion .)
    IF              reduce using rule 27 (estatuto -> while_condicion .)
    PRINT           reduce using rule 27 (estatuto -> while_condicion .)
    WHILE           reduce using rule 27 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 27 (estatuto -> while_condicion .)


state 51

    (30) asignacion -> ID . IGUAL expresion PUNCOM

    IGUAL           shift and go to state 61


state 52

    (64) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM

    PARIZQ          shift and go to state 62


state 53

    (31) escritura -> PRINT . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 63


state 54

    (69) while_condicion -> WHILE . PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    PARIZQ          shift and go to state 64


state 55

    (5) param -> TIPO . ID guardar_param COMA param
    (6) param -> TIPO . ID guardar_param

    ID              shift and go to state 65


state 56

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param . PARDER VAR vars bloque RETURN exp fin_declaracion_funcion

    PARDER          shift and go to state 66


state 57

    (7) param -> empty .

    PARDER          reduce using rule 7 (param -> empty .)


state 58

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param . PARDER VAR vars bloque RETURN fin_declaracion_funcion

    PARDER          shift and go to state 67


state 59

    (23) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    RETURN          reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PRINT           reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 60

    (28) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 28 (multiples_estatutos -> estatuto multiples_estatutos .)


state 61

    (30) asignacion -> ID IGUAL . expresion PUNCOM
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 69
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 62

    (64) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 82
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 63

    (31) escritura -> PRINT PARIZQ . print_expresion PARDER PUNCOM
    (32) print_expresion -> . expresion multiples_print
    (33) print_expresion -> . CTESTRING multiples_print
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 85
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    print_expresion                shift and go to state 83
    expresion                      shift and go to state 84
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 64

    (69) while_condicion -> WHILE PARIZQ . guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (70) guardar_posicion_while -> .

    PARIZQ          reduce using rule 70 (guardar_posicion_while -> .)
    MAS             reduce using rule 70 (guardar_posicion_while -> .)
    MENOS           reduce using rule 70 (guardar_posicion_while -> .)
    ID              reduce using rule 70 (guardar_posicion_while -> .)
    CTEI            reduce using rule 70 (guardar_posicion_while -> .)
    CTEF            reduce using rule 70 (guardar_posicion_while -> .)
    CTEC            reduce using rule 70 (guardar_posicion_while -> .)
    CTEB            reduce using rule 70 (guardar_posicion_while -> .)
    AND             reduce using rule 70 (guardar_posicion_while -> .)
    OR              reduce using rule 70 (guardar_posicion_while -> .)
    PARDER          reduce using rule 70 (guardar_posicion_while -> .)
    MAYOR           reduce using rule 70 (guardar_posicion_while -> .)
    MENOR           reduce using rule 70 (guardar_posicion_while -> .)
    DIFF            reduce using rule 70 (guardar_posicion_while -> .)
    IGIG            reduce using rule 70 (guardar_posicion_while -> .)
    MAYIG           reduce using rule 70 (guardar_posicion_while -> .)
    MENIG           reduce using rule 70 (guardar_posicion_while -> .)
    POR             reduce using rule 70 (guardar_posicion_while -> .)
    DIV             reduce using rule 70 (guardar_posicion_while -> .)

    guardar_posicion_while         shift and go to state 86

state 65

    (5) param -> TIPO ID . guardar_param COMA param
    (6) param -> TIPO ID . guardar_param
    (9) guardar_param -> .

    COMA            reduce using rule 9 (guardar_param -> .)
    PARDER          reduce using rule 9 (guardar_param -> .)

    guardar_param                  shift and go to state 87

state 66

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER . VAR vars bloque RETURN exp fin_declaracion_funcion

    VAR             shift and go to state 88


state 67

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER . VAR vars bloque RETURN fin_declaracion_funcion

    VAR             shift and go to state 89


state 68

    (58) var_cte -> ID .

    POR             reduce using rule 58 (var_cte -> ID .)
    DIV             reduce using rule 58 (var_cte -> ID .)
    MAS             reduce using rule 58 (var_cte -> ID .)
    MENOS           reduce using rule 58 (var_cte -> ID .)
    MAYOR           reduce using rule 58 (var_cte -> ID .)
    MENOR           reduce using rule 58 (var_cte -> ID .)
    DIFF            reduce using rule 58 (var_cte -> ID .)
    IGIG            reduce using rule 58 (var_cte -> ID .)
    MAYIG           reduce using rule 58 (var_cte -> ID .)
    MENIG           reduce using rule 58 (var_cte -> ID .)
    PUNCOM          reduce using rule 58 (var_cte -> ID .)
    AND             reduce using rule 58 (var_cte -> ID .)
    OR              reduce using rule 58 (var_cte -> ID .)
    PARDER          reduce using rule 58 (var_cte -> ID .)
    COMA            reduce using rule 58 (var_cte -> ID .)
    FUNC            reduce using rule 58 (var_cte -> ID .)
    MAIN            reduce using rule 58 (var_cte -> ID .)


state 69

    (30) asignacion -> ID IGUAL expresion . PUNCOM
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92


state 70

    (38) expresion -> exp .
    (39) expresion -> exp . MAYOR exp
    (40) expresion -> exp . MENOR exp
    (41) expresion -> exp . DIFF exp
    (42) expresion -> exp . IGIG exp
    (43) expresion -> exp . MAYIG exp
    (44) expresion -> exp . MENIG exp

    PUNCOM          reduce using rule 38 (expresion -> exp .)
    AND             reduce using rule 38 (expresion -> exp .)
    OR              reduce using rule 38 (expresion -> exp .)
    PARDER          reduce using rule 38 (expresion -> exp .)
    COMA            reduce using rule 38 (expresion -> exp .)
    MAYOR           shift and go to state 93
    MENOR           shift and go to state 94
    DIFF            shift and go to state 95
    IGIG            shift and go to state 96
    MAYIG           shift and go to state 97
    MENIG           shift and go to state 98


state 71

    (45) exp -> termino . exp_operacion
    (46) exp_operacion -> . MAS termino exp_operacion
    (47) exp_operacion -> . MENOS termino exp_operacion
    (48) exp_operacion -> . empty
    (63) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    exp_operacion                  shift and go to state 99
    empty                          shift and go to state 102

state 72

    (49) termino -> factor . termino_operador
    (50) termino_operador -> . POR factor termino_operador
    (51) termino_operador -> . DIV factor termino_operador
    (52) termino_operador -> . empty
    (63) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 63 (empty -> .)
    MENOS           reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    termino_operador               shift and go to state 103
    empty                          shift and go to state 106

state 73

    (53) factor -> PARIZQ . expresion PARDER
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 107
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 74

    (54) factor -> MAS . var_cte
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB

    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81

    var_cte                        shift and go to state 108

state 75

    (56) factor -> var_cte .

    POR             reduce using rule 56 (factor -> var_cte .)
    DIV             reduce using rule 56 (factor -> var_cte .)
    MAS             reduce using rule 56 (factor -> var_cte .)
    MENOS           reduce using rule 56 (factor -> var_cte .)
    MAYOR           reduce using rule 56 (factor -> var_cte .)
    MENOR           reduce using rule 56 (factor -> var_cte .)
    DIFF            reduce using rule 56 (factor -> var_cte .)
    IGIG            reduce using rule 56 (factor -> var_cte .)
    MAYIG           reduce using rule 56 (factor -> var_cte .)
    MENIG           reduce using rule 56 (factor -> var_cte .)
    PUNCOM          reduce using rule 56 (factor -> var_cte .)
    AND             reduce using rule 56 (factor -> var_cte .)
    OR              reduce using rule 56 (factor -> var_cte .)
    PARDER          reduce using rule 56 (factor -> var_cte .)
    COMA            reduce using rule 56 (factor -> var_cte .)
    FUNC            reduce using rule 56 (factor -> var_cte .)
    MAIN            reduce using rule 56 (factor -> var_cte .)


state 76

    (55) factor -> MENOS . var_cte
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB

    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81

    var_cte                        shift and go to state 109

state 77

    (57) factor -> empty .

    POR             reduce using rule 57 (factor -> empty .)
    DIV             reduce using rule 57 (factor -> empty .)
    MAS             reduce using rule 57 (factor -> empty .)
    MENOS           reduce using rule 57 (factor -> empty .)
    MAYOR           reduce using rule 57 (factor -> empty .)
    MENOR           reduce using rule 57 (factor -> empty .)
    DIFF            reduce using rule 57 (factor -> empty .)
    IGIG            reduce using rule 57 (factor -> empty .)
    MAYIG           reduce using rule 57 (factor -> empty .)
    MENIG           reduce using rule 57 (factor -> empty .)
    PUNCOM          reduce using rule 57 (factor -> empty .)
    AND             reduce using rule 57 (factor -> empty .)
    OR              reduce using rule 57 (factor -> empty .)
    PARDER          reduce using rule 57 (factor -> empty .)
    COMA            reduce using rule 57 (factor -> empty .)
    FUNC            reduce using rule 57 (factor -> empty .)
    MAIN            reduce using rule 57 (factor -> empty .)


state 78

    (59) var_cte -> CTEI .

    POR             reduce using rule 59 (var_cte -> CTEI .)
    DIV             reduce using rule 59 (var_cte -> CTEI .)
    MAS             reduce using rule 59 (var_cte -> CTEI .)
    MENOS           reduce using rule 59 (var_cte -> CTEI .)
    MAYOR           reduce using rule 59 (var_cte -> CTEI .)
    MENOR           reduce using rule 59 (var_cte -> CTEI .)
    DIFF            reduce using rule 59 (var_cte -> CTEI .)
    IGIG            reduce using rule 59 (var_cte -> CTEI .)
    MAYIG           reduce using rule 59 (var_cte -> CTEI .)
    MENIG           reduce using rule 59 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 59 (var_cte -> CTEI .)
    AND             reduce using rule 59 (var_cte -> CTEI .)
    OR              reduce using rule 59 (var_cte -> CTEI .)
    PARDER          reduce using rule 59 (var_cte -> CTEI .)
    COMA            reduce using rule 59 (var_cte -> CTEI .)
    FUNC            reduce using rule 59 (var_cte -> CTEI .)
    MAIN            reduce using rule 59 (var_cte -> CTEI .)


state 79

    (60) var_cte -> CTEF .

    POR             reduce using rule 60 (var_cte -> CTEF .)
    DIV             reduce using rule 60 (var_cte -> CTEF .)
    MAS             reduce using rule 60 (var_cte -> CTEF .)
    MENOS           reduce using rule 60 (var_cte -> CTEF .)
    MAYOR           reduce using rule 60 (var_cte -> CTEF .)
    MENOR           reduce using rule 60 (var_cte -> CTEF .)
    DIFF            reduce using rule 60 (var_cte -> CTEF .)
    IGIG            reduce using rule 60 (var_cte -> CTEF .)
    MAYIG           reduce using rule 60 (var_cte -> CTEF .)
    MENIG           reduce using rule 60 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 60 (var_cte -> CTEF .)
    AND             reduce using rule 60 (var_cte -> CTEF .)
    OR              reduce using rule 60 (var_cte -> CTEF .)
    PARDER          reduce using rule 60 (var_cte -> CTEF .)
    COMA            reduce using rule 60 (var_cte -> CTEF .)
    FUNC            reduce using rule 60 (var_cte -> CTEF .)
    MAIN            reduce using rule 60 (var_cte -> CTEF .)


state 80

    (61) var_cte -> CTEC .

    POR             reduce using rule 61 (var_cte -> CTEC .)
    DIV             reduce using rule 61 (var_cte -> CTEC .)
    MAS             reduce using rule 61 (var_cte -> CTEC .)
    MENOS           reduce using rule 61 (var_cte -> CTEC .)
    MAYOR           reduce using rule 61 (var_cte -> CTEC .)
    MENOR           reduce using rule 61 (var_cte -> CTEC .)
    DIFF            reduce using rule 61 (var_cte -> CTEC .)
    IGIG            reduce using rule 61 (var_cte -> CTEC .)
    MAYIG           reduce using rule 61 (var_cte -> CTEC .)
    MENIG           reduce using rule 61 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 61 (var_cte -> CTEC .)
    AND             reduce using rule 61 (var_cte -> CTEC .)
    OR              reduce using rule 61 (var_cte -> CTEC .)
    PARDER          reduce using rule 61 (var_cte -> CTEC .)
    COMA            reduce using rule 61 (var_cte -> CTEC .)
    FUNC            reduce using rule 61 (var_cte -> CTEC .)
    MAIN            reduce using rule 61 (var_cte -> CTEC .)


state 81

    (62) var_cte -> CTEB .

    POR             reduce using rule 62 (var_cte -> CTEB .)
    DIV             reduce using rule 62 (var_cte -> CTEB .)
    MAS             reduce using rule 62 (var_cte -> CTEB .)
    MENOS           reduce using rule 62 (var_cte -> CTEB .)
    MAYOR           reduce using rule 62 (var_cte -> CTEB .)
    MENOR           reduce using rule 62 (var_cte -> CTEB .)
    DIFF            reduce using rule 62 (var_cte -> CTEB .)
    IGIG            reduce using rule 62 (var_cte -> CTEB .)
    MAYIG           reduce using rule 62 (var_cte -> CTEB .)
    MENIG           reduce using rule 62 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 62 (var_cte -> CTEB .)
    AND             reduce using rule 62 (var_cte -> CTEB .)
    OR              reduce using rule 62 (var_cte -> CTEB .)
    PARDER          reduce using rule 62 (var_cte -> CTEB .)
    COMA            reduce using rule 62 (var_cte -> CTEB .)
    FUNC            reduce using rule 62 (var_cte -> CTEB .)
    MAIN            reduce using rule 62 (var_cte -> CTEB .)


state 82

    (64) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion

    PARDER          shift and go to state 110
    AND             shift and go to state 91
    OR              shift and go to state 92


state 83

    (31) escritura -> PRINT PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 111


state 84

    (32) print_expresion -> expresion . multiples_print
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion
    (34) multiples_print -> . COMA print_expresion
    (35) multiples_print -> . empty
    (63) empty -> .

    AND             shift and go to state 91
    OR              shift and go to state 92
    COMA            shift and go to state 113
    PARDER          reduce using rule 63 (empty -> .)

    multiples_print                shift and go to state 112
    empty                          shift and go to state 114

state 85

    (33) print_expresion -> CTESTRING . multiples_print
    (34) multiples_print -> . COMA print_expresion
    (35) multiples_print -> . empty
    (63) empty -> .

    COMA            shift and go to state 113
    PARDER          reduce using rule 63 (empty -> .)

    multiples_print                shift and go to state 115
    empty                          shift and go to state 114

state 86

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while . expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 116
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 87

    (5) param -> TIPO ID guardar_param . COMA param
    (6) param -> TIPO ID guardar_param .

    COMA            shift and go to state 117
    PARDER          reduce using rule 6 (param -> TIPO ID guardar_param .)


state 88

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR . vars bloque RETURN exp fin_declaracion_funcion
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (15) id_lista -> . arreglo
    (63) empty -> .
    (22) arreglo -> . ARR LLAVIZQ CTEI LLAVDER

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 63 (empty -> .)
    ARR             shift and go to state 11

    vars                           shift and go to state 118
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9
    arreglo                        shift and go to state 10

state 89

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR . vars bloque RETURN fin_declaracion_funcion
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (15) id_lista -> . arreglo
    (63) empty -> .
    (22) arreglo -> . ARR LLAVIZQ CTEI LLAVDER

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 63 (empty -> .)
    ARR             shift and go to state 11

    vars                           shift and go to state 119
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9
    arreglo                        shift and go to state 10

state 90

    (30) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 30 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 30 (asignacion -> ID IGUAL expresion PUNCOM .)
    PRINT           reduce using rule 30 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 30 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 30 (asignacion -> ID IGUAL expresion PUNCOM .)


state 91

    (36) expresion -> expresion AND . expresion
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 120
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 92

    (37) expresion -> expresion OR . expresion
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    expresion                      shift and go to state 121
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 93

    (39) expresion -> exp MAYOR . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 122
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 94

    (40) expresion -> exp MENOR . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 123
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 95

    (41) expresion -> exp DIFF . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 124
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 96

    (42) expresion -> exp IGIG . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 125
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 97

    (43) expresion -> exp MAYIG . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 126
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 98

    (44) expresion -> exp MENIG . exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 127
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 99

    (45) exp -> termino exp_operacion .

    MAYOR           reduce using rule 45 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 45 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 45 (exp -> termino exp_operacion .)
    IGIG            reduce using rule 45 (exp -> termino exp_operacion .)
    MAYIG           reduce using rule 45 (exp -> termino exp_operacion .)
    MENIG           reduce using rule 45 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 45 (exp -> termino exp_operacion .)
    AND             reduce using rule 45 (exp -> termino exp_operacion .)
    OR              reduce using rule 45 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 45 (exp -> termino exp_operacion .)
    COMA            reduce using rule 45 (exp -> termino exp_operacion .)
    FUNC            reduce using rule 45 (exp -> termino exp_operacion .)
    MAIN            reduce using rule 45 (exp -> termino exp_operacion .)


state 100

    (46) exp_operacion -> MAS . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    termino                        shift and go to state 128
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 101

    (47) exp_operacion -> MENOS . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    termino                        shift and go to state 129
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 102

    (48) exp_operacion -> empty .

    MAYOR           reduce using rule 48 (exp_operacion -> empty .)
    MENOR           reduce using rule 48 (exp_operacion -> empty .)
    DIFF            reduce using rule 48 (exp_operacion -> empty .)
    IGIG            reduce using rule 48 (exp_operacion -> empty .)
    MAYIG           reduce using rule 48 (exp_operacion -> empty .)
    MENIG           reduce using rule 48 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 48 (exp_operacion -> empty .)
    AND             reduce using rule 48 (exp_operacion -> empty .)
    OR              reduce using rule 48 (exp_operacion -> empty .)
    PARDER          reduce using rule 48 (exp_operacion -> empty .)
    COMA            reduce using rule 48 (exp_operacion -> empty .)
    FUNC            reduce using rule 48 (exp_operacion -> empty .)
    MAIN            reduce using rule 48 (exp_operacion -> empty .)


state 103

    (49) termino -> factor termino_operador .

    MAS             reduce using rule 49 (termino -> factor termino_operador .)
    MENOS           reduce using rule 49 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 49 (termino -> factor termino_operador .)
    MENOR           reduce using rule 49 (termino -> factor termino_operador .)
    DIFF            reduce using rule 49 (termino -> factor termino_operador .)
    IGIG            reduce using rule 49 (termino -> factor termino_operador .)
    MAYIG           reduce using rule 49 (termino -> factor termino_operador .)
    MENIG           reduce using rule 49 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 49 (termino -> factor termino_operador .)
    AND             reduce using rule 49 (termino -> factor termino_operador .)
    OR              reduce using rule 49 (termino -> factor termino_operador .)
    PARDER          reduce using rule 49 (termino -> factor termino_operador .)
    COMA            reduce using rule 49 (termino -> factor termino_operador .)
    FUNC            reduce using rule 49 (termino -> factor termino_operador .)
    MAIN            reduce using rule 49 (termino -> factor termino_operador .)


state 104

    (50) termino_operador -> POR . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    factor                         shift and go to state 130
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 105

    (51) termino_operador -> DIV . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    factor                         shift and go to state 131
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 106

    (52) termino_operador -> empty .

    MAS             reduce using rule 52 (termino_operador -> empty .)
    MENOS           reduce using rule 52 (termino_operador -> empty .)
    MAYOR           reduce using rule 52 (termino_operador -> empty .)
    MENOR           reduce using rule 52 (termino_operador -> empty .)
    DIFF            reduce using rule 52 (termino_operador -> empty .)
    IGIG            reduce using rule 52 (termino_operador -> empty .)
    MAYIG           reduce using rule 52 (termino_operador -> empty .)
    MENIG           reduce using rule 52 (termino_operador -> empty .)
    PUNCOM          reduce using rule 52 (termino_operador -> empty .)
    AND             reduce using rule 52 (termino_operador -> empty .)
    OR              reduce using rule 52 (termino_operador -> empty .)
    PARDER          reduce using rule 52 (termino_operador -> empty .)
    COMA            reduce using rule 52 (termino_operador -> empty .)
    FUNC            reduce using rule 52 (termino_operador -> empty .)
    MAIN            reduce using rule 52 (termino_operador -> empty .)


state 107

    (53) factor -> PARIZQ expresion . PARDER
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion

    PARDER          shift and go to state 132
    AND             shift and go to state 91
    OR              shift and go to state 92


state 108

    (54) factor -> MAS var_cte .

    POR             reduce using rule 54 (factor -> MAS var_cte .)
    DIV             reduce using rule 54 (factor -> MAS var_cte .)
    MAS             reduce using rule 54 (factor -> MAS var_cte .)
    MENOS           reduce using rule 54 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 54 (factor -> MAS var_cte .)
    MENOR           reduce using rule 54 (factor -> MAS var_cte .)
    DIFF            reduce using rule 54 (factor -> MAS var_cte .)
    IGIG            reduce using rule 54 (factor -> MAS var_cte .)
    MAYIG           reduce using rule 54 (factor -> MAS var_cte .)
    MENIG           reduce using rule 54 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 54 (factor -> MAS var_cte .)
    AND             reduce using rule 54 (factor -> MAS var_cte .)
    OR              reduce using rule 54 (factor -> MAS var_cte .)
    PARDER          reduce using rule 54 (factor -> MAS var_cte .)
    COMA            reduce using rule 54 (factor -> MAS var_cte .)
    FUNC            reduce using rule 54 (factor -> MAS var_cte .)
    MAIN            reduce using rule 54 (factor -> MAS var_cte .)


state 109

    (55) factor -> MENOS var_cte .

    POR             reduce using rule 55 (factor -> MENOS var_cte .)
    DIV             reduce using rule 55 (factor -> MENOS var_cte .)
    MAS             reduce using rule 55 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 55 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 55 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 55 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 55 (factor -> MENOS var_cte .)
    IGIG            reduce using rule 55 (factor -> MENOS var_cte .)
    MAYIG           reduce using rule 55 (factor -> MENOS var_cte .)
    MENIG           reduce using rule 55 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 55 (factor -> MENOS var_cte .)
    AND             reduce using rule 55 (factor -> MENOS var_cte .)
    OR              reduce using rule 55 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 55 (factor -> MENOS var_cte .)
    COMA            reduce using rule 55 (factor -> MENOS var_cte .)
    FUNC            reduce using rule 55 (factor -> MENOS var_cte .)
    MAIN            reduce using rule 55 (factor -> MENOS var_cte .)


state 110

    (64) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_if PUNCOM
    (65) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (66) verificar_if -> .

    LLAVIZQ         reduce using rule 66 (verificar_if -> .)

    verificar_if                   shift and go to state 133

state 111

    (31) escritura -> PRINT PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 134


state 112

    (32) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 32 (print_expresion -> expresion multiples_print .)


state 113

    (34) multiples_print -> COMA . print_expresion
    (32) print_expresion -> . expresion multiples_print
    (33) print_expresion -> . CTESTRING multiples_print
    (36) expresion -> . expresion AND expresion
    (37) expresion -> . expresion OR expresion
    (38) expresion -> . exp
    (39) expresion -> . exp MAYOR exp
    (40) expresion -> . exp MENOR exp
    (41) expresion -> . exp DIFF exp
    (42) expresion -> . exp IGIG exp
    (43) expresion -> . exp MAYIG exp
    (44) expresion -> . exp MENIG exp
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 85
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    print_expresion                shift and go to state 135
    expresion                      shift and go to state 84
    exp                            shift and go to state 70
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 114

    (35) multiples_print -> empty .

    PARDER          reduce using rule 35 (multiples_print -> empty .)


state 115

    (33) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 33 (print_expresion -> CTESTRING multiples_print .)


state 116

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion . verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion
    (71) verificar_expresion_while -> .

    AND             shift and go to state 91
    OR              shift and go to state 92
    PARDER          reduce using rule 71 (verificar_expresion_while -> .)

    verificar_expresion_while      shift and go to state 136

state 117

    (5) param -> TIPO ID guardar_param COMA . param
    (5) param -> . TIPO ID guardar_param COMA param
    (6) param -> . TIPO ID guardar_param
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (63) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    BOOL            shift and go to state 28
    PARDER          reduce using rule 63 (empty -> .)

    TIPO                           shift and go to state 55
    param                          shift and go to state 137
    empty                          shift and go to state 57

state 118

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars . bloque RETURN exp fin_declaracion_funcion
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 138

state 119

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars . bloque RETURN fin_declaracion_funcion
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 139

state 120

    (36) expresion -> expresion AND expresion .
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 36 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 36 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 36 (expresion -> expresion AND expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 36 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 36 (expresion -> expresion AND expresion .) ]


state 121

    (37) expresion -> expresion OR expresion .
    (36) expresion -> expresion . AND expresion
    (37) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 37 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 37 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 37 (expresion -> expresion OR expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 37 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 37 (expresion -> expresion OR expresion .) ]


state 122

    (39) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 39 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 39 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 39 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 39 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 39 (expresion -> exp MAYOR exp .)


state 123

    (40) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 40 (expresion -> exp MENOR exp .)
    AND             reduce using rule 40 (expresion -> exp MENOR exp .)
    OR              reduce using rule 40 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 40 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 40 (expresion -> exp MENOR exp .)


state 124

    (41) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 41 (expresion -> exp DIFF exp .)
    AND             reduce using rule 41 (expresion -> exp DIFF exp .)
    OR              reduce using rule 41 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 41 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 41 (expresion -> exp DIFF exp .)


state 125

    (42) expresion -> exp IGIG exp .

    PUNCOM          reduce using rule 42 (expresion -> exp IGIG exp .)
    AND             reduce using rule 42 (expresion -> exp IGIG exp .)
    OR              reduce using rule 42 (expresion -> exp IGIG exp .)
    PARDER          reduce using rule 42 (expresion -> exp IGIG exp .)
    COMA            reduce using rule 42 (expresion -> exp IGIG exp .)


state 126

    (43) expresion -> exp MAYIG exp .

    PUNCOM          reduce using rule 43 (expresion -> exp MAYIG exp .)
    AND             reduce using rule 43 (expresion -> exp MAYIG exp .)
    OR              reduce using rule 43 (expresion -> exp MAYIG exp .)
    PARDER          reduce using rule 43 (expresion -> exp MAYIG exp .)
    COMA            reduce using rule 43 (expresion -> exp MAYIG exp .)


state 127

    (44) expresion -> exp MENIG exp .

    PUNCOM          reduce using rule 44 (expresion -> exp MENIG exp .)
    AND             reduce using rule 44 (expresion -> exp MENIG exp .)
    OR              reduce using rule 44 (expresion -> exp MENIG exp .)
    PARDER          reduce using rule 44 (expresion -> exp MENIG exp .)
    COMA            reduce using rule 44 (expresion -> exp MENIG exp .)


state 128

    (46) exp_operacion -> MAS termino . exp_operacion
    (46) exp_operacion -> . MAS termino exp_operacion
    (47) exp_operacion -> . MENOS termino exp_operacion
    (48) exp_operacion -> . empty
    (63) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    exp_operacion                  shift and go to state 140
    empty                          shift and go to state 102

state 129

    (47) exp_operacion -> MENOS termino . exp_operacion
    (46) exp_operacion -> . MAS termino exp_operacion
    (47) exp_operacion -> . MENOS termino exp_operacion
    (48) exp_operacion -> . empty
    (63) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    exp_operacion                  shift and go to state 141
    empty                          shift and go to state 102

state 130

    (50) termino_operador -> POR factor . termino_operador
    (50) termino_operador -> . POR factor termino_operador
    (51) termino_operador -> . DIV factor termino_operador
    (52) termino_operador -> . empty
    (63) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 63 (empty -> .)
    MENOS           reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    termino_operador               shift and go to state 142
    empty                          shift and go to state 106

state 131

    (51) termino_operador -> DIV factor . termino_operador
    (50) termino_operador -> . POR factor termino_operador
    (51) termino_operador -> . DIV factor termino_operador
    (52) termino_operador -> . empty
    (63) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 63 (empty -> .)
    MENOS           reduce using rule 63 (empty -> .)
    MAYOR           reduce using rule 63 (empty -> .)
    MENOR           reduce using rule 63 (empty -> .)
    DIFF            reduce using rule 63 (empty -> .)
    IGIG            reduce using rule 63 (empty -> .)
    MAYIG           reduce using rule 63 (empty -> .)
    MENIG           reduce using rule 63 (empty -> .)
    PUNCOM          reduce using rule 63 (empty -> .)
    AND             reduce using rule 63 (empty -> .)
    OR              reduce using rule 63 (empty -> .)
    PARDER          reduce using rule 63 (empty -> .)
    COMA            reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

    termino_operador               shift and go to state 143
    empty                          shift and go to state 106

state 132

    (53) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    IGIG            reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MAYIG           reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MENIG           reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    FUNC            reduce using rule 53 (factor -> PARIZQ expresion PARDER .)
    MAIN            reduce using rule 53 (factor -> PARIZQ expresion PARDER .)


state 133

    (64) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_if PUNCOM
    (65) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 144

state 134

    (31) escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 31 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 31 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    PRINT           reduce using rule 31 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 31 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 31 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)


state 135

    (34) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 34 (multiples_print -> COMA print_expresion .)


state 136

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while . PARDER DO bloque llenar_cuadruplo_while

    PARDER          shift and go to state 145


state 137

    (5) param -> TIPO ID guardar_param COMA param .

    PARDER          reduce using rule 5 (param -> TIPO ID guardar_param COMA param .)


state 138

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque . RETURN exp fin_declaracion_funcion

    RETURN          shift and go to state 146


state 139

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque . RETURN fin_declaracion_funcion

    RETURN          shift and go to state 147


state 140

    (46) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    IGIG            reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    MAYIG           reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    MENIG           reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    FUNC            reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)
    MAIN            reduce using rule 46 (exp_operacion -> MAS termino exp_operacion .)


state 141

    (47) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    IGIG            reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    MAYIG           reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    MENIG           reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    FUNC            reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)
    MAIN            reduce using rule 47 (exp_operacion -> MENOS termino exp_operacion .)


state 142

    (50) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    IGIG            reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MAYIG           reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MENIG           reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    FUNC            reduce using rule 50 (termino_operador -> POR factor termino_operador .)
    MAIN            reduce using rule 50 (termino_operador -> POR factor termino_operador .)


state 143

    (51) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    IGIG            reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MAYIG           reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MENIG           reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    FUNC            reduce using rule 51 (termino_operador -> DIV factor termino_operador .)
    MAIN            reduce using rule 51 (termino_operador -> DIV factor termino_operador .)


state 144

    (64) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_if PUNCOM
    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (67) verificar_bloque_if -> .
    (68) verificar_bloque_else -> .

    PUNCOM          reduce using rule 67 (verificar_bloque_if -> .)
    ELSE            reduce using rule 68 (verificar_bloque_else -> .)

    verificar_bloque_if            shift and go to state 148
    verificar_bloque_else          shift and go to state 149

state 145

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER . DO bloque llenar_cuadruplo_while

    DO              shift and go to state 150


state 146

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN . exp fin_declaracion_funcion
    (45) exp -> . termino exp_operacion
    (49) termino -> . factor termino_operador
    (53) factor -> . PARIZQ expresion PARDER
    (54) factor -> . MAS var_cte
    (55) factor -> . MENOS var_cte
    (56) factor -> . var_cte
    (57) factor -> . empty
    (58) var_cte -> . ID
    (59) var_cte -> . CTEI
    (60) var_cte -> . CTEF
    (61) var_cte -> . CTEC
    (62) var_cte -> . CTEB
    (63) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 73
    MAS             shift and go to state 74
    MENOS           shift and go to state 76
    ID              shift and go to state 68
    CTEI            shift and go to state 78
    CTEF            shift and go to state 79
    CTEC            shift and go to state 80
    CTEB            shift and go to state 81
    POR             reduce using rule 63 (empty -> .)
    DIV             reduce using rule 63 (empty -> .)
    FUNC            reduce using rule 63 (empty -> .)
    MAIN            reduce using rule 63 (empty -> .)

  ! MAS             [ reduce using rule 63 (empty -> .) ]
  ! MENOS           [ reduce using rule 63 (empty -> .) ]

    exp                            shift and go to state 151
    termino                        shift and go to state 71
    factor                         shift and go to state 72
    var_cte                        shift and go to state 75
    empty                          shift and go to state 77

state 147

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN . fin_declaracion_funcion
    (10) fin_declaracion_funcion -> .

    FUNC            reduce using rule 10 (fin_declaracion_funcion -> .)
    MAIN            reduce using rule 10 (fin_declaracion_funcion -> .)

    fin_declaracion_funcion        shift and go to state 152

state 148

    (64) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 153


state 149

    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else . ELSE bloque verificar_bloque_if PUNCOM

    ELSE            shift and go to state 154


state 150

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO . bloque llenar_cuadruplo_while
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 155

state 151

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp . fin_declaracion_funcion
    (10) fin_declaracion_funcion -> .

    FUNC            reduce using rule 10 (fin_declaracion_funcion -> .)
    MAIN            reduce using rule 10 (fin_declaracion_funcion -> .)

    fin_declaracion_funcion        shift and go to state 156

state 152

    (4) funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion .

    FUNC            reduce using rule 4 (funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion .)
    MAIN            reduce using rule 4 (funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion .)


state 153

    (64) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    PRINT           reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 64 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)


state 154

    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE . bloque verificar_bloque_if PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 41

    bloque                         shift and go to state 157

state 155

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque . llenar_cuadruplo_while
    (72) llenar_cuadruplo_while -> .

    ID              reduce using rule 72 (llenar_cuadruplo_while -> .)
    IF              reduce using rule 72 (llenar_cuadruplo_while -> .)
    PRINT           reduce using rule 72 (llenar_cuadruplo_while -> .)
    WHILE           reduce using rule 72 (llenar_cuadruplo_while -> .)
    LLAVDER         reduce using rule 72 (llenar_cuadruplo_while -> .)

    llenar_cuadruplo_while         shift and go to state 158

state 156

    (3) funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion .

    FUNC            reduce using rule 3 (funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion .)
    MAIN            reduce using rule 3 (funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion .)


state 157

    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque . verificar_bloque_if PUNCOM
    (67) verificar_bloque_if -> .

    PUNCOM          reduce using rule 67 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 159

state 158

    (69) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .

    ID              reduce using rule 69 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    IF              reduce using rule 69 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    PRINT           reduce using rule 69 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    WHILE           reduce using rule 69 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    LLAVDER         reduce using rule 69 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)


state 159

    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 160


state 160

    (65) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 65 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 65 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    PRINT           reduce using rule 65 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 65 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 65 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 61 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 61 resolved as shift
WARNING: shift/reduce conflict for MAS in state 62 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 62 resolved as shift
WARNING: shift/reduce conflict for MAS in state 63 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 63 resolved as shift
WARNING: shift/reduce conflict for MAS in state 73 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 73 resolved as shift
WARNING: shift/reduce conflict for MAS in state 86 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 86 resolved as shift
WARNING: shift/reduce conflict for MAS in state 91 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 91 resolved as shift
WARNING: shift/reduce conflict for MAS in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 92 resolved as shift
WARNING: shift/reduce conflict for MAS in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 93 resolved as shift
WARNING: shift/reduce conflict for MAS in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 94 resolved as shift
WARNING: shift/reduce conflict for MAS in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 95 resolved as shift
WARNING: shift/reduce conflict for MAS in state 96 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 96 resolved as shift
WARNING: shift/reduce conflict for MAS in state 97 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 97 resolved as shift
WARNING: shift/reduce conflict for MAS in state 98 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 98 resolved as shift
WARNING: shift/reduce conflict for MAS in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 100 resolved as shift
WARNING: shift/reduce conflict for MAS in state 101 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 101 resolved as shift
WARNING: shift/reduce conflict for MAS in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 104 resolved as shift
WARNING: shift/reduce conflict for MAS in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 105 resolved as shift
WARNING: shift/reduce conflict for MAS in state 113 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for MAS in state 146 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 146 resolved as shift
