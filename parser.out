Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARR
    CORCHDER
    CORCHIZQ
    FOR
    MOD
    TO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM VAR vars main
Rule 2     main -> MAIN PARIZQ PARDER bloque
Rule 3     funcion -> FUNC TIPO insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN exp fin_declaracion_funcion
Rule 4     funcion -> FUNC VOID insertar_nombre_funcion ID PARIZQ param PARDER VAR vars bloque RETURN fin_declaracion_funcion
Rule 5     insertar_nombre_funcion -> <empty>
Rule 6     guardar_param -> <empty>
Rule 7     fin_declaracion_funcion -> <empty>
Rule 8     acum_func -> funcion acum_func
Rule 9     acum_func -> empty
Rule 10    param -> TIPO ID COMA param
Rule 11    param -> TIPO ID
Rule 12    param -> empty
Rule 13    id_lista -> ID COMA id_lista
Rule 14    id_lista -> ID
Rule 15    vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 16    vars -> empty
Rule 17    TIPO -> INT
Rule 18    TIPO -> FLOAT
Rule 19    TIPO -> CHAR
Rule 20    TIPO -> BOOL
Rule 21    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 22    estatuto -> asignacion
Rule 23    estatuto -> condicion
Rule 24    estatuto -> escritura
Rule 25    estatuto -> while_condicion
Rule 26    multiples_estatutos -> estatuto multiples_estatutos
Rule 27    multiples_estatutos -> empty
Rule 28    asignacion -> ID IGUAL expresion PUNCOM
Rule 29    escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM
Rule 30    print_expresion -> expresion multiples_print
Rule 31    print_expresion -> CTESTRING multiples_print
Rule 32    multiples_print -> COMA print_expresion
Rule 33    multiples_print -> empty
Rule 34    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
Rule 35    condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
Rule 36    while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
Rule 37    expresion -> expresion AND expresion
Rule 38    expresion -> expresion OR expresion
Rule 39    expresion -> exp
Rule 40    expresion -> exp MAYOR exp
Rule 41    expresion -> exp MENOR exp
Rule 42    expresion -> exp DIFF exp
Rule 43    expresion -> exp IGIG exp
Rule 44    expresion -> exp MAYIG exp
Rule 45    expresion -> exp MENIG exp
Rule 46    exp -> termino exp_operacion
Rule 47    exp_operacion -> MAS termino exp_operacion
Rule 48    exp_operacion -> MENOS termino exp_operacion
Rule 49    exp_operacion -> empty
Rule 50    termino -> factor termino_operador
Rule 51    termino_operador -> POR factor termino_operador
Rule 52    termino_operador -> DIV factor termino_operador
Rule 53    termino_operador -> empty
Rule 54    factor -> PARIZQ expresion PARDER
Rule 55    factor -> MAS var_cte
Rule 56    factor -> MENOS var_cte
Rule 57    factor -> var_cte
Rule 58    factor -> empty
Rule 59    var_cte -> ID
Rule 60    var_cte -> CTEI
Rule 61    var_cte -> CTEF
Rule 62    var_cte -> CTEC
Rule 63    var_cte -> CTEB
Rule 64    empty -> <empty>
Rule 65    verificar_if -> <empty>
Rule 66    verificar_bloque_if -> <empty>
Rule 67    verificar_bloque_else -> <empty>
Rule 68    guardar_posicion_while -> <empty>
Rule 69    verificar_expresion_while -> <empty>
Rule 70    llenar_cuadruplo_while -> <empty>

Terminals, with rules where they appear

AND                  : 37
ARR                  : 
BOOL                 : 20
CHAR                 : 19
COMA                 : 10 13 32
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 63
CTEC                 : 62
CTEF                 : 61
CTEI                 : 60
CTESTRING            : 31
DIFF                 : 42
DIV                  : 52
DO                   : 36
DOSPUN               : 15
ELSE                 : 35
FLOAT                : 18
FOR                  : 
FUNC                 : 3 4
ID                   : 1 3 4 10 11 13 14 28 59
IF                   : 34 35
IGIG                 : 43
IGUAL                : 28
INT                  : 17
LLAVDER              : 21
LLAVIZQ              : 21
MAIN                 : 2
MAS                  : 47 55
MAYIG                : 44
MAYOR                : 40
MENIG                : 45
MENOR                : 41
MENOS                : 48 56
MOD                  : 
OR                   : 38
PARDER               : 2 3 4 29 34 35 36 54
PARIZQ               : 2 3 4 29 34 35 36 54
POR                  : 51
PRINT                : 29
PROGRAM              : 1
PUNCOM               : 1 15 28 29 34 35
RETURN               : 3 4
TO                   : 
VAR                  : 1 3 4
VOID                 : 4
WHILE                : 36
error                : 

Nonterminals, with rules where they appear

TIPO                 : 3 10 11 15
acum_func            : 8
asignacion           : 22
bloque               : 2 3 4 34 35 35 36
condicion            : 23
empty                : 9 12 16 27 33 49 53 58
escritura            : 24
estatuto             : 26
exp                  : 3 39 40 40 41 41 42 42 43 43 44 44 45 45
exp_operacion        : 46 47 48
expresion            : 28 30 34 35 36 37 37 38 38 54
factor               : 50 51 52
fin_declaracion_funcion : 3 4
funcion              : 8
guardar_param        : 
guardar_posicion_while : 36
id_lista             : 13 15
insertar_nombre_funcion : 3 4
llenar_cuadruplo_while : 36
main                 : 1
multiples_estatutos  : 21 26
multiples_print      : 30 31
param                : 3 4 10
print_expresion      : 29 32
program              : 0
termino              : 46 47 48
termino_operador     : 50 51 52
var_cte              : 55 56 57
vars                 : 1 3 4 15
verificar_bloque_else : 35
verificar_bloque_if  : 34 35
verificar_expresion_while : 36
verificar_if         : 34 35
while_condicion      : 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM VAR vars main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM VAR vars main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM VAR vars main

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . VAR vars main

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID PUNCOM VAR . vars main
    (15) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (16) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (64) empty -> .

    ID              shift and go to state 6
    MAIN            reduce using rule 64 (empty -> .)

    vars                           shift and go to state 7
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 6

    (13) id_lista -> ID . COMA id_lista
    (14) id_lista -> ID .

    COMA            shift and go to state 10
    DOSPUN          reduce using rule 14 (id_lista -> ID .)


state 7

    (1) program -> PROGRAM ID PUNCOM VAR vars . main
    (2) main -> . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 12

    main                           shift and go to state 11

state 8

    (15) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 13


state 9

    (16) vars -> empty .

    MAIN            reduce using rule 16 (vars -> empty .)


state 10

    (13) id_lista -> ID COMA . id_lista
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID

    ID              shift and go to state 6

    id_lista                       shift and go to state 14

state 11

    (1) program -> PROGRAM ID PUNCOM VAR vars main .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM VAR vars main .)


state 12

    (2) main -> MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 15


state 13

    (15) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (17) TIPO -> . INT
    (18) TIPO -> . FLOAT
    (19) TIPO -> . CHAR
    (20) TIPO -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    BOOL            shift and go to state 20

    TIPO                           shift and go to state 16

state 14

    (13) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 13 (id_lista -> ID COMA id_lista .)


state 15

    (2) main -> MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 21


state 16

    (15) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 22


state 17

    (17) TIPO -> INT .

    PUNCOM          reduce using rule 17 (TIPO -> INT .)


state 18

    (18) TIPO -> FLOAT .

    PUNCOM          reduce using rule 18 (TIPO -> FLOAT .)


state 19

    (19) TIPO -> CHAR .

    PUNCOM          reduce using rule 19 (TIPO -> CHAR .)


state 20

    (20) TIPO -> BOOL .

    PUNCOM          reduce using rule 20 (TIPO -> BOOL .)


state 21

    (2) main -> MAIN PARIZQ PARDER . bloque
    (21) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 24

    bloque                         shift and go to state 23

state 22

    (15) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (15) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (16) vars -> . empty
    (13) id_lista -> . ID COMA id_lista
    (14) id_lista -> . ID
    (64) empty -> .

    ID              shift and go to state 6
    MAIN            reduce using rule 64 (empty -> .)

    id_lista                       shift and go to state 8
    vars                           shift and go to state 25
    empty                          shift and go to state 9

state 23

    (2) main -> MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 2 (main -> MAIN PARIZQ PARDER bloque .)


state 24

    (21) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (26) multiples_estatutos -> . estatuto multiples_estatutos
    (27) multiples_estatutos -> . empty
    (22) estatuto -> . asignacion
    (23) estatuto -> . condicion
    (24) estatuto -> . escritura
    (25) estatuto -> . while_condicion
    (64) empty -> .
    (28) asignacion -> . ID IGUAL expresion PUNCOM
    (34) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (29) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (36) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    LLAVDER         reduce using rule 64 (empty -> .)
    ID              shift and go to state 33
    IF              shift and go to state 34
    PRINT           shift and go to state 35
    WHILE           shift and go to state 36

    multiples_estatutos            shift and go to state 26
    estatuto                       shift and go to state 27
    empty                          shift and go to state 28
    asignacion                     shift and go to state 29
    condicion                      shift and go to state 30
    escritura                      shift and go to state 31
    while_condicion                shift and go to state 32

state 25

    (15) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    MAIN            reduce using rule 15 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 26

    (21) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 37


state 27

    (26) multiples_estatutos -> estatuto . multiples_estatutos
    (26) multiples_estatutos -> . estatuto multiples_estatutos
    (27) multiples_estatutos -> . empty
    (22) estatuto -> . asignacion
    (23) estatuto -> . condicion
    (24) estatuto -> . escritura
    (25) estatuto -> . while_condicion
    (64) empty -> .
    (28) asignacion -> . ID IGUAL expresion PUNCOM
    (34) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (29) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (36) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    LLAVDER         reduce using rule 64 (empty -> .)
    ID              shift and go to state 33
    IF              shift and go to state 34
    PRINT           shift and go to state 35
    WHILE           shift and go to state 36

    estatuto                       shift and go to state 27
    multiples_estatutos            shift and go to state 38
    empty                          shift and go to state 28
    asignacion                     shift and go to state 29
    condicion                      shift and go to state 30
    escritura                      shift and go to state 31
    while_condicion                shift and go to state 32

state 28

    (27) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 27 (multiples_estatutos -> empty .)


state 29

    (22) estatuto -> asignacion .

    ID              reduce using rule 22 (estatuto -> asignacion .)
    IF              reduce using rule 22 (estatuto -> asignacion .)
    PRINT           reduce using rule 22 (estatuto -> asignacion .)
    WHILE           reduce using rule 22 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 22 (estatuto -> asignacion .)


state 30

    (23) estatuto -> condicion .

    ID              reduce using rule 23 (estatuto -> condicion .)
    IF              reduce using rule 23 (estatuto -> condicion .)
    PRINT           reduce using rule 23 (estatuto -> condicion .)
    WHILE           reduce using rule 23 (estatuto -> condicion .)
    LLAVDER         reduce using rule 23 (estatuto -> condicion .)


state 31

    (24) estatuto -> escritura .

    ID              reduce using rule 24 (estatuto -> escritura .)
    IF              reduce using rule 24 (estatuto -> escritura .)
    PRINT           reduce using rule 24 (estatuto -> escritura .)
    WHILE           reduce using rule 24 (estatuto -> escritura .)
    LLAVDER         reduce using rule 24 (estatuto -> escritura .)


state 32

    (25) estatuto -> while_condicion .

    ID              reduce using rule 25 (estatuto -> while_condicion .)
    IF              reduce using rule 25 (estatuto -> while_condicion .)
    PRINT           reduce using rule 25 (estatuto -> while_condicion .)
    WHILE           reduce using rule 25 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 25 (estatuto -> while_condicion .)


state 33

    (28) asignacion -> ID . IGUAL expresion PUNCOM

    IGUAL           shift and go to state 39


state 34

    (34) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM

    PARIZQ          shift and go to state 40


state 35

    (29) escritura -> PRINT . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 41


state 36

    (36) while_condicion -> WHILE . PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    PARIZQ          shift and go to state 42


state 37

    (21) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PRINT           reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 21 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 38

    (26) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 26 (multiples_estatutos -> estatuto multiples_estatutos .)


state 39

    (28) asignacion -> ID IGUAL . expresion PUNCOM
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 40

    (34) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 57
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 41

    (29) escritura -> PRINT PARIZQ . print_expresion PARDER PUNCOM
    (30) print_expresion -> . expresion multiples_print
    (31) print_expresion -> . CTESTRING multiples_print
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 60
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    print_expresion                shift and go to state 58
    expresion                      shift and go to state 59
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 42

    (36) while_condicion -> WHILE PARIZQ . guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (68) guardar_posicion_while -> .

    PARIZQ          reduce using rule 68 (guardar_posicion_while -> .)
    MAS             reduce using rule 68 (guardar_posicion_while -> .)
    MENOS           reduce using rule 68 (guardar_posicion_while -> .)
    ID              reduce using rule 68 (guardar_posicion_while -> .)
    CTEI            reduce using rule 68 (guardar_posicion_while -> .)
    CTEF            reduce using rule 68 (guardar_posicion_while -> .)
    CTEC            reduce using rule 68 (guardar_posicion_while -> .)
    CTEB            reduce using rule 68 (guardar_posicion_while -> .)
    AND             reduce using rule 68 (guardar_posicion_while -> .)
    OR              reduce using rule 68 (guardar_posicion_while -> .)
    PARDER          reduce using rule 68 (guardar_posicion_while -> .)
    MAYOR           reduce using rule 68 (guardar_posicion_while -> .)
    MENOR           reduce using rule 68 (guardar_posicion_while -> .)
    DIFF            reduce using rule 68 (guardar_posicion_while -> .)
    IGIG            reduce using rule 68 (guardar_posicion_while -> .)
    MAYIG           reduce using rule 68 (guardar_posicion_while -> .)
    MENIG           reduce using rule 68 (guardar_posicion_while -> .)
    POR             reduce using rule 68 (guardar_posicion_while -> .)
    DIV             reduce using rule 68 (guardar_posicion_while -> .)

    guardar_posicion_while         shift and go to state 61

state 43

    (59) var_cte -> ID .

    POR             reduce using rule 59 (var_cte -> ID .)
    DIV             reduce using rule 59 (var_cte -> ID .)
    MAS             reduce using rule 59 (var_cte -> ID .)
    MENOS           reduce using rule 59 (var_cte -> ID .)
    MAYOR           reduce using rule 59 (var_cte -> ID .)
    MENOR           reduce using rule 59 (var_cte -> ID .)
    DIFF            reduce using rule 59 (var_cte -> ID .)
    IGIG            reduce using rule 59 (var_cte -> ID .)
    MAYIG           reduce using rule 59 (var_cte -> ID .)
    MENIG           reduce using rule 59 (var_cte -> ID .)
    PUNCOM          reduce using rule 59 (var_cte -> ID .)
    AND             reduce using rule 59 (var_cte -> ID .)
    OR              reduce using rule 59 (var_cte -> ID .)
    PARDER          reduce using rule 59 (var_cte -> ID .)
    COMA            reduce using rule 59 (var_cte -> ID .)


state 44

    (28) asignacion -> ID IGUAL expresion . PUNCOM
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 62
    AND             shift and go to state 63
    OR              shift and go to state 64


state 45

    (39) expresion -> exp .
    (40) expresion -> exp . MAYOR exp
    (41) expresion -> exp . MENOR exp
    (42) expresion -> exp . DIFF exp
    (43) expresion -> exp . IGIG exp
    (44) expresion -> exp . MAYIG exp
    (45) expresion -> exp . MENIG exp

    PUNCOM          reduce using rule 39 (expresion -> exp .)
    AND             reduce using rule 39 (expresion -> exp .)
    OR              reduce using rule 39 (expresion -> exp .)
    PARDER          reduce using rule 39 (expresion -> exp .)
    COMA            reduce using rule 39 (expresion -> exp .)
    MAYOR           shift and go to state 65
    MENOR           shift and go to state 66
    DIFF            shift and go to state 67
    IGIG            shift and go to state 68
    MAYIG           shift and go to state 69
    MENIG           shift and go to state 70


state 46

    (46) exp -> termino . exp_operacion
    (47) exp_operacion -> . MAS termino exp_operacion
    (48) exp_operacion -> . MENOS termino exp_operacion
    (49) exp_operacion -> . empty
    (64) empty -> .

    MAS             shift and go to state 72
    MENOS           shift and go to state 73
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    exp_operacion                  shift and go to state 71
    empty                          shift and go to state 74

state 47

    (50) termino -> factor . termino_operador
    (51) termino_operador -> . POR factor termino_operador
    (52) termino_operador -> . DIV factor termino_operador
    (53) termino_operador -> . empty
    (64) empty -> .

    POR             shift and go to state 76
    DIV             shift and go to state 77
    MAS             reduce using rule 64 (empty -> .)
    MENOS           reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    termino_operador               shift and go to state 75
    empty                          shift and go to state 78

state 48

    (54) factor -> PARIZQ . expresion PARDER
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 79
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 49

    (55) factor -> MAS . var_cte
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB

    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56

    var_cte                        shift and go to state 80

state 50

    (57) factor -> var_cte .

    POR             reduce using rule 57 (factor -> var_cte .)
    DIV             reduce using rule 57 (factor -> var_cte .)
    MAS             reduce using rule 57 (factor -> var_cte .)
    MENOS           reduce using rule 57 (factor -> var_cte .)
    MAYOR           reduce using rule 57 (factor -> var_cte .)
    MENOR           reduce using rule 57 (factor -> var_cte .)
    DIFF            reduce using rule 57 (factor -> var_cte .)
    IGIG            reduce using rule 57 (factor -> var_cte .)
    MAYIG           reduce using rule 57 (factor -> var_cte .)
    MENIG           reduce using rule 57 (factor -> var_cte .)
    PUNCOM          reduce using rule 57 (factor -> var_cte .)
    AND             reduce using rule 57 (factor -> var_cte .)
    OR              reduce using rule 57 (factor -> var_cte .)
    PARDER          reduce using rule 57 (factor -> var_cte .)
    COMA            reduce using rule 57 (factor -> var_cte .)


state 51

    (56) factor -> MENOS . var_cte
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB

    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56

    var_cte                        shift and go to state 81

state 52

    (58) factor -> empty .

    POR             reduce using rule 58 (factor -> empty .)
    DIV             reduce using rule 58 (factor -> empty .)
    MAS             reduce using rule 58 (factor -> empty .)
    MENOS           reduce using rule 58 (factor -> empty .)
    MAYOR           reduce using rule 58 (factor -> empty .)
    MENOR           reduce using rule 58 (factor -> empty .)
    DIFF            reduce using rule 58 (factor -> empty .)
    IGIG            reduce using rule 58 (factor -> empty .)
    MAYIG           reduce using rule 58 (factor -> empty .)
    MENIG           reduce using rule 58 (factor -> empty .)
    PUNCOM          reduce using rule 58 (factor -> empty .)
    AND             reduce using rule 58 (factor -> empty .)
    OR              reduce using rule 58 (factor -> empty .)
    PARDER          reduce using rule 58 (factor -> empty .)
    COMA            reduce using rule 58 (factor -> empty .)


state 53

    (60) var_cte -> CTEI .

    POR             reduce using rule 60 (var_cte -> CTEI .)
    DIV             reduce using rule 60 (var_cte -> CTEI .)
    MAS             reduce using rule 60 (var_cte -> CTEI .)
    MENOS           reduce using rule 60 (var_cte -> CTEI .)
    MAYOR           reduce using rule 60 (var_cte -> CTEI .)
    MENOR           reduce using rule 60 (var_cte -> CTEI .)
    DIFF            reduce using rule 60 (var_cte -> CTEI .)
    IGIG            reduce using rule 60 (var_cte -> CTEI .)
    MAYIG           reduce using rule 60 (var_cte -> CTEI .)
    MENIG           reduce using rule 60 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 60 (var_cte -> CTEI .)
    AND             reduce using rule 60 (var_cte -> CTEI .)
    OR              reduce using rule 60 (var_cte -> CTEI .)
    PARDER          reduce using rule 60 (var_cte -> CTEI .)
    COMA            reduce using rule 60 (var_cte -> CTEI .)


state 54

    (61) var_cte -> CTEF .

    POR             reduce using rule 61 (var_cte -> CTEF .)
    DIV             reduce using rule 61 (var_cte -> CTEF .)
    MAS             reduce using rule 61 (var_cte -> CTEF .)
    MENOS           reduce using rule 61 (var_cte -> CTEF .)
    MAYOR           reduce using rule 61 (var_cte -> CTEF .)
    MENOR           reduce using rule 61 (var_cte -> CTEF .)
    DIFF            reduce using rule 61 (var_cte -> CTEF .)
    IGIG            reduce using rule 61 (var_cte -> CTEF .)
    MAYIG           reduce using rule 61 (var_cte -> CTEF .)
    MENIG           reduce using rule 61 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 61 (var_cte -> CTEF .)
    AND             reduce using rule 61 (var_cte -> CTEF .)
    OR              reduce using rule 61 (var_cte -> CTEF .)
    PARDER          reduce using rule 61 (var_cte -> CTEF .)
    COMA            reduce using rule 61 (var_cte -> CTEF .)


state 55

    (62) var_cte -> CTEC .

    POR             reduce using rule 62 (var_cte -> CTEC .)
    DIV             reduce using rule 62 (var_cte -> CTEC .)
    MAS             reduce using rule 62 (var_cte -> CTEC .)
    MENOS           reduce using rule 62 (var_cte -> CTEC .)
    MAYOR           reduce using rule 62 (var_cte -> CTEC .)
    MENOR           reduce using rule 62 (var_cte -> CTEC .)
    DIFF            reduce using rule 62 (var_cte -> CTEC .)
    IGIG            reduce using rule 62 (var_cte -> CTEC .)
    MAYIG           reduce using rule 62 (var_cte -> CTEC .)
    MENIG           reduce using rule 62 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 62 (var_cte -> CTEC .)
    AND             reduce using rule 62 (var_cte -> CTEC .)
    OR              reduce using rule 62 (var_cte -> CTEC .)
    PARDER          reduce using rule 62 (var_cte -> CTEC .)
    COMA            reduce using rule 62 (var_cte -> CTEC .)


state 56

    (63) var_cte -> CTEB .

    POR             reduce using rule 63 (var_cte -> CTEB .)
    DIV             reduce using rule 63 (var_cte -> CTEB .)
    MAS             reduce using rule 63 (var_cte -> CTEB .)
    MENOS           reduce using rule 63 (var_cte -> CTEB .)
    MAYOR           reduce using rule 63 (var_cte -> CTEB .)
    MENOR           reduce using rule 63 (var_cte -> CTEB .)
    DIFF            reduce using rule 63 (var_cte -> CTEB .)
    IGIG            reduce using rule 63 (var_cte -> CTEB .)
    MAYIG           reduce using rule 63 (var_cte -> CTEB .)
    MENIG           reduce using rule 63 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 63 (var_cte -> CTEB .)
    AND             reduce using rule 63 (var_cte -> CTEB .)
    OR              reduce using rule 63 (var_cte -> CTEB .)
    PARDER          reduce using rule 63 (var_cte -> CTEB .)
    COMA            reduce using rule 63 (var_cte -> CTEB .)


state 57

    (34) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion

    PARDER          shift and go to state 82
    AND             shift and go to state 63
    OR              shift and go to state 64


state 58

    (29) escritura -> PRINT PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 83


state 59

    (30) print_expresion -> expresion . multiples_print
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion
    (32) multiples_print -> . COMA print_expresion
    (33) multiples_print -> . empty
    (64) empty -> .

    AND             shift and go to state 63
    OR              shift and go to state 64
    COMA            shift and go to state 85
    PARDER          reduce using rule 64 (empty -> .)

    multiples_print                shift and go to state 84
    empty                          shift and go to state 86

state 60

    (31) print_expresion -> CTESTRING . multiples_print
    (32) multiples_print -> . COMA print_expresion
    (33) multiples_print -> . empty
    (64) empty -> .

    COMA            shift and go to state 85
    PARDER          reduce using rule 64 (empty -> .)

    multiples_print                shift and go to state 87
    empty                          shift and go to state 86

state 61

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while . expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 88
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 62

    (28) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 28 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 28 (asignacion -> ID IGUAL expresion PUNCOM .)
    PRINT           reduce using rule 28 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 28 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 28 (asignacion -> ID IGUAL expresion PUNCOM .)


state 63

    (37) expresion -> expresion AND . expresion
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 89
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 64

    (38) expresion -> expresion OR . expresion
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    expresion                      shift and go to state 90
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 65

    (40) expresion -> exp MAYOR . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 91
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 66

    (41) expresion -> exp MENOR . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 92
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 67

    (42) expresion -> exp DIFF . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 93
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 68

    (43) expresion -> exp IGIG . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 94
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 69

    (44) expresion -> exp MAYIG . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 95
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 70

    (45) expresion -> exp MENIG . exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    exp                            shift and go to state 96
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 71

    (46) exp -> termino exp_operacion .

    MAYOR           reduce using rule 46 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 46 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 46 (exp -> termino exp_operacion .)
    IGIG            reduce using rule 46 (exp -> termino exp_operacion .)
    MAYIG           reduce using rule 46 (exp -> termino exp_operacion .)
    MENIG           reduce using rule 46 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 46 (exp -> termino exp_operacion .)
    AND             reduce using rule 46 (exp -> termino exp_operacion .)
    OR              reduce using rule 46 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 46 (exp -> termino exp_operacion .)
    COMA            reduce using rule 46 (exp -> termino exp_operacion .)


state 72

    (47) exp_operacion -> MAS . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    termino                        shift and go to state 97
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 73

    (48) exp_operacion -> MENOS . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    termino                        shift and go to state 98
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 74

    (49) exp_operacion -> empty .

    MAYOR           reduce using rule 49 (exp_operacion -> empty .)
    MENOR           reduce using rule 49 (exp_operacion -> empty .)
    DIFF            reduce using rule 49 (exp_operacion -> empty .)
    IGIG            reduce using rule 49 (exp_operacion -> empty .)
    MAYIG           reduce using rule 49 (exp_operacion -> empty .)
    MENIG           reduce using rule 49 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 49 (exp_operacion -> empty .)
    AND             reduce using rule 49 (exp_operacion -> empty .)
    OR              reduce using rule 49 (exp_operacion -> empty .)
    PARDER          reduce using rule 49 (exp_operacion -> empty .)
    COMA            reduce using rule 49 (exp_operacion -> empty .)


state 75

    (50) termino -> factor termino_operador .

    MAS             reduce using rule 50 (termino -> factor termino_operador .)
    MENOS           reduce using rule 50 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 50 (termino -> factor termino_operador .)
    MENOR           reduce using rule 50 (termino -> factor termino_operador .)
    DIFF            reduce using rule 50 (termino -> factor termino_operador .)
    IGIG            reduce using rule 50 (termino -> factor termino_operador .)
    MAYIG           reduce using rule 50 (termino -> factor termino_operador .)
    MENIG           reduce using rule 50 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 50 (termino -> factor termino_operador .)
    AND             reduce using rule 50 (termino -> factor termino_operador .)
    OR              reduce using rule 50 (termino -> factor termino_operador .)
    PARDER          reduce using rule 50 (termino -> factor termino_operador .)
    COMA            reduce using rule 50 (termino -> factor termino_operador .)


state 76

    (51) termino_operador -> POR . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    factor                         shift and go to state 99
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 77

    (52) termino_operador -> DIV . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    factor                         shift and go to state 100
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 78

    (53) termino_operador -> empty .

    MAS             reduce using rule 53 (termino_operador -> empty .)
    MENOS           reduce using rule 53 (termino_operador -> empty .)
    MAYOR           reduce using rule 53 (termino_operador -> empty .)
    MENOR           reduce using rule 53 (termino_operador -> empty .)
    DIFF            reduce using rule 53 (termino_operador -> empty .)
    IGIG            reduce using rule 53 (termino_operador -> empty .)
    MAYIG           reduce using rule 53 (termino_operador -> empty .)
    MENIG           reduce using rule 53 (termino_operador -> empty .)
    PUNCOM          reduce using rule 53 (termino_operador -> empty .)
    AND             reduce using rule 53 (termino_operador -> empty .)
    OR              reduce using rule 53 (termino_operador -> empty .)
    PARDER          reduce using rule 53 (termino_operador -> empty .)
    COMA            reduce using rule 53 (termino_operador -> empty .)


state 79

    (54) factor -> PARIZQ expresion . PARDER
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion

    PARDER          shift and go to state 101
    AND             shift and go to state 63
    OR              shift and go to state 64


state 80

    (55) factor -> MAS var_cte .

    POR             reduce using rule 55 (factor -> MAS var_cte .)
    DIV             reduce using rule 55 (factor -> MAS var_cte .)
    MAS             reduce using rule 55 (factor -> MAS var_cte .)
    MENOS           reduce using rule 55 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 55 (factor -> MAS var_cte .)
    MENOR           reduce using rule 55 (factor -> MAS var_cte .)
    DIFF            reduce using rule 55 (factor -> MAS var_cte .)
    IGIG            reduce using rule 55 (factor -> MAS var_cte .)
    MAYIG           reduce using rule 55 (factor -> MAS var_cte .)
    MENIG           reduce using rule 55 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 55 (factor -> MAS var_cte .)
    AND             reduce using rule 55 (factor -> MAS var_cte .)
    OR              reduce using rule 55 (factor -> MAS var_cte .)
    PARDER          reduce using rule 55 (factor -> MAS var_cte .)
    COMA            reduce using rule 55 (factor -> MAS var_cte .)


state 81

    (56) factor -> MENOS var_cte .

    POR             reduce using rule 56 (factor -> MENOS var_cte .)
    DIV             reduce using rule 56 (factor -> MENOS var_cte .)
    MAS             reduce using rule 56 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 56 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 56 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 56 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 56 (factor -> MENOS var_cte .)
    IGIG            reduce using rule 56 (factor -> MENOS var_cte .)
    MAYIG           reduce using rule 56 (factor -> MENOS var_cte .)
    MENIG           reduce using rule 56 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 56 (factor -> MENOS var_cte .)
    AND             reduce using rule 56 (factor -> MENOS var_cte .)
    OR              reduce using rule 56 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 56 (factor -> MENOS var_cte .)
    COMA            reduce using rule 56 (factor -> MENOS var_cte .)


state 82

    (34) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_if PUNCOM
    (35) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (65) verificar_if -> .

    LLAVIZQ         reduce using rule 65 (verificar_if -> .)

    verificar_if                   shift and go to state 102

state 83

    (29) escritura -> PRINT PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 103


state 84

    (30) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 30 (print_expresion -> expresion multiples_print .)


state 85

    (32) multiples_print -> COMA . print_expresion
    (30) print_expresion -> . expresion multiples_print
    (31) print_expresion -> . CTESTRING multiples_print
    (37) expresion -> . expresion AND expresion
    (38) expresion -> . expresion OR expresion
    (39) expresion -> . exp
    (40) expresion -> . exp MAYOR exp
    (41) expresion -> . exp MENOR exp
    (42) expresion -> . exp DIFF exp
    (43) expresion -> . exp IGIG exp
    (44) expresion -> . exp MAYIG exp
    (45) expresion -> . exp MENIG exp
    (46) exp -> . termino exp_operacion
    (50) termino -> . factor termino_operador
    (54) factor -> . PARIZQ expresion PARDER
    (55) factor -> . MAS var_cte
    (56) factor -> . MENOS var_cte
    (57) factor -> . var_cte
    (58) factor -> . empty
    (59) var_cte -> . ID
    (60) var_cte -> . CTEI
    (61) var_cte -> . CTEF
    (62) var_cte -> . CTEC
    (63) var_cte -> . CTEB
    (64) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 60
    PARIZQ          shift and go to state 48
    MAS             shift and go to state 49
    MENOS           shift and go to state 51
    ID              shift and go to state 43
    CTEI            shift and go to state 53
    CTEF            shift and go to state 54
    CTEC            shift and go to state 55
    CTEB            shift and go to state 56
    POR             reduce using rule 64 (empty -> .)
    DIV             reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)

  ! MAS             [ reduce using rule 64 (empty -> .) ]
  ! MENOS           [ reduce using rule 64 (empty -> .) ]

    print_expresion                shift and go to state 104
    expresion                      shift and go to state 59
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 47
    var_cte                        shift and go to state 50
    empty                          shift and go to state 52

state 86

    (33) multiples_print -> empty .

    PARDER          reduce using rule 33 (multiples_print -> empty .)


state 87

    (31) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 31 (print_expresion -> CTESTRING multiples_print .)


state 88

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion . verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion
    (69) verificar_expresion_while -> .

    AND             shift and go to state 63
    OR              shift and go to state 64
    PARDER          reduce using rule 69 (verificar_expresion_while -> .)

    verificar_expresion_while      shift and go to state 105

state 89

    (37) expresion -> expresion AND expresion .
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 37 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 37 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 37 (expresion -> expresion AND expresion .)
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! AND             [ reduce using rule 37 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 37 (expresion -> expresion AND expresion .) ]


state 90

    (38) expresion -> expresion OR expresion .
    (37) expresion -> expresion . AND expresion
    (38) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 38 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 38 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 38 (expresion -> expresion OR expresion .)
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! AND             [ reduce using rule 38 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 38 (expresion -> expresion OR expresion .) ]


state 91

    (40) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 40 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 40 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 40 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 40 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 40 (expresion -> exp MAYOR exp .)


state 92

    (41) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 41 (expresion -> exp MENOR exp .)
    AND             reduce using rule 41 (expresion -> exp MENOR exp .)
    OR              reduce using rule 41 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 41 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 41 (expresion -> exp MENOR exp .)


state 93

    (42) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 42 (expresion -> exp DIFF exp .)
    AND             reduce using rule 42 (expresion -> exp DIFF exp .)
    OR              reduce using rule 42 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 42 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 42 (expresion -> exp DIFF exp .)


state 94

    (43) expresion -> exp IGIG exp .

    PUNCOM          reduce using rule 43 (expresion -> exp IGIG exp .)
    AND             reduce using rule 43 (expresion -> exp IGIG exp .)
    OR              reduce using rule 43 (expresion -> exp IGIG exp .)
    PARDER          reduce using rule 43 (expresion -> exp IGIG exp .)
    COMA            reduce using rule 43 (expresion -> exp IGIG exp .)


state 95

    (44) expresion -> exp MAYIG exp .

    PUNCOM          reduce using rule 44 (expresion -> exp MAYIG exp .)
    AND             reduce using rule 44 (expresion -> exp MAYIG exp .)
    OR              reduce using rule 44 (expresion -> exp MAYIG exp .)
    PARDER          reduce using rule 44 (expresion -> exp MAYIG exp .)
    COMA            reduce using rule 44 (expresion -> exp MAYIG exp .)


state 96

    (45) expresion -> exp MENIG exp .

    PUNCOM          reduce using rule 45 (expresion -> exp MENIG exp .)
    AND             reduce using rule 45 (expresion -> exp MENIG exp .)
    OR              reduce using rule 45 (expresion -> exp MENIG exp .)
    PARDER          reduce using rule 45 (expresion -> exp MENIG exp .)
    COMA            reduce using rule 45 (expresion -> exp MENIG exp .)


state 97

    (47) exp_operacion -> MAS termino . exp_operacion
    (47) exp_operacion -> . MAS termino exp_operacion
    (48) exp_operacion -> . MENOS termino exp_operacion
    (49) exp_operacion -> . empty
    (64) empty -> .

    MAS             shift and go to state 72
    MENOS           shift and go to state 73
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    exp_operacion                  shift and go to state 106
    empty                          shift and go to state 74

state 98

    (48) exp_operacion -> MENOS termino . exp_operacion
    (47) exp_operacion -> . MAS termino exp_operacion
    (48) exp_operacion -> . MENOS termino exp_operacion
    (49) exp_operacion -> . empty
    (64) empty -> .

    MAS             shift and go to state 72
    MENOS           shift and go to state 73
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    exp_operacion                  shift and go to state 107
    empty                          shift and go to state 74

state 99

    (51) termino_operador -> POR factor . termino_operador
    (51) termino_operador -> . POR factor termino_operador
    (52) termino_operador -> . DIV factor termino_operador
    (53) termino_operador -> . empty
    (64) empty -> .

    POR             shift and go to state 76
    DIV             shift and go to state 77
    MAS             reduce using rule 64 (empty -> .)
    MENOS           reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    termino_operador               shift and go to state 108
    empty                          shift and go to state 78

state 100

    (52) termino_operador -> DIV factor . termino_operador
    (51) termino_operador -> . POR factor termino_operador
    (52) termino_operador -> . DIV factor termino_operador
    (53) termino_operador -> . empty
    (64) empty -> .

    POR             shift and go to state 76
    DIV             shift and go to state 77
    MAS             reduce using rule 64 (empty -> .)
    MENOS           reduce using rule 64 (empty -> .)
    MAYOR           reduce using rule 64 (empty -> .)
    MENOR           reduce using rule 64 (empty -> .)
    DIFF            reduce using rule 64 (empty -> .)
    IGIG            reduce using rule 64 (empty -> .)
    MAYIG           reduce using rule 64 (empty -> .)
    MENIG           reduce using rule 64 (empty -> .)
    PUNCOM          reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    PARDER          reduce using rule 64 (empty -> .)
    COMA            reduce using rule 64 (empty -> .)

    termino_operador               shift and go to state 109
    empty                          shift and go to state 78

state 101

    (54) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    IGIG            reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MAYIG           reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    MENIG           reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 54 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 54 (factor -> PARIZQ expresion PARDER .)


state 102

    (34) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_if PUNCOM
    (35) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (21) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 24

    bloque                         shift and go to state 110

state 103

    (29) escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 29 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 29 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    PRINT           reduce using rule 29 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 29 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 29 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)


state 104

    (32) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 32 (multiples_print -> COMA print_expresion .)


state 105

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while . PARDER DO bloque llenar_cuadruplo_while

    PARDER          shift and go to state 111


state 106

    (47) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    IGIG            reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    MAYIG           reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    MENIG           reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 47 (exp_operacion -> MAS termino exp_operacion .)


state 107

    (48) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    IGIG            reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    MAYIG           reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    MENIG           reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 48 (exp_operacion -> MENOS termino exp_operacion .)


state 108

    (51) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    IGIG            reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    MAYIG           reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    MENIG           reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 51 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 51 (termino_operador -> POR factor termino_operador .)


state 109

    (52) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    IGIG            reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    MAYIG           reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    MENIG           reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 52 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 52 (termino_operador -> DIV factor termino_operador .)


state 110

    (34) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_if PUNCOM
    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (66) verificar_bloque_if -> .

    ELSE            shift and go to state 113
    PUNCOM          reduce using rule 66 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 112

state 111

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER . DO bloque llenar_cuadruplo_while

    DO              shift and go to state 114


state 112

    (34) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 115


state 113

    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE . verificar_bloque_else bloque verificar_bloque_if PUNCOM
    (67) verificar_bloque_else -> .

    LLAVIZQ         reduce using rule 67 (verificar_bloque_else -> .)

    verificar_bloque_else          shift and go to state 116

state 114

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO . bloque llenar_cuadruplo_while
    (21) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 24

    bloque                         shift and go to state 117

state 115

    (34) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 34 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 34 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    PRINT           reduce using rule 34 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 34 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 34 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)


state 116

    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else . bloque verificar_bloque_if PUNCOM
    (21) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 24

    bloque                         shift and go to state 118

state 117

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque . llenar_cuadruplo_while
    (70) llenar_cuadruplo_while -> .

    ID              reduce using rule 70 (llenar_cuadruplo_while -> .)
    IF              reduce using rule 70 (llenar_cuadruplo_while -> .)
    PRINT           reduce using rule 70 (llenar_cuadruplo_while -> .)
    WHILE           reduce using rule 70 (llenar_cuadruplo_while -> .)
    LLAVDER         reduce using rule 70 (llenar_cuadruplo_while -> .)

    llenar_cuadruplo_while         shift and go to state 119

state 118

    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque . verificar_bloque_if PUNCOM
    (66) verificar_bloque_if -> .

    PUNCOM          reduce using rule 66 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 120

state 119

    (36) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .

    ID              reduce using rule 36 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    IF              reduce using rule 36 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    PRINT           reduce using rule 36 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    WHILE           reduce using rule 36 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    LLAVDER         reduce using rule 36 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)


state 120

    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 121


state 121

    (35) condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 35 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 35 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .)
    PRINT           reduce using rule 35 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 35 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 35 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque ELSE verificar_bloque_else bloque verificar_bloque_if PUNCOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 39 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 39 resolved as shift
WARNING: shift/reduce conflict for MAS in state 40 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 40 resolved as shift
WARNING: shift/reduce conflict for MAS in state 41 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 41 resolved as shift
WARNING: shift/reduce conflict for MAS in state 48 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 48 resolved as shift
WARNING: shift/reduce conflict for MAS in state 61 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 61 resolved as shift
WARNING: shift/reduce conflict for MAS in state 63 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 63 resolved as shift
WARNING: shift/reduce conflict for MAS in state 64 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 64 resolved as shift
WARNING: shift/reduce conflict for MAS in state 65 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 65 resolved as shift
WARNING: shift/reduce conflict for MAS in state 66 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 66 resolved as shift
WARNING: shift/reduce conflict for MAS in state 67 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 67 resolved as shift
WARNING: shift/reduce conflict for MAS in state 68 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 68 resolved as shift
WARNING: shift/reduce conflict for MAS in state 69 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 69 resolved as shift
WARNING: shift/reduce conflict for MAS in state 70 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 70 resolved as shift
WARNING: shift/reduce conflict for MAS in state 72 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 72 resolved as shift
WARNING: shift/reduce conflict for MAS in state 73 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 73 resolved as shift
WARNING: shift/reduce conflict for MAS in state 76 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 76 resolved as shift
WARNING: shift/reduce conflict for MAS in state 77 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 77 resolved as shift
WARNING: shift/reduce conflict for MAS in state 85 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
