Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARR
    CORCHDER
    CORCHIZQ
    FOR
    MOD
    TO

Grammar

Rule 0     S' -> program
Rule 1     program -> goto_main PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main main
Rule 2     main -> MAIN PARIZQ PARDER bloque
Rule 3     goto_main -> <empty>
Rule 4     aux_goto_main -> <empty>
Rule 5     funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
Rule 6     funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
Rule 7     insert_function_to_dirfunc -> <empty>
Rule 8     save_params -> <empty>
Rule 9     vars_local -> VAR vars
Rule 10    bloque_func -> start_cuad bloque
Rule 11    start_cuad -> <empty>
Rule 12    end_function -> <empty>
Rule 13    param -> TIPO ID COMA param
Rule 14    param -> TIPO ID
Rule 15    param -> empty
Rule 16    acum_func -> funcion acum_func
Rule 17    acum_func -> empty
Rule 18    verificar_nombre_funcion -> <empty>
Rule 19    llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM
Rule 20    argumentos_llamada -> argumentos_llamada COMA expresion
Rule 21    argumentos_llamada -> expresion
Rule 22    argumentos_llamada -> empty
Rule 23    id_lista -> ID COMA id_lista
Rule 24    id_lista -> ID
Rule 25    vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 26    vars -> empty
Rule 27    TIPO -> INT
Rule 28    TIPO -> FLOAT
Rule 29    TIPO -> CHAR
Rule 30    TIPO -> BOOL
Rule 31    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 32    estatuto -> asignacion
Rule 33    estatuto -> condicion
Rule 34    estatuto -> escritura
Rule 35    estatuto -> lectura
Rule 36    estatuto -> while_condicion
Rule 37    estatuto -> llamada_funcion
Rule 38    multiples_estatutos -> estatuto multiples_estatutos
Rule 39    multiples_estatutos -> empty
Rule 40    asignacion -> ID IGUAL expresion PUNCOM
Rule 41    lectura -> READ PARIZQ ID PARDER PUNCOM
Rule 42    escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM
Rule 43    print_expresion -> expresion multiples_print
Rule 44    print_expresion -> CTESTRING multiples_print
Rule 45    multiples_print -> COMA print_expresion
Rule 46    multiples_print -> empty
Rule 47    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
Rule 48    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
Rule 49    while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
Rule 50    expresion -> expresion AND expresion
Rule 51    expresion -> expresion OR expresion
Rule 52    expresion -> exp
Rule 53    expresion -> exp MAYOR exp
Rule 54    expresion -> exp MENOR exp
Rule 55    expresion -> exp DIFF exp
Rule 56    expresion -> exp IGIG exp
Rule 57    expresion -> exp MAYIG exp
Rule 58    expresion -> exp MENIG exp
Rule 59    exp -> termino exp_operacion
Rule 60    exp_operacion -> MAS termino exp_operacion
Rule 61    exp_operacion -> MENOS termino exp_operacion
Rule 62    exp_operacion -> empty
Rule 63    termino -> factor termino_operador
Rule 64    termino_operador -> POR factor termino_operador
Rule 65    termino_operador -> DIV factor termino_operador
Rule 66    termino_operador -> empty
Rule 67    factor -> PARIZQ expresion PARDER
Rule 68    factor -> MAS var_cte
Rule 69    factor -> MENOS var_cte
Rule 70    factor -> var_cte
Rule 71    factor -> empty
Rule 72    var_cte -> ID
Rule 73    var_cte -> CTEI
Rule 74    var_cte -> CTEF
Rule 75    var_cte -> CTEC
Rule 76    var_cte -> CTEB
Rule 77    empty -> <empty>
Rule 78    verificar_if -> <empty>
Rule 79    verificar_bloque_if -> <empty>
Rule 80    verificar_bloque_else -> <empty>
Rule 81    save_position_while -> <empty>
Rule 82    check_while_exp -> <empty>
Rule 83    fill_jump_while -> <empty>

Terminals, with rules where they appear

AND                  : 50
ARR                  : 
BOOL                 : 30
CHAR                 : 29
COMA                 : 13 20 23 45
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 76
CTEC                 : 75
CTEF                 : 74
CTEI                 : 73
CTESTRING            : 44
DIFF                 : 55
DIV                  : 65
DO                   : 49
DOSPUN               : 25
ELSE                 : 48
FLOAT                : 28
FOR                  : 
FUNC                 : 5 6
ID                   : 1 5 6 13 14 19 23 24 40 41 72
IF                   : 47 48
IGIG                 : 56
IGUAL                : 40
INT                  : 27
LLAVDER              : 31
LLAVIZQ              : 31
MAIN                 : 2
MAS                  : 60 68
MAYIG                : 57
MAYOR                : 53
MENIG                : 58
MENOR                : 54
MENOS                : 61 69
MOD                  : 
OR                   : 51
PARDER               : 2 5 6 19 41 42 47 48 49 67
PARIZQ               : 2 5 6 19 41 42 47 48 49 67
POR                  : 64
PROGRAM              : 1
PUNCOM               : 1 5 6 19 25 40 41 42 47 48
READ                 : 41
RETURN               : 5 6
TO                   : 
VAR                  : 1 9
VOID                 : 6
WHILE                : 49
WRITE                : 42
error                : 

Nonterminals, with rules where they appear

TIPO                 : 5 13 14 25
acum_func            : 1 16
argumentos_llamada   : 19 20
asignacion           : 32
aux_goto_main        : 1
bloque               : 2 10 47 48 48 49
bloque_func          : 5 6
check_while_exp      : 49
condicion            : 33
empty                : 15 17 22 26 39 46 62 66 71
end_function         : 5 6
escritura            : 34
estatuto             : 38
exp                  : 5 52 53 53 54 54 55 55 56 56 57 57 58 58
exp_operacion        : 59 60 61
expresion            : 20 21 40 43 47 48 49 50 50 51 51 67
factor               : 63 64 65
fill_jump_while      : 49
funcion              : 16
goto_main            : 1
id_lista             : 23 25
insert_function_to_dirfunc : 5 6
lectura              : 35
llamada_funcion      : 37
main                 : 1
multiples_estatutos  : 31 38
multiples_print      : 43 44
param                : 5 6 13
print_expresion      : 42 45
program              : 0
save_params          : 5 6
save_position_while  : 49
start_cuad           : 10
termino              : 59 60 61
termino_operador     : 63 64 65
var_cte              : 68 69 70
vars                 : 1 9 25
vars_local           : 5 6
verificar_bloque_else : 48
verificar_bloque_if  : 47 48
verificar_if         : 47 48
verificar_nombre_funcion : 19
while_condicion      : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . goto_main PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main main
    (3) goto_main -> .

    PROGRAM         reduce using rule 3 (goto_main -> .)

    program                        shift and go to state 1
    goto_main                      shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> goto_main . PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main main

    PROGRAM         shift and go to state 3


state 3

    (1) program -> goto_main PROGRAM . ID PUNCOM VAR vars acum_func aux_goto_main main

    ID              shift and go to state 4


state 4

    (1) program -> goto_main PROGRAM ID . PUNCOM VAR vars acum_func aux_goto_main main

    PUNCOM          shift and go to state 5


state 5

    (1) program -> goto_main PROGRAM ID PUNCOM . VAR vars acum_func aux_goto_main main

    VAR             shift and go to state 6


state 6

    (1) program -> goto_main PROGRAM ID PUNCOM VAR . vars acum_func aux_goto_main main
    (25) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (26) vars -> . empty
    (23) id_lista -> . ID COMA id_lista
    (24) id_lista -> . ID
    (77) empty -> .

    ID              shift and go to state 7
    FUNC            reduce using rule 77 (empty -> .)
    MAIN            reduce using rule 77 (empty -> .)

    vars                           shift and go to state 8
    id_lista                       shift and go to state 9
    empty                          shift and go to state 10

state 7

    (23) id_lista -> ID . COMA id_lista
    (24) id_lista -> ID .

    COMA            shift and go to state 11
    DOSPUN          reduce using rule 24 (id_lista -> ID .)


state 8

    (1) program -> goto_main PROGRAM ID PUNCOM VAR vars . acum_func aux_goto_main main
    (16) acum_func -> . funcion acum_func
    (17) acum_func -> . empty
    (5) funcion -> . FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (6) funcion -> . FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (77) empty -> .

    FUNC            shift and go to state 15
    MAIN            reduce using rule 77 (empty -> .)

    acum_func                      shift and go to state 12
    funcion                        shift and go to state 13
    empty                          shift and go to state 14

state 9

    (25) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 16


state 10

    (26) vars -> empty .

    FUNC            reduce using rule 26 (vars -> empty .)
    MAIN            reduce using rule 26 (vars -> empty .)
    LLAVIZQ         reduce using rule 26 (vars -> empty .)


state 11

    (23) id_lista -> ID COMA . id_lista
    (23) id_lista -> . ID COMA id_lista
    (24) id_lista -> . ID

    ID              shift and go to state 7

    id_lista                       shift and go to state 17

state 12

    (1) program -> goto_main PROGRAM ID PUNCOM VAR vars acum_func . aux_goto_main main
    (4) aux_goto_main -> .

    MAIN            reduce using rule 4 (aux_goto_main -> .)

    aux_goto_main                  shift and go to state 18

state 13

    (16) acum_func -> funcion . acum_func
    (16) acum_func -> . funcion acum_func
    (17) acum_func -> . empty
    (5) funcion -> . FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (6) funcion -> . FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (77) empty -> .

    FUNC            shift and go to state 15
    MAIN            reduce using rule 77 (empty -> .)

    funcion                        shift and go to state 13
    acum_func                      shift and go to state 19
    empty                          shift and go to state 14

state 14

    (17) acum_func -> empty .

    MAIN            reduce using rule 17 (acum_func -> empty .)


state 15

    (5) funcion -> FUNC . TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (6) funcion -> FUNC . VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (27) TIPO -> . INT
    (28) TIPO -> . FLOAT
    (29) TIPO -> . CHAR
    (30) TIPO -> . BOOL

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 20

state 16

    (25) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (27) TIPO -> . INT
    (28) TIPO -> . FLOAT
    (29) TIPO -> . CHAR
    (30) TIPO -> . BOOL

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 26

state 17

    (23) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 23 (id_lista -> ID COMA id_lista .)


state 18

    (1) program -> goto_main PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main . main
    (2) main -> . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 28

    main                           shift and go to state 27

state 19

    (16) acum_func -> funcion acum_func .

    MAIN            reduce using rule 16 (acum_func -> funcion acum_func .)


state 20

    (5) funcion -> FUNC TIPO . ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    ID              shift and go to state 29


state 21

    (6) funcion -> FUNC VOID . ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    ID              shift and go to state 30


state 22

    (27) TIPO -> INT .

    ID              reduce using rule 27 (TIPO -> INT .)
    PUNCOM          reduce using rule 27 (TIPO -> INT .)


state 23

    (28) TIPO -> FLOAT .

    ID              reduce using rule 28 (TIPO -> FLOAT .)
    PUNCOM          reduce using rule 28 (TIPO -> FLOAT .)


state 24

    (29) TIPO -> CHAR .

    ID              reduce using rule 29 (TIPO -> CHAR .)
    PUNCOM          reduce using rule 29 (TIPO -> CHAR .)


state 25

    (30) TIPO -> BOOL .

    ID              reduce using rule 30 (TIPO -> BOOL .)
    PUNCOM          reduce using rule 30 (TIPO -> BOOL .)


state 26

    (25) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 31


state 27

    (1) program -> goto_main PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main main .

    $end            reduce using rule 1 (program -> goto_main PROGRAM ID PUNCOM VAR vars acum_func aux_goto_main main .)


state 28

    (2) main -> MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 32


state 29

    (5) funcion -> FUNC TIPO ID . insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (7) insert_function_to_dirfunc -> .

    PARIZQ          reduce using rule 7 (insert_function_to_dirfunc -> .)

    insert_function_to_dirfunc     shift and go to state 33

state 30

    (6) funcion -> FUNC VOID ID . insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (7) insert_function_to_dirfunc -> .

    PARIZQ          reduce using rule 7 (insert_function_to_dirfunc -> .)

    insert_function_to_dirfunc     shift and go to state 34

state 31

    (25) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (25) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (26) vars -> . empty
    (23) id_lista -> . ID COMA id_lista
    (24) id_lista -> . ID
    (77) empty -> .

    ID              shift and go to state 7
    FUNC            reduce using rule 77 (empty -> .)
    MAIN            reduce using rule 77 (empty -> .)
    LLAVIZQ         reduce using rule 77 (empty -> .)

    id_lista                       shift and go to state 9
    vars                           shift and go to state 35
    empty                          shift and go to state 10

state 32

    (2) main -> MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 36


state 33

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc . PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    PARIZQ          shift and go to state 37


state 34

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc . PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    PARIZQ          shift and go to state 38


state 35

    (25) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    FUNC            reduce using rule 25 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    MAIN            reduce using rule 25 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    LLAVIZQ         reduce using rule 25 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 36

    (2) main -> MAIN PARIZQ PARDER . bloque
    (31) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 40

    bloque                         shift and go to state 39

state 37

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ . param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (13) param -> . TIPO ID COMA param
    (14) param -> . TIPO ID
    (15) param -> . empty
    (27) TIPO -> . INT
    (28) TIPO -> . FLOAT
    (29) TIPO -> . CHAR
    (30) TIPO -> . BOOL
    (77) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 77 (empty -> .)

    TIPO                           shift and go to state 41
    param                          shift and go to state 42
    empty                          shift and go to state 43

state 38

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ . param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (13) param -> . TIPO ID COMA param
    (14) param -> . TIPO ID
    (15) param -> . empty
    (27) TIPO -> . INT
    (28) TIPO -> . FLOAT
    (29) TIPO -> . CHAR
    (30) TIPO -> . BOOL
    (77) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 77 (empty -> .)

    param                          shift and go to state 44
    TIPO                           shift and go to state 41
    empty                          shift and go to state 43

state 39

    (2) main -> MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 2 (main -> MAIN PARIZQ PARDER bloque .)


state 40

    (31) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (38) multiples_estatutos -> . estatuto multiples_estatutos
    (39) multiples_estatutos -> . empty
    (32) estatuto -> . asignacion
    (33) estatuto -> . condicion
    (34) estatuto -> . escritura
    (35) estatuto -> . lectura
    (36) estatuto -> . while_condicion
    (37) estatuto -> . llamada_funcion
    (77) empty -> .
    (40) asignacion -> . ID IGUAL expresion PUNCOM
    (47) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (42) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (41) lectura -> . READ PARIZQ ID PARDER PUNCOM
    (49) while_condicion -> . WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (19) llamada_funcion -> . ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM

    LLAVDER         reduce using rule 77 (empty -> .)
    ID              shift and go to state 54
    IF              shift and go to state 55
    WRITE           shift and go to state 56
    READ            shift and go to state 57
    WHILE           shift and go to state 58

    multiples_estatutos            shift and go to state 45
    estatuto                       shift and go to state 46
    empty                          shift and go to state 47
    asignacion                     shift and go to state 48
    condicion                      shift and go to state 49
    escritura                      shift and go to state 50
    lectura                        shift and go to state 51
    while_condicion                shift and go to state 52
    llamada_funcion                shift and go to state 53

state 41

    (13) param -> TIPO . ID COMA param
    (14) param -> TIPO . ID

    ID              shift and go to state 59


state 42

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param . PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    PARDER          shift and go to state 60


state 43

    (15) param -> empty .

    PARDER          reduce using rule 15 (param -> empty .)


state 44

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param . PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    PARDER          shift and go to state 61


state 45

    (31) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 62


state 46

    (38) multiples_estatutos -> estatuto . multiples_estatutos
    (38) multiples_estatutos -> . estatuto multiples_estatutos
    (39) multiples_estatutos -> . empty
    (32) estatuto -> . asignacion
    (33) estatuto -> . condicion
    (34) estatuto -> . escritura
    (35) estatuto -> . lectura
    (36) estatuto -> . while_condicion
    (37) estatuto -> . llamada_funcion
    (77) empty -> .
    (40) asignacion -> . ID IGUAL expresion PUNCOM
    (47) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (42) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (41) lectura -> . READ PARIZQ ID PARDER PUNCOM
    (49) while_condicion -> . WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (19) llamada_funcion -> . ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM

    LLAVDER         reduce using rule 77 (empty -> .)
    ID              shift and go to state 54
    IF              shift and go to state 55
    WRITE           shift and go to state 56
    READ            shift and go to state 57
    WHILE           shift and go to state 58

    estatuto                       shift and go to state 46
    multiples_estatutos            shift and go to state 63
    empty                          shift and go to state 47
    asignacion                     shift and go to state 48
    condicion                      shift and go to state 49
    escritura                      shift and go to state 50
    lectura                        shift and go to state 51
    while_condicion                shift and go to state 52
    llamada_funcion                shift and go to state 53

state 47

    (39) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 39 (multiples_estatutos -> empty .)


state 48

    (32) estatuto -> asignacion .

    ID              reduce using rule 32 (estatuto -> asignacion .)
    IF              reduce using rule 32 (estatuto -> asignacion .)
    WRITE           reduce using rule 32 (estatuto -> asignacion .)
    READ            reduce using rule 32 (estatuto -> asignacion .)
    WHILE           reduce using rule 32 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 32 (estatuto -> asignacion .)


state 49

    (33) estatuto -> condicion .

    ID              reduce using rule 33 (estatuto -> condicion .)
    IF              reduce using rule 33 (estatuto -> condicion .)
    WRITE           reduce using rule 33 (estatuto -> condicion .)
    READ            reduce using rule 33 (estatuto -> condicion .)
    WHILE           reduce using rule 33 (estatuto -> condicion .)
    LLAVDER         reduce using rule 33 (estatuto -> condicion .)


state 50

    (34) estatuto -> escritura .

    ID              reduce using rule 34 (estatuto -> escritura .)
    IF              reduce using rule 34 (estatuto -> escritura .)
    WRITE           reduce using rule 34 (estatuto -> escritura .)
    READ            reduce using rule 34 (estatuto -> escritura .)
    WHILE           reduce using rule 34 (estatuto -> escritura .)
    LLAVDER         reduce using rule 34 (estatuto -> escritura .)


state 51

    (35) estatuto -> lectura .

    ID              reduce using rule 35 (estatuto -> lectura .)
    IF              reduce using rule 35 (estatuto -> lectura .)
    WRITE           reduce using rule 35 (estatuto -> lectura .)
    READ            reduce using rule 35 (estatuto -> lectura .)
    WHILE           reduce using rule 35 (estatuto -> lectura .)
    LLAVDER         reduce using rule 35 (estatuto -> lectura .)


state 52

    (36) estatuto -> while_condicion .

    ID              reduce using rule 36 (estatuto -> while_condicion .)
    IF              reduce using rule 36 (estatuto -> while_condicion .)
    WRITE           reduce using rule 36 (estatuto -> while_condicion .)
    READ            reduce using rule 36 (estatuto -> while_condicion .)
    WHILE           reduce using rule 36 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 36 (estatuto -> while_condicion .)


state 53

    (37) estatuto -> llamada_funcion .

    ID              reduce using rule 37 (estatuto -> llamada_funcion .)
    IF              reduce using rule 37 (estatuto -> llamada_funcion .)
    WRITE           reduce using rule 37 (estatuto -> llamada_funcion .)
    READ            reduce using rule 37 (estatuto -> llamada_funcion .)
    WHILE           reduce using rule 37 (estatuto -> llamada_funcion .)
    LLAVDER         reduce using rule 37 (estatuto -> llamada_funcion .)


state 54

    (40) asignacion -> ID . IGUAL expresion PUNCOM
    (19) llamada_funcion -> ID . verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM
    (18) verificar_nombre_funcion -> .

    IGUAL           shift and go to state 64
    PARIZQ          reduce using rule 18 (verificar_nombre_funcion -> .)

    verificar_nombre_funcion       shift and go to state 65

state 55

    (47) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM

    PARIZQ          shift and go to state 66


state 56

    (42) escritura -> WRITE . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 67


state 57

    (41) lectura -> READ . PARIZQ ID PARDER PUNCOM

    PARIZQ          shift and go to state 68


state 58

    (49) while_condicion -> WHILE . PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while

    PARIZQ          shift and go to state 69


state 59

    (13) param -> TIPO ID . COMA param
    (14) param -> TIPO ID .

    COMA            shift and go to state 70
    PARDER          reduce using rule 14 (param -> TIPO ID .)


state 60

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER . save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (8) save_params -> .

    VAR             reduce using rule 8 (save_params -> .)

    save_params                    shift and go to state 71

state 61

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER . save_params vars_local bloque_func RETURN PUNCOM end_function
    (8) save_params -> .

    VAR             reduce using rule 8 (save_params -> .)

    save_params                    shift and go to state 72

state 62

    (31) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    RETURN          reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WRITE           reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    READ            reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 31 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 63

    (38) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 38 (multiples_estatutos -> estatuto multiples_estatutos .)


state 64

    (40) asignacion -> ID IGUAL . expresion PUNCOM
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 74
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 65

    (19) llamada_funcion -> ID verificar_nombre_funcion . PARIZQ argumentos_llamada PARDER PUNCOM

    PARIZQ          shift and go to state 87


state 66

    (47) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 88
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 67

    (42) escritura -> WRITE PARIZQ . print_expresion PARDER PUNCOM
    (43) print_expresion -> . expresion multiples_print
    (44) print_expresion -> . CTESTRING multiples_print
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 91
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    print_expresion                shift and go to state 89
    expresion                      shift and go to state 90
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 68

    (41) lectura -> READ PARIZQ . ID PARDER PUNCOM

    ID              shift and go to state 92


state 69

    (49) while_condicion -> WHILE PARIZQ . save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (81) save_position_while -> .

    PARIZQ          reduce using rule 81 (save_position_while -> .)
    MAS             reduce using rule 81 (save_position_while -> .)
    MENOS           reduce using rule 81 (save_position_while -> .)
    ID              reduce using rule 81 (save_position_while -> .)
    CTEI            reduce using rule 81 (save_position_while -> .)
    CTEF            reduce using rule 81 (save_position_while -> .)
    CTEC            reduce using rule 81 (save_position_while -> .)
    CTEB            reduce using rule 81 (save_position_while -> .)
    AND             reduce using rule 81 (save_position_while -> .)
    OR              reduce using rule 81 (save_position_while -> .)
    PARDER          reduce using rule 81 (save_position_while -> .)
    MAYOR           reduce using rule 81 (save_position_while -> .)
    MENOR           reduce using rule 81 (save_position_while -> .)
    DIFF            reduce using rule 81 (save_position_while -> .)
    IGIG            reduce using rule 81 (save_position_while -> .)
    MAYIG           reduce using rule 81 (save_position_while -> .)
    MENIG           reduce using rule 81 (save_position_while -> .)
    POR             reduce using rule 81 (save_position_while -> .)
    DIV             reduce using rule 81 (save_position_while -> .)

    save_position_while            shift and go to state 93

state 70

    (13) param -> TIPO ID COMA . param
    (13) param -> . TIPO ID COMA param
    (14) param -> . TIPO ID
    (15) param -> . empty
    (27) TIPO -> . INT
    (28) TIPO -> . FLOAT
    (29) TIPO -> . CHAR
    (30) TIPO -> . BOOL
    (77) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 77 (empty -> .)

    TIPO                           shift and go to state 41
    param                          shift and go to state 94
    empty                          shift and go to state 43

state 71

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params . vars_local bloque_func RETURN exp PUNCOM end_function
    (9) vars_local -> . VAR vars

    VAR             shift and go to state 96

    vars_local                     shift and go to state 95

state 72

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params . vars_local bloque_func RETURN PUNCOM end_function
    (9) vars_local -> . VAR vars

    VAR             shift and go to state 96

    vars_local                     shift and go to state 97

state 73

    (72) var_cte -> ID .

    POR             reduce using rule 72 (var_cte -> ID .)
    DIV             reduce using rule 72 (var_cte -> ID .)
    MAS             reduce using rule 72 (var_cte -> ID .)
    MENOS           reduce using rule 72 (var_cte -> ID .)
    MAYOR           reduce using rule 72 (var_cte -> ID .)
    MENOR           reduce using rule 72 (var_cte -> ID .)
    DIFF            reduce using rule 72 (var_cte -> ID .)
    IGIG            reduce using rule 72 (var_cte -> ID .)
    MAYIG           reduce using rule 72 (var_cte -> ID .)
    MENIG           reduce using rule 72 (var_cte -> ID .)
    PUNCOM          reduce using rule 72 (var_cte -> ID .)
    AND             reduce using rule 72 (var_cte -> ID .)
    OR              reduce using rule 72 (var_cte -> ID .)
    PARDER          reduce using rule 72 (var_cte -> ID .)
    COMA            reduce using rule 72 (var_cte -> ID .)


state 74

    (40) asignacion -> ID IGUAL expresion . PUNCOM
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100


state 75

    (52) expresion -> exp .
    (53) expresion -> exp . MAYOR exp
    (54) expresion -> exp . MENOR exp
    (55) expresion -> exp . DIFF exp
    (56) expresion -> exp . IGIG exp
    (57) expresion -> exp . MAYIG exp
    (58) expresion -> exp . MENIG exp

    PUNCOM          reduce using rule 52 (expresion -> exp .)
    AND             reduce using rule 52 (expresion -> exp .)
    OR              reduce using rule 52 (expresion -> exp .)
    PARDER          reduce using rule 52 (expresion -> exp .)
    COMA            reduce using rule 52 (expresion -> exp .)
    MAYOR           shift and go to state 101
    MENOR           shift and go to state 102
    DIFF            shift and go to state 103
    IGIG            shift and go to state 104
    MAYIG           shift and go to state 105
    MENIG           shift and go to state 106


state 76

    (59) exp -> termino . exp_operacion
    (60) exp_operacion -> . MAS termino exp_operacion
    (61) exp_operacion -> . MENOS termino exp_operacion
    (62) exp_operacion -> . empty
    (77) empty -> .

    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    exp_operacion                  shift and go to state 107
    empty                          shift and go to state 110

state 77

    (63) termino -> factor . termino_operador
    (64) termino_operador -> . POR factor termino_operador
    (65) termino_operador -> . DIV factor termino_operador
    (66) termino_operador -> . empty
    (77) empty -> .

    POR             shift and go to state 112
    DIV             shift and go to state 113
    MAS             reduce using rule 77 (empty -> .)
    MENOS           reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    termino_operador               shift and go to state 111
    empty                          shift and go to state 114

state 78

    (67) factor -> PARIZQ . expresion PARDER
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 115
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 79

    (68) factor -> MAS . var_cte
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB

    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86

    var_cte                        shift and go to state 116

state 80

    (70) factor -> var_cte .

    POR             reduce using rule 70 (factor -> var_cte .)
    DIV             reduce using rule 70 (factor -> var_cte .)
    MAS             reduce using rule 70 (factor -> var_cte .)
    MENOS           reduce using rule 70 (factor -> var_cte .)
    MAYOR           reduce using rule 70 (factor -> var_cte .)
    MENOR           reduce using rule 70 (factor -> var_cte .)
    DIFF            reduce using rule 70 (factor -> var_cte .)
    IGIG            reduce using rule 70 (factor -> var_cte .)
    MAYIG           reduce using rule 70 (factor -> var_cte .)
    MENIG           reduce using rule 70 (factor -> var_cte .)
    PUNCOM          reduce using rule 70 (factor -> var_cte .)
    AND             reduce using rule 70 (factor -> var_cte .)
    OR              reduce using rule 70 (factor -> var_cte .)
    PARDER          reduce using rule 70 (factor -> var_cte .)
    COMA            reduce using rule 70 (factor -> var_cte .)


state 81

    (69) factor -> MENOS . var_cte
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB

    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86

    var_cte                        shift and go to state 117

state 82

    (71) factor -> empty .

    POR             reduce using rule 71 (factor -> empty .)
    DIV             reduce using rule 71 (factor -> empty .)
    MAS             reduce using rule 71 (factor -> empty .)
    MENOS           reduce using rule 71 (factor -> empty .)
    MAYOR           reduce using rule 71 (factor -> empty .)
    MENOR           reduce using rule 71 (factor -> empty .)
    DIFF            reduce using rule 71 (factor -> empty .)
    IGIG            reduce using rule 71 (factor -> empty .)
    MAYIG           reduce using rule 71 (factor -> empty .)
    MENIG           reduce using rule 71 (factor -> empty .)
    PUNCOM          reduce using rule 71 (factor -> empty .)
    AND             reduce using rule 71 (factor -> empty .)
    OR              reduce using rule 71 (factor -> empty .)
    PARDER          reduce using rule 71 (factor -> empty .)
    COMA            reduce using rule 71 (factor -> empty .)


state 83

    (73) var_cte -> CTEI .

    POR             reduce using rule 73 (var_cte -> CTEI .)
    DIV             reduce using rule 73 (var_cte -> CTEI .)
    MAS             reduce using rule 73 (var_cte -> CTEI .)
    MENOS           reduce using rule 73 (var_cte -> CTEI .)
    MAYOR           reduce using rule 73 (var_cte -> CTEI .)
    MENOR           reduce using rule 73 (var_cte -> CTEI .)
    DIFF            reduce using rule 73 (var_cte -> CTEI .)
    IGIG            reduce using rule 73 (var_cte -> CTEI .)
    MAYIG           reduce using rule 73 (var_cte -> CTEI .)
    MENIG           reduce using rule 73 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 73 (var_cte -> CTEI .)
    AND             reduce using rule 73 (var_cte -> CTEI .)
    OR              reduce using rule 73 (var_cte -> CTEI .)
    PARDER          reduce using rule 73 (var_cte -> CTEI .)
    COMA            reduce using rule 73 (var_cte -> CTEI .)


state 84

    (74) var_cte -> CTEF .

    POR             reduce using rule 74 (var_cte -> CTEF .)
    DIV             reduce using rule 74 (var_cte -> CTEF .)
    MAS             reduce using rule 74 (var_cte -> CTEF .)
    MENOS           reduce using rule 74 (var_cte -> CTEF .)
    MAYOR           reduce using rule 74 (var_cte -> CTEF .)
    MENOR           reduce using rule 74 (var_cte -> CTEF .)
    DIFF            reduce using rule 74 (var_cte -> CTEF .)
    IGIG            reduce using rule 74 (var_cte -> CTEF .)
    MAYIG           reduce using rule 74 (var_cte -> CTEF .)
    MENIG           reduce using rule 74 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 74 (var_cte -> CTEF .)
    AND             reduce using rule 74 (var_cte -> CTEF .)
    OR              reduce using rule 74 (var_cte -> CTEF .)
    PARDER          reduce using rule 74 (var_cte -> CTEF .)
    COMA            reduce using rule 74 (var_cte -> CTEF .)


state 85

    (75) var_cte -> CTEC .

    POR             reduce using rule 75 (var_cte -> CTEC .)
    DIV             reduce using rule 75 (var_cte -> CTEC .)
    MAS             reduce using rule 75 (var_cte -> CTEC .)
    MENOS           reduce using rule 75 (var_cte -> CTEC .)
    MAYOR           reduce using rule 75 (var_cte -> CTEC .)
    MENOR           reduce using rule 75 (var_cte -> CTEC .)
    DIFF            reduce using rule 75 (var_cte -> CTEC .)
    IGIG            reduce using rule 75 (var_cte -> CTEC .)
    MAYIG           reduce using rule 75 (var_cte -> CTEC .)
    MENIG           reduce using rule 75 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 75 (var_cte -> CTEC .)
    AND             reduce using rule 75 (var_cte -> CTEC .)
    OR              reduce using rule 75 (var_cte -> CTEC .)
    PARDER          reduce using rule 75 (var_cte -> CTEC .)
    COMA            reduce using rule 75 (var_cte -> CTEC .)


state 86

    (76) var_cte -> CTEB .

    POR             reduce using rule 76 (var_cte -> CTEB .)
    DIV             reduce using rule 76 (var_cte -> CTEB .)
    MAS             reduce using rule 76 (var_cte -> CTEB .)
    MENOS           reduce using rule 76 (var_cte -> CTEB .)
    MAYOR           reduce using rule 76 (var_cte -> CTEB .)
    MENOR           reduce using rule 76 (var_cte -> CTEB .)
    DIFF            reduce using rule 76 (var_cte -> CTEB .)
    IGIG            reduce using rule 76 (var_cte -> CTEB .)
    MAYIG           reduce using rule 76 (var_cte -> CTEB .)
    MENIG           reduce using rule 76 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 76 (var_cte -> CTEB .)
    AND             reduce using rule 76 (var_cte -> CTEB .)
    OR              reduce using rule 76 (var_cte -> CTEB .)
    PARDER          reduce using rule 76 (var_cte -> CTEB .)
    COMA            reduce using rule 76 (var_cte -> CTEB .)


state 87

    (19) llamada_funcion -> ID verificar_nombre_funcion PARIZQ . argumentos_llamada PARDER PUNCOM
    (20) argumentos_llamada -> . argumentos_llamada COMA expresion
    (21) argumentos_llamada -> . expresion
    (22) argumentos_llamada -> . empty
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (77) empty -> .
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    argumentos_llamada             shift and go to state 118
    expresion                      shift and go to state 119
    empty                          shift and go to state 120
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80

state 88

    (47) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

    PARDER          shift and go to state 121
    AND             shift and go to state 99
    OR              shift and go to state 100


state 89

    (42) escritura -> WRITE PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 122


state 90

    (43) print_expresion -> expresion . multiples_print
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion
    (45) multiples_print -> . COMA print_expresion
    (46) multiples_print -> . empty
    (77) empty -> .

    AND             shift and go to state 99
    OR              shift and go to state 100
    COMA            shift and go to state 124
    PARDER          reduce using rule 77 (empty -> .)

    multiples_print                shift and go to state 123
    empty                          shift and go to state 125

state 91

    (44) print_expresion -> CTESTRING . multiples_print
    (45) multiples_print -> . COMA print_expresion
    (46) multiples_print -> . empty
    (77) empty -> .

    COMA            shift and go to state 124
    PARDER          reduce using rule 77 (empty -> .)

    multiples_print                shift and go to state 126
    empty                          shift and go to state 125

state 92

    (41) lectura -> READ PARIZQ ID . PARDER PUNCOM

    PARDER          shift and go to state 127


state 93

    (49) while_condicion -> WHILE PARIZQ save_position_while . expresion check_while_exp PARDER DO bloque fill_jump_while
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 128
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 94

    (13) param -> TIPO ID COMA param .

    PARDER          reduce using rule 13 (param -> TIPO ID COMA param .)


state 95

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local . bloque_func RETURN exp PUNCOM end_function
    (10) bloque_func -> . start_cuad bloque
    (11) start_cuad -> .

    LLAVIZQ         reduce using rule 11 (start_cuad -> .)

    bloque_func                    shift and go to state 129
    start_cuad                     shift and go to state 130

state 96

    (9) vars_local -> VAR . vars
    (25) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (26) vars -> . empty
    (23) id_lista -> . ID COMA id_lista
    (24) id_lista -> . ID
    (77) empty -> .

    ID              shift and go to state 7
    LLAVIZQ         reduce using rule 77 (empty -> .)

    vars                           shift and go to state 131
    id_lista                       shift and go to state 9
    empty                          shift and go to state 10

state 97

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local . bloque_func RETURN PUNCOM end_function
    (10) bloque_func -> . start_cuad bloque
    (11) start_cuad -> .

    LLAVIZQ         reduce using rule 11 (start_cuad -> .)

    bloque_func                    shift and go to state 132
    start_cuad                     shift and go to state 130

state 98

    (40) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)
    WRITE           reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)
    READ            reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 40 (asignacion -> ID IGUAL expresion PUNCOM .)


state 99

    (50) expresion -> expresion AND . expresion
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 133
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 100

    (51) expresion -> expresion OR . expresion
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 134
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 101

    (53) expresion -> exp MAYOR . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 135
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 102

    (54) expresion -> exp MENOR . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 136
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 103

    (55) expresion -> exp DIFF . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 137
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 104

    (56) expresion -> exp IGIG . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 138
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 105

    (57) expresion -> exp MAYIG . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 139
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 106

    (58) expresion -> exp MENIG . exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 140
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 107

    (59) exp -> termino exp_operacion .

    MAYOR           reduce using rule 59 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 59 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 59 (exp -> termino exp_operacion .)
    IGIG            reduce using rule 59 (exp -> termino exp_operacion .)
    MAYIG           reduce using rule 59 (exp -> termino exp_operacion .)
    MENIG           reduce using rule 59 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 59 (exp -> termino exp_operacion .)
    AND             reduce using rule 59 (exp -> termino exp_operacion .)
    OR              reduce using rule 59 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 59 (exp -> termino exp_operacion .)
    COMA            reduce using rule 59 (exp -> termino exp_operacion .)


state 108

    (60) exp_operacion -> MAS . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    termino                        shift and go to state 141
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 109

    (61) exp_operacion -> MENOS . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    termino                        shift and go to state 142
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 110

    (62) exp_operacion -> empty .

    MAYOR           reduce using rule 62 (exp_operacion -> empty .)
    MENOR           reduce using rule 62 (exp_operacion -> empty .)
    DIFF            reduce using rule 62 (exp_operacion -> empty .)
    IGIG            reduce using rule 62 (exp_operacion -> empty .)
    MAYIG           reduce using rule 62 (exp_operacion -> empty .)
    MENIG           reduce using rule 62 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 62 (exp_operacion -> empty .)
    AND             reduce using rule 62 (exp_operacion -> empty .)
    OR              reduce using rule 62 (exp_operacion -> empty .)
    PARDER          reduce using rule 62 (exp_operacion -> empty .)
    COMA            reduce using rule 62 (exp_operacion -> empty .)


state 111

    (63) termino -> factor termino_operador .

    MAS             reduce using rule 63 (termino -> factor termino_operador .)
    MENOS           reduce using rule 63 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 63 (termino -> factor termino_operador .)
    MENOR           reduce using rule 63 (termino -> factor termino_operador .)
    DIFF            reduce using rule 63 (termino -> factor termino_operador .)
    IGIG            reduce using rule 63 (termino -> factor termino_operador .)
    MAYIG           reduce using rule 63 (termino -> factor termino_operador .)
    MENIG           reduce using rule 63 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 63 (termino -> factor termino_operador .)
    AND             reduce using rule 63 (termino -> factor termino_operador .)
    OR              reduce using rule 63 (termino -> factor termino_operador .)
    PARDER          reduce using rule 63 (termino -> factor termino_operador .)
    COMA            reduce using rule 63 (termino -> factor termino_operador .)


state 112

    (64) termino_operador -> POR . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    factor                         shift and go to state 143
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 113

    (65) termino_operador -> DIV . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    factor                         shift and go to state 144
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 114

    (66) termino_operador -> empty .

    MAS             reduce using rule 66 (termino_operador -> empty .)
    MENOS           reduce using rule 66 (termino_operador -> empty .)
    MAYOR           reduce using rule 66 (termino_operador -> empty .)
    MENOR           reduce using rule 66 (termino_operador -> empty .)
    DIFF            reduce using rule 66 (termino_operador -> empty .)
    IGIG            reduce using rule 66 (termino_operador -> empty .)
    MAYIG           reduce using rule 66 (termino_operador -> empty .)
    MENIG           reduce using rule 66 (termino_operador -> empty .)
    PUNCOM          reduce using rule 66 (termino_operador -> empty .)
    AND             reduce using rule 66 (termino_operador -> empty .)
    OR              reduce using rule 66 (termino_operador -> empty .)
    PARDER          reduce using rule 66 (termino_operador -> empty .)
    COMA            reduce using rule 66 (termino_operador -> empty .)


state 115

    (67) factor -> PARIZQ expresion . PARDER
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

    PARDER          shift and go to state 145
    AND             shift and go to state 99
    OR              shift and go to state 100


state 116

    (68) factor -> MAS var_cte .

    POR             reduce using rule 68 (factor -> MAS var_cte .)
    DIV             reduce using rule 68 (factor -> MAS var_cte .)
    MAS             reduce using rule 68 (factor -> MAS var_cte .)
    MENOS           reduce using rule 68 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 68 (factor -> MAS var_cte .)
    MENOR           reduce using rule 68 (factor -> MAS var_cte .)
    DIFF            reduce using rule 68 (factor -> MAS var_cte .)
    IGIG            reduce using rule 68 (factor -> MAS var_cte .)
    MAYIG           reduce using rule 68 (factor -> MAS var_cte .)
    MENIG           reduce using rule 68 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 68 (factor -> MAS var_cte .)
    AND             reduce using rule 68 (factor -> MAS var_cte .)
    OR              reduce using rule 68 (factor -> MAS var_cte .)
    PARDER          reduce using rule 68 (factor -> MAS var_cte .)
    COMA            reduce using rule 68 (factor -> MAS var_cte .)


state 117

    (69) factor -> MENOS var_cte .

    POR             reduce using rule 69 (factor -> MENOS var_cte .)
    DIV             reduce using rule 69 (factor -> MENOS var_cte .)
    MAS             reduce using rule 69 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 69 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 69 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 69 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 69 (factor -> MENOS var_cte .)
    IGIG            reduce using rule 69 (factor -> MENOS var_cte .)
    MAYIG           reduce using rule 69 (factor -> MENOS var_cte .)
    MENIG           reduce using rule 69 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 69 (factor -> MENOS var_cte .)
    AND             reduce using rule 69 (factor -> MENOS var_cte .)
    OR              reduce using rule 69 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 69 (factor -> MENOS var_cte .)
    COMA            reduce using rule 69 (factor -> MENOS var_cte .)


state 118

    (19) llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada . PARDER PUNCOM
    (20) argumentos_llamada -> argumentos_llamada . COMA expresion

    PARDER          shift and go to state 146
    COMA            shift and go to state 147


state 119

    (21) argumentos_llamada -> expresion .
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

    PARDER          reduce using rule 21 (argumentos_llamada -> expresion .)
    COMA            reduce using rule 21 (argumentos_llamada -> expresion .)
    AND             shift and go to state 99
    OR              shift and go to state 100


state 120

    (22) argumentos_llamada -> empty .
    (71) factor -> empty .

  ! reduce/reduce conflict for PARDER resolved using rule 22 (argumentos_llamada -> empty .)
  ! reduce/reduce conflict for COMA resolved using rule 22 (argumentos_llamada -> empty .)
    PARDER          reduce using rule 22 (argumentos_llamada -> empty .)
    COMA            reduce using rule 22 (argumentos_llamada -> empty .)
    POR             reduce using rule 71 (factor -> empty .)
    DIV             reduce using rule 71 (factor -> empty .)
    MAS             reduce using rule 71 (factor -> empty .)
    MENOS           reduce using rule 71 (factor -> empty .)
    MAYOR           reduce using rule 71 (factor -> empty .)
    MENOR           reduce using rule 71 (factor -> empty .)
    DIFF            reduce using rule 71 (factor -> empty .)
    IGIG            reduce using rule 71 (factor -> empty .)
    MAYIG           reduce using rule 71 (factor -> empty .)
    MENIG           reduce using rule 71 (factor -> empty .)
    AND             reduce using rule 71 (factor -> empty .)
    OR              reduce using rule 71 (factor -> empty .)

  ! PARDER          [ reduce using rule 71 (factor -> empty .) ]
  ! COMA            [ reduce using rule 71 (factor -> empty .) ]


state 121

    (47) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_if PUNCOM
    (48) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (78) verificar_if -> .

    LLAVIZQ         reduce using rule 78 (verificar_if -> .)

    verificar_if                   shift and go to state 148

state 122

    (42) escritura -> WRITE PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 149


state 123

    (43) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 43 (print_expresion -> expresion multiples_print .)


state 124

    (45) multiples_print -> COMA . print_expresion
    (43) print_expresion -> . expresion multiples_print
    (44) print_expresion -> . CTESTRING multiples_print
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 91
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    print_expresion                shift and go to state 150
    expresion                      shift and go to state 90
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 125

    (46) multiples_print -> empty .

    PARDER          reduce using rule 46 (multiples_print -> empty .)


state 126

    (44) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 44 (print_expresion -> CTESTRING multiples_print .)


state 127

    (41) lectura -> READ PARIZQ ID PARDER . PUNCOM

    PUNCOM          shift and go to state 151


state 128

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion . check_while_exp PARDER DO bloque fill_jump_while
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion
    (82) check_while_exp -> .

    AND             shift and go to state 99
    OR              shift and go to state 100
    PARDER          reduce using rule 82 (check_while_exp -> .)

    check_while_exp                shift and go to state 152

state 129

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func . RETURN exp PUNCOM end_function

    RETURN          shift and go to state 153


state 130

    (10) bloque_func -> start_cuad . bloque
    (31) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 40

    bloque                         shift and go to state 154

state 131

    (9) vars_local -> VAR vars .

    LLAVIZQ         reduce using rule 9 (vars_local -> VAR vars .)


state 132

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func . RETURN PUNCOM end_function

    RETURN          shift and go to state 155


state 133

    (50) expresion -> expresion AND expresion .
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 50 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 50 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 50 (expresion -> expresion AND expresion .)
    AND             shift and go to state 99
    OR              shift and go to state 100

  ! AND             [ reduce using rule 50 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 50 (expresion -> expresion AND expresion .) ]


state 134

    (51) expresion -> expresion OR expresion .
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 51 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 51 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 51 (expresion -> expresion OR expresion .)
    AND             shift and go to state 99
    OR              shift and go to state 100

  ! AND             [ reduce using rule 51 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 51 (expresion -> expresion OR expresion .) ]


state 135

    (53) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 53 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 53 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 53 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 53 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 53 (expresion -> exp MAYOR exp .)


state 136

    (54) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 54 (expresion -> exp MENOR exp .)
    AND             reduce using rule 54 (expresion -> exp MENOR exp .)
    OR              reduce using rule 54 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 54 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 54 (expresion -> exp MENOR exp .)


state 137

    (55) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 55 (expresion -> exp DIFF exp .)
    AND             reduce using rule 55 (expresion -> exp DIFF exp .)
    OR              reduce using rule 55 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 55 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 55 (expresion -> exp DIFF exp .)


state 138

    (56) expresion -> exp IGIG exp .

    PUNCOM          reduce using rule 56 (expresion -> exp IGIG exp .)
    AND             reduce using rule 56 (expresion -> exp IGIG exp .)
    OR              reduce using rule 56 (expresion -> exp IGIG exp .)
    PARDER          reduce using rule 56 (expresion -> exp IGIG exp .)
    COMA            reduce using rule 56 (expresion -> exp IGIG exp .)


state 139

    (57) expresion -> exp MAYIG exp .

    PUNCOM          reduce using rule 57 (expresion -> exp MAYIG exp .)
    AND             reduce using rule 57 (expresion -> exp MAYIG exp .)
    OR              reduce using rule 57 (expresion -> exp MAYIG exp .)
    PARDER          reduce using rule 57 (expresion -> exp MAYIG exp .)
    COMA            reduce using rule 57 (expresion -> exp MAYIG exp .)


state 140

    (58) expresion -> exp MENIG exp .

    PUNCOM          reduce using rule 58 (expresion -> exp MENIG exp .)
    AND             reduce using rule 58 (expresion -> exp MENIG exp .)
    OR              reduce using rule 58 (expresion -> exp MENIG exp .)
    PARDER          reduce using rule 58 (expresion -> exp MENIG exp .)
    COMA            reduce using rule 58 (expresion -> exp MENIG exp .)


state 141

    (60) exp_operacion -> MAS termino . exp_operacion
    (60) exp_operacion -> . MAS termino exp_operacion
    (61) exp_operacion -> . MENOS termino exp_operacion
    (62) exp_operacion -> . empty
    (77) empty -> .

    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    exp_operacion                  shift and go to state 156
    empty                          shift and go to state 110

state 142

    (61) exp_operacion -> MENOS termino . exp_operacion
    (60) exp_operacion -> . MAS termino exp_operacion
    (61) exp_operacion -> . MENOS termino exp_operacion
    (62) exp_operacion -> . empty
    (77) empty -> .

    MAS             shift and go to state 108
    MENOS           shift and go to state 109
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    exp_operacion                  shift and go to state 157
    empty                          shift and go to state 110

state 143

    (64) termino_operador -> POR factor . termino_operador
    (64) termino_operador -> . POR factor termino_operador
    (65) termino_operador -> . DIV factor termino_operador
    (66) termino_operador -> . empty
    (77) empty -> .

    POR             shift and go to state 112
    DIV             shift and go to state 113
    MAS             reduce using rule 77 (empty -> .)
    MENOS           reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    termino_operador               shift and go to state 158
    empty                          shift and go to state 114

state 144

    (65) termino_operador -> DIV factor . termino_operador
    (64) termino_operador -> . POR factor termino_operador
    (65) termino_operador -> . DIV factor termino_operador
    (66) termino_operador -> . empty
    (77) empty -> .

    POR             shift and go to state 112
    DIV             shift and go to state 113
    MAS             reduce using rule 77 (empty -> .)
    MENOS           reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

    termino_operador               shift and go to state 159
    empty                          shift and go to state 114

state 145

    (67) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    IGIG            reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MAYIG           reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    MENIG           reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 67 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 67 (factor -> PARIZQ expresion PARDER .)


state 146

    (19) llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER . PUNCOM

    PUNCOM          shift and go to state 160


state 147

    (20) argumentos_llamada -> argumentos_llamada COMA . expresion
    (50) expresion -> . expresion AND expresion
    (51) expresion -> . expresion OR expresion
    (52) expresion -> . exp
    (53) expresion -> . exp MAYOR exp
    (54) expresion -> . exp MENOR exp
    (55) expresion -> . exp DIFF exp
    (56) expresion -> . exp IGIG exp
    (57) expresion -> . exp MAYIG exp
    (58) expresion -> . exp MENIG exp
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    MAYOR           reduce using rule 77 (empty -> .)
    MENOR           reduce using rule 77 (empty -> .)
    DIFF            reduce using rule 77 (empty -> .)
    IGIG            reduce using rule 77 (empty -> .)
    MAYIG           reduce using rule 77 (empty -> .)
    MENIG           reduce using rule 77 (empty -> .)
    AND             reduce using rule 77 (empty -> .)
    OR              reduce using rule 77 (empty -> .)
    PARDER          reduce using rule 77 (empty -> .)
    COMA            reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    expresion                      shift and go to state 161
    exp                            shift and go to state 75
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 148

    (47) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_if PUNCOM
    (48) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (31) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 40

    bloque                         shift and go to state 162

state 149

    (42) escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WRITE           reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    READ            reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 42 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)


state 150

    (45) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 45 (multiples_print -> COMA print_expresion .)


state 151

    (41) lectura -> READ PARIZQ ID PARDER PUNCOM .

    ID              reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)
    IF              reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)
    WRITE           reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)
    READ            reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)
    WHILE           reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)
    LLAVDER         reduce using rule 41 (lectura -> READ PARIZQ ID PARDER PUNCOM .)


state 152

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp . PARDER DO bloque fill_jump_while

    PARDER          shift and go to state 163


state 153

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN . exp PUNCOM end_function
    (59) exp -> . termino exp_operacion
    (63) termino -> . factor termino_operador
    (67) factor -> . PARIZQ expresion PARDER
    (68) factor -> . MAS var_cte
    (69) factor -> . MENOS var_cte
    (70) factor -> . var_cte
    (71) factor -> . empty
    (72) var_cte -> . ID
    (73) var_cte -> . CTEI
    (74) var_cte -> . CTEF
    (75) var_cte -> . CTEC
    (76) var_cte -> . CTEB
    (77) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 78
    MAS             shift and go to state 79
    MENOS           shift and go to state 81
    ID              shift and go to state 73
    CTEI            shift and go to state 83
    CTEF            shift and go to state 84
    CTEC            shift and go to state 85
    CTEB            shift and go to state 86
    POR             reduce using rule 77 (empty -> .)
    DIV             reduce using rule 77 (empty -> .)
    PUNCOM          reduce using rule 77 (empty -> .)

  ! MAS             [ reduce using rule 77 (empty -> .) ]
  ! MENOS           [ reduce using rule 77 (empty -> .) ]

    exp                            shift and go to state 164
    termino                        shift and go to state 76
    factor                         shift and go to state 77
    var_cte                        shift and go to state 80
    empty                          shift and go to state 82

state 154

    (10) bloque_func -> start_cuad bloque .

    RETURN          reduce using rule 10 (bloque_func -> start_cuad bloque .)


state 155

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN . PUNCOM end_function

    PUNCOM          shift and go to state 165


state 156

    (60) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    IGIG            reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    MAYIG           reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    MENIG           reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 60 (exp_operacion -> MAS termino exp_operacion .)


state 157

    (61) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    IGIG            reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    MAYIG           reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    MENIG           reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 61 (exp_operacion -> MENOS termino exp_operacion .)


state 158

    (64) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    IGIG            reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    MAYIG           reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    MENIG           reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 64 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 64 (termino_operador -> POR factor termino_operador .)


state 159

    (65) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    IGIG            reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    MAYIG           reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    MENIG           reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 65 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 65 (termino_operador -> DIV factor termino_operador .)


state 160

    (19) llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .

    ID              reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)
    IF              reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)
    WRITE           reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)
    READ            reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)
    WHILE           reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)
    LLAVDER         reduce using rule 19 (llamada_funcion -> ID verificar_nombre_funcion PARIZQ argumentos_llamada PARDER PUNCOM .)


state 161

    (20) argumentos_llamada -> argumentos_llamada COMA expresion .
    (50) expresion -> expresion . AND expresion
    (51) expresion -> expresion . OR expresion

    PARDER          reduce using rule 20 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    COMA            reduce using rule 20 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    AND             shift and go to state 99
    OR              shift and go to state 100


state 162

    (47) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_if PUNCOM
    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (79) verificar_bloque_if -> .
    (80) verificar_bloque_else -> .

    PUNCOM          reduce using rule 79 (verificar_bloque_if -> .)
    ELSE            reduce using rule 80 (verificar_bloque_else -> .)

    verificar_bloque_if            shift and go to state 166
    verificar_bloque_else          shift and go to state 167

state 163

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER . DO bloque fill_jump_while

    DO              shift and go to state 168


state 164

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp . PUNCOM end_function

    PUNCOM          shift and go to state 169


state 165

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM . end_function
    (12) end_function -> .

    FUNC            reduce using rule 12 (end_function -> .)
    MAIN            reduce using rule 12 (end_function -> .)

    end_function                   shift and go to state 170

state 166

    (47) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 171


state 167

    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else . ELSE bloque verificar_bloque_if PUNCOM

    ELSE            shift and go to state 172


state 168

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO . bloque fill_jump_while
    (31) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 40

    bloque                         shift and go to state 173

state 169

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM . end_function
    (12) end_function -> .

    FUNC            reduce using rule 12 (end_function -> .)
    MAIN            reduce using rule 12 (end_function -> .)

    end_function                   shift and go to state 174

state 170

    (6) funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .

    FUNC            reduce using rule 6 (funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .)
    MAIN            reduce using rule 6 (funcion -> FUNC VOID ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .)


state 171

    (47) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    READ            reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 47 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)


state 172

    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE . bloque verificar_bloque_if PUNCOM
    (31) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 40

    bloque                         shift and go to state 175

state 173

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque . fill_jump_while
    (83) fill_jump_while -> .

    ID              reduce using rule 83 (fill_jump_while -> .)
    IF              reduce using rule 83 (fill_jump_while -> .)
    WRITE           reduce using rule 83 (fill_jump_while -> .)
    READ            reduce using rule 83 (fill_jump_while -> .)
    WHILE           reduce using rule 83 (fill_jump_while -> .)
    LLAVDER         reduce using rule 83 (fill_jump_while -> .)

    fill_jump_while                shift and go to state 176

state 174

    (5) funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .

    FUNC            reduce using rule 5 (funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .)
    MAIN            reduce using rule 5 (funcion -> FUNC TIPO ID insert_function_to_dirfunc PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .)


state 175

    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque . verificar_bloque_if PUNCOM
    (79) verificar_bloque_if -> .

    PUNCOM          reduce using rule 79 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 177

state 176

    (49) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .

    ID              reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    IF              reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    WRITE           reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    READ            reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    WHILE           reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    LLAVDER         reduce using rule 49 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)


state 177

    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 178


state 178

    (48) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    READ            reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 48 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 64 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 64 resolved as shift
WARNING: shift/reduce conflict for MAS in state 66 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 66 resolved as shift
WARNING: shift/reduce conflict for MAS in state 67 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 67 resolved as shift
WARNING: shift/reduce conflict for MAS in state 78 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 78 resolved as shift
WARNING: shift/reduce conflict for MAS in state 87 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 87 resolved as shift
WARNING: shift/reduce conflict for MAS in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 93 resolved as shift
WARNING: shift/reduce conflict for MAS in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 99 resolved as shift
WARNING: shift/reduce conflict for MAS in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 100 resolved as shift
WARNING: shift/reduce conflict for MAS in state 101 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 101 resolved as shift
WARNING: shift/reduce conflict for MAS in state 102 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 102 resolved as shift
WARNING: shift/reduce conflict for MAS in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 103 resolved as shift
WARNING: shift/reduce conflict for MAS in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 104 resolved as shift
WARNING: shift/reduce conflict for MAS in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 105 resolved as shift
WARNING: shift/reduce conflict for MAS in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 106 resolved as shift
WARNING: shift/reduce conflict for MAS in state 108 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 108 resolved as shift
WARNING: shift/reduce conflict for MAS in state 109 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 109 resolved as shift
WARNING: shift/reduce conflict for MAS in state 112 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 112 resolved as shift
WARNING: shift/reduce conflict for MAS in state 113 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 113 resolved as shift
WARNING: shift/reduce conflict for MAS in state 124 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for MAS in state 147 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 147 resolved as shift
WARNING: shift/reduce conflict for MAS in state 153 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 120 resolved using rule (argumentos_llamada -> empty)
WARNING: rejected rule (factor -> empty) in state 120
