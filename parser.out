Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CORCHDER
    CORCHIZQ
    FOR
    MOD
    TO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM VAR vars acum_func main
Rule 2     main -> MAIN PARIZQ PARDER bloque
Rule 3     funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM
Rule 4     funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM
Rule 5     param -> TIPO ID COMA param
Rule 6     param -> TIPO ID
Rule 7     param -> empty
Rule 8     acum_func -> funcion acum_func
Rule 9     acum_func -> empty
Rule 10    llamada_funcion -> ID PARIZQ argumentos_llamada PARDER
Rule 11    argumentos_llamada -> argumentos_llamada COMA expresion
Rule 12    argumentos_llamada -> expresion
Rule 13    argumentos_llamada -> empty
Rule 14    id_lista -> ID COMA id_lista
Rule 15    id_lista -> ID
Rule 16    vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 17    vars -> empty
Rule 18    TIPO -> INT
Rule 19    TIPO -> FLOAT
Rule 20    TIPO -> CHAR
Rule 21    TIPO -> BOOL
Rule 22    arreglo -> ARR LLAVIZQ CTEI LLAVDER
Rule 23    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 24    estatuto -> asignacion
Rule 25    estatuto -> condicion
Rule 26    estatuto -> escritura
Rule 27    estatuto -> while_condicion
Rule 28    estatuto -> llamada_funcion
Rule 29    multiples_estatutos -> estatuto multiples_estatutos
Rule 30    multiples_estatutos -> empty
Rule 31    asignacion -> ID IGUAL expresion PUNCOM
Rule 32    escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM
Rule 33    print_expresion -> expresion multiples_print
Rule 34    print_expresion -> CTESTRING multiples_print
Rule 35    multiples_print -> COMA print_expresion
Rule 36    multiples_print -> empty
Rule 37    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
Rule 38    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
Rule 39    while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
Rule 40    expresion -> expresion AND expresion
Rule 41    expresion -> expresion OR expresion
Rule 42    expresion -> exp
Rule 43    expresion -> exp MAYOR exp
Rule 44    expresion -> exp MENOR exp
Rule 45    expresion -> exp DIFF exp
Rule 46    expresion -> exp IGIG exp
Rule 47    expresion -> exp MAYIG exp
Rule 48    expresion -> exp MENIG exp
Rule 49    exp -> termino exp_operacion
Rule 50    exp_operacion -> MAS termino exp_operacion
Rule 51    exp_operacion -> MENOS termino exp_operacion
Rule 52    exp_operacion -> empty
Rule 53    termino -> factor termino_operador
Rule 54    termino_operador -> POR factor termino_operador
Rule 55    termino_operador -> DIV factor termino_operador
Rule 56    termino_operador -> empty
Rule 57    factor -> PARIZQ expresion PARDER
Rule 58    factor -> MAS var_cte
Rule 59    factor -> MENOS var_cte
Rule 60    factor -> var_cte
Rule 61    factor -> empty
Rule 62    var_cte -> ID
Rule 63    var_cte -> CTEI
Rule 64    var_cte -> CTEF
Rule 65    var_cte -> CTEC
Rule 66    var_cte -> CTEB
Rule 67    empty -> <empty>
Rule 68    verificar_if -> <empty>
Rule 69    verificar_bloque_if -> <empty>
Rule 70    verificar_bloque_else -> <empty>
Rule 71    guardar_posicion_while -> <empty>
Rule 72    verificar_expresion_while -> <empty>
Rule 73    llenar_cuadruplo_while -> <empty>

Terminals, with rules where they appear

AND                  : 40
ARR                  : 22
BOOL                 : 21
CHAR                 : 20
COMA                 : 5 11 14 35
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 66
CTEC                 : 65
CTEF                 : 64
CTEI                 : 22 63
CTESTRING            : 34
DIFF                 : 45
DIV                  : 55
DO                   : 39
DOSPUN               : 16
ELSE                 : 38
FLOAT                : 19
FOR                  : 
FUNC                 : 3 4
ID                   : 1 3 4 5 6 10 14 15 31 62
IF                   : 37 38
IGIG                 : 46
IGUAL                : 31
INT                  : 18
LLAVDER              : 22 23
LLAVIZQ              : 22 23
MAIN                 : 2
MAS                  : 50 58
MAYIG                : 47
MAYOR                : 43
MENIG                : 48
MENOR                : 44
MENOS                : 51 59
MOD                  : 
OR                   : 41
PARDER               : 2 3 4 10 32 37 38 39 57
PARIZQ               : 2 3 4 10 32 37 38 39 57
POR                  : 54
PROGRAM              : 1
PUNCOM               : 1 3 4 16 31 32 37 38
RETURN               : 3 4
TO                   : 
VAR                  : 1 3 4
VOID                 : 4
WHILE                : 39
WRITE                : 32
error                : 

Nonterminals, with rules where they appear

TIPO                 : 3 5 6 16
acum_func            : 1 8
argumentos_llamada   : 10 11
arreglo              : 
asignacion           : 24
bloque               : 2 3 4 37 38 38 39
condicion            : 25
empty                : 7 9 13 17 30 36 52 56 61
escritura            : 26
estatuto             : 29
exp                  : 3 42 43 43 44 44 45 45 46 46 47 47 48 48
exp_operacion        : 49 50 51
expresion            : 11 12 31 33 37 38 39 40 40 41 41 57
factor               : 53 54 55
funcion              : 8
guardar_posicion_while : 39
id_lista             : 14 16
llamada_funcion      : 28
llenar_cuadruplo_while : 39
main                 : 1
multiples_estatutos  : 23 29
multiples_print      : 33 34
param                : 3 4 5
print_expresion      : 32 35
program              : 0
termino              : 49 50 51
termino_operador     : 53 54 55
var_cte              : 58 59 60
vars                 : 1 3 4 16
verificar_bloque_else : 38
verificar_bloque_if  : 37 38
verificar_expresion_while : 39
verificar_if         : 37 38
while_condicion      : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM VAR vars acum_func main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM VAR vars acum_func main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM VAR vars acum_func main

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . VAR vars acum_func main

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID PUNCOM VAR . vars acum_func main
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (14) id_lista -> . ID COMA id_lista
    (15) id_lista -> . ID
    (67) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)

    vars                           shift and go to state 7
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 6

    (14) id_lista -> ID . COMA id_lista
    (15) id_lista -> ID .

    COMA            shift and go to state 10
    DOSPUN          reduce using rule 15 (id_lista -> ID .)


state 7

    (1) program -> PROGRAM ID PUNCOM VAR vars . acum_func main
    (8) acum_func -> . funcion acum_func
    (9) acum_func -> . empty
    (3) funcion -> . FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM
    (4) funcion -> . FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM
    (67) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 67 (empty -> .)

    acum_func                      shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (16) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 15


state 9

    (17) vars -> empty .

    FUNC            reduce using rule 17 (vars -> empty .)
    MAIN            reduce using rule 17 (vars -> empty .)
    LLAVIZQ         reduce using rule 17 (vars -> empty .)


state 10

    (14) id_lista -> ID COMA . id_lista
    (14) id_lista -> . ID COMA id_lista
    (15) id_lista -> . ID

    ID              shift and go to state 6

    id_lista                       shift and go to state 16

state 11

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func . main
    (2) main -> . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 12

    (8) acum_func -> funcion . acum_func
    (8) acum_func -> . funcion acum_func
    (9) acum_func -> . empty
    (3) funcion -> . FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM
    (4) funcion -> . FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM
    (67) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 67 (empty -> .)

    funcion                        shift and go to state 12
    acum_func                      shift and go to state 19
    empty                          shift and go to state 13

state 13

    (9) acum_func -> empty .

    MAIN            reduce using rule 9 (acum_func -> empty .)


state 14

    (3) funcion -> FUNC . TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM
    (4) funcion -> FUNC . VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 20

state 15

    (16) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 26

state 16

    (14) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 14 (id_lista -> ID COMA id_lista .)


state 17

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func main .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM VAR vars acum_func main .)


state 18

    (2) main -> MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 27


state 19

    (8) acum_func -> funcion acum_func .

    MAIN            reduce using rule 8 (acum_func -> funcion acum_func .)


state 20

    (3) funcion -> FUNC TIPO . ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM

    ID              shift and go to state 28


state 21

    (4) funcion -> FUNC VOID . ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM

    ID              shift and go to state 29


state 22

    (18) TIPO -> INT .

    ID              reduce using rule 18 (TIPO -> INT .)
    PUNCOM          reduce using rule 18 (TIPO -> INT .)


state 23

    (19) TIPO -> FLOAT .

    ID              reduce using rule 19 (TIPO -> FLOAT .)
    PUNCOM          reduce using rule 19 (TIPO -> FLOAT .)


state 24

    (20) TIPO -> CHAR .

    ID              reduce using rule 20 (TIPO -> CHAR .)
    PUNCOM          reduce using rule 20 (TIPO -> CHAR .)


state 25

    (21) TIPO -> BOOL .

    ID              reduce using rule 21 (TIPO -> BOOL .)
    PUNCOM          reduce using rule 21 (TIPO -> BOOL .)


state 26

    (16) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 30


state 27

    (2) main -> MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 31


state 28

    (3) funcion -> FUNC TIPO ID . PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM

    PARIZQ          shift and go to state 32


state 29

    (4) funcion -> FUNC VOID ID . PARIZQ param PARDER VAR vars bloque RETURN PUNCOM

    PARIZQ          shift and go to state 33


state 30

    (16) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (14) id_lista -> . ID COMA id_lista
    (15) id_lista -> . ID
    (67) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 67 (empty -> .)
    MAIN            reduce using rule 67 (empty -> .)
    LLAVIZQ         reduce using rule 67 (empty -> .)

    id_lista                       shift and go to state 8
    vars                           shift and go to state 34
    empty                          shift and go to state 9

state 31

    (2) main -> MAIN PARIZQ PARDER . bloque
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 35

state 32

    (3) funcion -> FUNC TIPO ID PARIZQ . param PARDER VAR vars bloque RETURN exp PUNCOM
    (5) param -> . TIPO ID COMA param
    (6) param -> . TIPO ID
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (67) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 67 (empty -> .)

    TIPO                           shift and go to state 37
    param                          shift and go to state 38
    empty                          shift and go to state 39

state 33

    (4) funcion -> FUNC VOID ID PARIZQ . param PARDER VAR vars bloque RETURN PUNCOM
    (5) param -> . TIPO ID COMA param
    (6) param -> . TIPO ID
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (67) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 67 (empty -> .)

    param                          shift and go to state 40
    TIPO                           shift and go to state 37
    empty                          shift and go to state 39

state 34

    (16) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    FUNC            reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    MAIN            reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    LLAVIZQ         reduce using rule 16 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 35

    (2) main -> MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 2 (main -> MAIN PARIZQ PARDER bloque .)


state 36

    (23) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (29) multiples_estatutos -> . estatuto multiples_estatutos
    (30) multiples_estatutos -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . while_condicion
    (28) estatuto -> . llamada_funcion
    (67) empty -> .
    (31) asignacion -> . ID IGUAL expresion PUNCOM
    (37) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (32) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (39) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (10) llamada_funcion -> . ID PARIZQ argumentos_llamada PARDER

    LLAVDER         reduce using rule 67 (empty -> .)
    ID              shift and go to state 49
    IF              shift and go to state 50
    WRITE           shift and go to state 51
    WHILE           shift and go to state 52

    multiples_estatutos            shift and go to state 41
    estatuto                       shift and go to state 42
    empty                          shift and go to state 43
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    while_condicion                shift and go to state 47
    llamada_funcion                shift and go to state 48

state 37

    (5) param -> TIPO . ID COMA param
    (6) param -> TIPO . ID

    ID              shift and go to state 53


state 38

    (3) funcion -> FUNC TIPO ID PARIZQ param . PARDER VAR vars bloque RETURN exp PUNCOM

    PARDER          shift and go to state 54


state 39

    (7) param -> empty .

    PARDER          reduce using rule 7 (param -> empty .)


state 40

    (4) funcion -> FUNC VOID ID PARIZQ param . PARDER VAR vars bloque RETURN PUNCOM

    PARDER          shift and go to state 55


state 41

    (23) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 56


state 42

    (29) multiples_estatutos -> estatuto . multiples_estatutos
    (29) multiples_estatutos -> . estatuto multiples_estatutos
    (30) multiples_estatutos -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . while_condicion
    (28) estatuto -> . llamada_funcion
    (67) empty -> .
    (31) asignacion -> . ID IGUAL expresion PUNCOM
    (37) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (32) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (39) while_condicion -> . WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (10) llamada_funcion -> . ID PARIZQ argumentos_llamada PARDER

    LLAVDER         reduce using rule 67 (empty -> .)
    ID              shift and go to state 49
    IF              shift and go to state 50
    WRITE           shift and go to state 51
    WHILE           shift and go to state 52

    estatuto                       shift and go to state 42
    multiples_estatutos            shift and go to state 57
    empty                          shift and go to state 43
    asignacion                     shift and go to state 44
    condicion                      shift and go to state 45
    escritura                      shift and go to state 46
    while_condicion                shift and go to state 47
    llamada_funcion                shift and go to state 48

state 43

    (30) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 30 (multiples_estatutos -> empty .)


state 44

    (24) estatuto -> asignacion .

    ID              reduce using rule 24 (estatuto -> asignacion .)
    IF              reduce using rule 24 (estatuto -> asignacion .)
    WRITE           reduce using rule 24 (estatuto -> asignacion .)
    WHILE           reduce using rule 24 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 24 (estatuto -> asignacion .)


state 45

    (25) estatuto -> condicion .

    ID              reduce using rule 25 (estatuto -> condicion .)
    IF              reduce using rule 25 (estatuto -> condicion .)
    WRITE           reduce using rule 25 (estatuto -> condicion .)
    WHILE           reduce using rule 25 (estatuto -> condicion .)
    LLAVDER         reduce using rule 25 (estatuto -> condicion .)


state 46

    (26) estatuto -> escritura .

    ID              reduce using rule 26 (estatuto -> escritura .)
    IF              reduce using rule 26 (estatuto -> escritura .)
    WRITE           reduce using rule 26 (estatuto -> escritura .)
    WHILE           reduce using rule 26 (estatuto -> escritura .)
    LLAVDER         reduce using rule 26 (estatuto -> escritura .)


state 47

    (27) estatuto -> while_condicion .

    ID              reduce using rule 27 (estatuto -> while_condicion .)
    IF              reduce using rule 27 (estatuto -> while_condicion .)
    WRITE           reduce using rule 27 (estatuto -> while_condicion .)
    WHILE           reduce using rule 27 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 27 (estatuto -> while_condicion .)


state 48

    (28) estatuto -> llamada_funcion .

    ID              reduce using rule 28 (estatuto -> llamada_funcion .)
    IF              reduce using rule 28 (estatuto -> llamada_funcion .)
    WRITE           reduce using rule 28 (estatuto -> llamada_funcion .)
    WHILE           reduce using rule 28 (estatuto -> llamada_funcion .)
    LLAVDER         reduce using rule 28 (estatuto -> llamada_funcion .)


state 49

    (31) asignacion -> ID . IGUAL expresion PUNCOM
    (10) llamada_funcion -> ID . PARIZQ argumentos_llamada PARDER

    IGUAL           shift and go to state 58
    PARIZQ          shift and go to state 59


state 50

    (37) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM

    PARIZQ          shift and go to state 60


state 51

    (32) escritura -> WRITE . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 61


state 52

    (39) while_condicion -> WHILE . PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while

    PARIZQ          shift and go to state 62


state 53

    (5) param -> TIPO ID . COMA param
    (6) param -> TIPO ID .

    COMA            shift and go to state 63
    PARDER          reduce using rule 6 (param -> TIPO ID .)


state 54

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER . VAR vars bloque RETURN exp PUNCOM

    VAR             shift and go to state 64


state 55

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER . VAR vars bloque RETURN PUNCOM

    VAR             shift and go to state 65


state 56

    (23) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    RETURN          reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WRITE           reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 23 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 57

    (29) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 29 (multiples_estatutos -> estatuto multiples_estatutos .)


state 58

    (31) asignacion -> ID IGUAL . expresion PUNCOM
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 67
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 59

    (10) llamada_funcion -> ID PARIZQ . argumentos_llamada PARDER
    (11) argumentos_llamada -> . argumentos_llamada COMA expresion
    (12) argumentos_llamada -> . expresion
    (13) argumentos_llamada -> . empty
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (67) empty -> .
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    argumentos_llamada             shift and go to state 80
    expresion                      shift and go to state 81
    empty                          shift and go to state 82
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73

state 60

    (37) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 83
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 61

    (32) escritura -> WRITE PARIZQ . print_expresion PARDER PUNCOM
    (33) print_expresion -> . expresion multiples_print
    (34) print_expresion -> . CTESTRING multiples_print
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 86
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    print_expresion                shift and go to state 84
    expresion                      shift and go to state 85
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 62

    (39) while_condicion -> WHILE PARIZQ . guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (71) guardar_posicion_while -> .

    PARIZQ          reduce using rule 71 (guardar_posicion_while -> .)
    MAS             reduce using rule 71 (guardar_posicion_while -> .)
    MENOS           reduce using rule 71 (guardar_posicion_while -> .)
    ID              reduce using rule 71 (guardar_posicion_while -> .)
    CTEI            reduce using rule 71 (guardar_posicion_while -> .)
    CTEF            reduce using rule 71 (guardar_posicion_while -> .)
    CTEC            reduce using rule 71 (guardar_posicion_while -> .)
    CTEB            reduce using rule 71 (guardar_posicion_while -> .)
    AND             reduce using rule 71 (guardar_posicion_while -> .)
    OR              reduce using rule 71 (guardar_posicion_while -> .)
    PARDER          reduce using rule 71 (guardar_posicion_while -> .)
    MAYOR           reduce using rule 71 (guardar_posicion_while -> .)
    MENOR           reduce using rule 71 (guardar_posicion_while -> .)
    DIFF            reduce using rule 71 (guardar_posicion_while -> .)
    IGIG            reduce using rule 71 (guardar_posicion_while -> .)
    MAYIG           reduce using rule 71 (guardar_posicion_while -> .)
    MENIG           reduce using rule 71 (guardar_posicion_while -> .)
    POR             reduce using rule 71 (guardar_posicion_while -> .)
    DIV             reduce using rule 71 (guardar_posicion_while -> .)

    guardar_posicion_while         shift and go to state 87

state 63

    (5) param -> TIPO ID COMA . param
    (5) param -> . TIPO ID COMA param
    (6) param -> . TIPO ID
    (7) param -> . empty
    (18) TIPO -> . INT
    (19) TIPO -> . FLOAT
    (20) TIPO -> . CHAR
    (21) TIPO -> . BOOL
    (67) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 67 (empty -> .)

    TIPO                           shift and go to state 37
    param                          shift and go to state 88
    empty                          shift and go to state 39

state 64

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR . vars bloque RETURN exp PUNCOM
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (14) id_lista -> . ID COMA id_lista
    (15) id_lista -> . ID
    (67) empty -> .

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 67 (empty -> .)

    vars                           shift and go to state 89
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 65

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER VAR . vars bloque RETURN PUNCOM
    (16) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (17) vars -> . empty
    (14) id_lista -> . ID COMA id_lista
    (15) id_lista -> . ID
    (67) empty -> .

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 67 (empty -> .)

    vars                           shift and go to state 90
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 66

    (62) var_cte -> ID .

    POR             reduce using rule 62 (var_cte -> ID .)
    DIV             reduce using rule 62 (var_cte -> ID .)
    MAS             reduce using rule 62 (var_cte -> ID .)
    MENOS           reduce using rule 62 (var_cte -> ID .)
    MAYOR           reduce using rule 62 (var_cte -> ID .)
    MENOR           reduce using rule 62 (var_cte -> ID .)
    DIFF            reduce using rule 62 (var_cte -> ID .)
    IGIG            reduce using rule 62 (var_cte -> ID .)
    MAYIG           reduce using rule 62 (var_cte -> ID .)
    MENIG           reduce using rule 62 (var_cte -> ID .)
    PUNCOM          reduce using rule 62 (var_cte -> ID .)
    AND             reduce using rule 62 (var_cte -> ID .)
    OR              reduce using rule 62 (var_cte -> ID .)
    PARDER          reduce using rule 62 (var_cte -> ID .)
    COMA            reduce using rule 62 (var_cte -> ID .)


state 67

    (31) asignacion -> ID IGUAL expresion . PUNCOM
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93


state 68

    (42) expresion -> exp .
    (43) expresion -> exp . MAYOR exp
    (44) expresion -> exp . MENOR exp
    (45) expresion -> exp . DIFF exp
    (46) expresion -> exp . IGIG exp
    (47) expresion -> exp . MAYIG exp
    (48) expresion -> exp . MENIG exp

    PUNCOM          reduce using rule 42 (expresion -> exp .)
    AND             reduce using rule 42 (expresion -> exp .)
    OR              reduce using rule 42 (expresion -> exp .)
    PARDER          reduce using rule 42 (expresion -> exp .)
    COMA            reduce using rule 42 (expresion -> exp .)
    MAYOR           shift and go to state 94
    MENOR           shift and go to state 95
    DIFF            shift and go to state 96
    IGIG            shift and go to state 97
    MAYIG           shift and go to state 98
    MENIG           shift and go to state 99


state 69

    (49) exp -> termino . exp_operacion
    (50) exp_operacion -> . MAS termino exp_operacion
    (51) exp_operacion -> . MENOS termino exp_operacion
    (52) exp_operacion -> . empty
    (67) empty -> .

    MAS             shift and go to state 101
    MENOS           shift and go to state 102
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    exp_operacion                  shift and go to state 100
    empty                          shift and go to state 103

state 70

    (53) termino -> factor . termino_operador
    (54) termino_operador -> . POR factor termino_operador
    (55) termino_operador -> . DIV factor termino_operador
    (56) termino_operador -> . empty
    (67) empty -> .

    POR             shift and go to state 105
    DIV             shift and go to state 106
    MAS             reduce using rule 67 (empty -> .)
    MENOS           reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    termino_operador               shift and go to state 104
    empty                          shift and go to state 107

state 71

    (57) factor -> PARIZQ . expresion PARDER
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 108
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 72

    (58) factor -> MAS . var_cte
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB

    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79

    var_cte                        shift and go to state 109

state 73

    (60) factor -> var_cte .

    POR             reduce using rule 60 (factor -> var_cte .)
    DIV             reduce using rule 60 (factor -> var_cte .)
    MAS             reduce using rule 60 (factor -> var_cte .)
    MENOS           reduce using rule 60 (factor -> var_cte .)
    MAYOR           reduce using rule 60 (factor -> var_cte .)
    MENOR           reduce using rule 60 (factor -> var_cte .)
    DIFF            reduce using rule 60 (factor -> var_cte .)
    IGIG            reduce using rule 60 (factor -> var_cte .)
    MAYIG           reduce using rule 60 (factor -> var_cte .)
    MENIG           reduce using rule 60 (factor -> var_cte .)
    PUNCOM          reduce using rule 60 (factor -> var_cte .)
    AND             reduce using rule 60 (factor -> var_cte .)
    OR              reduce using rule 60 (factor -> var_cte .)
    PARDER          reduce using rule 60 (factor -> var_cte .)
    COMA            reduce using rule 60 (factor -> var_cte .)


state 74

    (59) factor -> MENOS . var_cte
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB

    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79

    var_cte                        shift and go to state 110

state 75

    (61) factor -> empty .

    POR             reduce using rule 61 (factor -> empty .)
    DIV             reduce using rule 61 (factor -> empty .)
    MAS             reduce using rule 61 (factor -> empty .)
    MENOS           reduce using rule 61 (factor -> empty .)
    MAYOR           reduce using rule 61 (factor -> empty .)
    MENOR           reduce using rule 61 (factor -> empty .)
    DIFF            reduce using rule 61 (factor -> empty .)
    IGIG            reduce using rule 61 (factor -> empty .)
    MAYIG           reduce using rule 61 (factor -> empty .)
    MENIG           reduce using rule 61 (factor -> empty .)
    PUNCOM          reduce using rule 61 (factor -> empty .)
    AND             reduce using rule 61 (factor -> empty .)
    OR              reduce using rule 61 (factor -> empty .)
    PARDER          reduce using rule 61 (factor -> empty .)
    COMA            reduce using rule 61 (factor -> empty .)


state 76

    (63) var_cte -> CTEI .

    POR             reduce using rule 63 (var_cte -> CTEI .)
    DIV             reduce using rule 63 (var_cte -> CTEI .)
    MAS             reduce using rule 63 (var_cte -> CTEI .)
    MENOS           reduce using rule 63 (var_cte -> CTEI .)
    MAYOR           reduce using rule 63 (var_cte -> CTEI .)
    MENOR           reduce using rule 63 (var_cte -> CTEI .)
    DIFF            reduce using rule 63 (var_cte -> CTEI .)
    IGIG            reduce using rule 63 (var_cte -> CTEI .)
    MAYIG           reduce using rule 63 (var_cte -> CTEI .)
    MENIG           reduce using rule 63 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 63 (var_cte -> CTEI .)
    AND             reduce using rule 63 (var_cte -> CTEI .)
    OR              reduce using rule 63 (var_cte -> CTEI .)
    PARDER          reduce using rule 63 (var_cte -> CTEI .)
    COMA            reduce using rule 63 (var_cte -> CTEI .)


state 77

    (64) var_cte -> CTEF .

    POR             reduce using rule 64 (var_cte -> CTEF .)
    DIV             reduce using rule 64 (var_cte -> CTEF .)
    MAS             reduce using rule 64 (var_cte -> CTEF .)
    MENOS           reduce using rule 64 (var_cte -> CTEF .)
    MAYOR           reduce using rule 64 (var_cte -> CTEF .)
    MENOR           reduce using rule 64 (var_cte -> CTEF .)
    DIFF            reduce using rule 64 (var_cte -> CTEF .)
    IGIG            reduce using rule 64 (var_cte -> CTEF .)
    MAYIG           reduce using rule 64 (var_cte -> CTEF .)
    MENIG           reduce using rule 64 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 64 (var_cte -> CTEF .)
    AND             reduce using rule 64 (var_cte -> CTEF .)
    OR              reduce using rule 64 (var_cte -> CTEF .)
    PARDER          reduce using rule 64 (var_cte -> CTEF .)
    COMA            reduce using rule 64 (var_cte -> CTEF .)


state 78

    (65) var_cte -> CTEC .

    POR             reduce using rule 65 (var_cte -> CTEC .)
    DIV             reduce using rule 65 (var_cte -> CTEC .)
    MAS             reduce using rule 65 (var_cte -> CTEC .)
    MENOS           reduce using rule 65 (var_cte -> CTEC .)
    MAYOR           reduce using rule 65 (var_cte -> CTEC .)
    MENOR           reduce using rule 65 (var_cte -> CTEC .)
    DIFF            reduce using rule 65 (var_cte -> CTEC .)
    IGIG            reduce using rule 65 (var_cte -> CTEC .)
    MAYIG           reduce using rule 65 (var_cte -> CTEC .)
    MENIG           reduce using rule 65 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 65 (var_cte -> CTEC .)
    AND             reduce using rule 65 (var_cte -> CTEC .)
    OR              reduce using rule 65 (var_cte -> CTEC .)
    PARDER          reduce using rule 65 (var_cte -> CTEC .)
    COMA            reduce using rule 65 (var_cte -> CTEC .)


state 79

    (66) var_cte -> CTEB .

    POR             reduce using rule 66 (var_cte -> CTEB .)
    DIV             reduce using rule 66 (var_cte -> CTEB .)
    MAS             reduce using rule 66 (var_cte -> CTEB .)
    MENOS           reduce using rule 66 (var_cte -> CTEB .)
    MAYOR           reduce using rule 66 (var_cte -> CTEB .)
    MENOR           reduce using rule 66 (var_cte -> CTEB .)
    DIFF            reduce using rule 66 (var_cte -> CTEB .)
    IGIG            reduce using rule 66 (var_cte -> CTEB .)
    MAYIG           reduce using rule 66 (var_cte -> CTEB .)
    MENIG           reduce using rule 66 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 66 (var_cte -> CTEB .)
    AND             reduce using rule 66 (var_cte -> CTEB .)
    OR              reduce using rule 66 (var_cte -> CTEB .)
    PARDER          reduce using rule 66 (var_cte -> CTEB .)
    COMA            reduce using rule 66 (var_cte -> CTEB .)


state 80

    (10) llamada_funcion -> ID PARIZQ argumentos_llamada . PARDER
    (11) argumentos_llamada -> argumentos_llamada . COMA expresion

    PARDER          shift and go to state 111
    COMA            shift and go to state 112


state 81

    (12) argumentos_llamada -> expresion .
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

    PARDER          reduce using rule 12 (argumentos_llamada -> expresion .)
    COMA            reduce using rule 12 (argumentos_llamada -> expresion .)
    AND             shift and go to state 92
    OR              shift and go to state 93


state 82

    (13) argumentos_llamada -> empty .
    (61) factor -> empty .

  ! reduce/reduce conflict for PARDER resolved using rule 13 (argumentos_llamada -> empty .)
  ! reduce/reduce conflict for COMA resolved using rule 13 (argumentos_llamada -> empty .)
    PARDER          reduce using rule 13 (argumentos_llamada -> empty .)
    COMA            reduce using rule 13 (argumentos_llamada -> empty .)
    POR             reduce using rule 61 (factor -> empty .)
    DIV             reduce using rule 61 (factor -> empty .)
    MAS             reduce using rule 61 (factor -> empty .)
    MENOS           reduce using rule 61 (factor -> empty .)
    MAYOR           reduce using rule 61 (factor -> empty .)
    MENOR           reduce using rule 61 (factor -> empty .)
    DIFF            reduce using rule 61 (factor -> empty .)
    IGIG            reduce using rule 61 (factor -> empty .)
    MAYIG           reduce using rule 61 (factor -> empty .)
    MENIG           reduce using rule 61 (factor -> empty .)
    AND             reduce using rule 61 (factor -> empty .)
    OR              reduce using rule 61 (factor -> empty .)

  ! PARDER          [ reduce using rule 61 (factor -> empty .) ]
  ! COMA            [ reduce using rule 61 (factor -> empty .) ]


state 83

    (37) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

    PARDER          shift and go to state 113
    AND             shift and go to state 92
    OR              shift and go to state 93


state 84

    (32) escritura -> WRITE PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 114


state 85

    (33) print_expresion -> expresion . multiples_print
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion
    (35) multiples_print -> . COMA print_expresion
    (36) multiples_print -> . empty
    (67) empty -> .

    AND             shift and go to state 92
    OR              shift and go to state 93
    COMA            shift and go to state 116
    PARDER          reduce using rule 67 (empty -> .)

    multiples_print                shift and go to state 115
    empty                          shift and go to state 117

state 86

    (34) print_expresion -> CTESTRING . multiples_print
    (35) multiples_print -> . COMA print_expresion
    (36) multiples_print -> . empty
    (67) empty -> .

    COMA            shift and go to state 116
    PARDER          reduce using rule 67 (empty -> .)

    multiples_print                shift and go to state 118
    empty                          shift and go to state 117

state 87

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while . expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 119
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 88

    (5) param -> TIPO ID COMA param .

    PARDER          reduce using rule 5 (param -> TIPO ID COMA param .)


state 89

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars . bloque RETURN exp PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 120

state 90

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars . bloque RETURN PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 121

state 91

    (31) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 31 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 31 (asignacion -> ID IGUAL expresion PUNCOM .)
    WRITE           reduce using rule 31 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 31 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 31 (asignacion -> ID IGUAL expresion PUNCOM .)


state 92

    (40) expresion -> expresion AND . expresion
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 122
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 93

    (41) expresion -> expresion OR . expresion
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 123
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 94

    (43) expresion -> exp MAYOR . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 124
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 95

    (44) expresion -> exp MENOR . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 125
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 96

    (45) expresion -> exp DIFF . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 126
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 97

    (46) expresion -> exp IGIG . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 127
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 98

    (47) expresion -> exp MAYIG . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 128
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 99

    (48) expresion -> exp MENIG . exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 129
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 100

    (49) exp -> termino exp_operacion .

    MAYOR           reduce using rule 49 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 49 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 49 (exp -> termino exp_operacion .)
    IGIG            reduce using rule 49 (exp -> termino exp_operacion .)
    MAYIG           reduce using rule 49 (exp -> termino exp_operacion .)
    MENIG           reduce using rule 49 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 49 (exp -> termino exp_operacion .)
    AND             reduce using rule 49 (exp -> termino exp_operacion .)
    OR              reduce using rule 49 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 49 (exp -> termino exp_operacion .)
    COMA            reduce using rule 49 (exp -> termino exp_operacion .)


state 101

    (50) exp_operacion -> MAS . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    termino                        shift and go to state 130
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 102

    (51) exp_operacion -> MENOS . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    termino                        shift and go to state 131
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 103

    (52) exp_operacion -> empty .

    MAYOR           reduce using rule 52 (exp_operacion -> empty .)
    MENOR           reduce using rule 52 (exp_operacion -> empty .)
    DIFF            reduce using rule 52 (exp_operacion -> empty .)
    IGIG            reduce using rule 52 (exp_operacion -> empty .)
    MAYIG           reduce using rule 52 (exp_operacion -> empty .)
    MENIG           reduce using rule 52 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 52 (exp_operacion -> empty .)
    AND             reduce using rule 52 (exp_operacion -> empty .)
    OR              reduce using rule 52 (exp_operacion -> empty .)
    PARDER          reduce using rule 52 (exp_operacion -> empty .)
    COMA            reduce using rule 52 (exp_operacion -> empty .)


state 104

    (53) termino -> factor termino_operador .

    MAS             reduce using rule 53 (termino -> factor termino_operador .)
    MENOS           reduce using rule 53 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 53 (termino -> factor termino_operador .)
    MENOR           reduce using rule 53 (termino -> factor termino_operador .)
    DIFF            reduce using rule 53 (termino -> factor termino_operador .)
    IGIG            reduce using rule 53 (termino -> factor termino_operador .)
    MAYIG           reduce using rule 53 (termino -> factor termino_operador .)
    MENIG           reduce using rule 53 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 53 (termino -> factor termino_operador .)
    AND             reduce using rule 53 (termino -> factor termino_operador .)
    OR              reduce using rule 53 (termino -> factor termino_operador .)
    PARDER          reduce using rule 53 (termino -> factor termino_operador .)
    COMA            reduce using rule 53 (termino -> factor termino_operador .)


state 105

    (54) termino_operador -> POR . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    factor                         shift and go to state 132
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 106

    (55) termino_operador -> DIV . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    factor                         shift and go to state 133
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 107

    (56) termino_operador -> empty .

    MAS             reduce using rule 56 (termino_operador -> empty .)
    MENOS           reduce using rule 56 (termino_operador -> empty .)
    MAYOR           reduce using rule 56 (termino_operador -> empty .)
    MENOR           reduce using rule 56 (termino_operador -> empty .)
    DIFF            reduce using rule 56 (termino_operador -> empty .)
    IGIG            reduce using rule 56 (termino_operador -> empty .)
    MAYIG           reduce using rule 56 (termino_operador -> empty .)
    MENIG           reduce using rule 56 (termino_operador -> empty .)
    PUNCOM          reduce using rule 56 (termino_operador -> empty .)
    AND             reduce using rule 56 (termino_operador -> empty .)
    OR              reduce using rule 56 (termino_operador -> empty .)
    PARDER          reduce using rule 56 (termino_operador -> empty .)
    COMA            reduce using rule 56 (termino_operador -> empty .)


state 108

    (57) factor -> PARIZQ expresion . PARDER
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

    PARDER          shift and go to state 134
    AND             shift and go to state 92
    OR              shift and go to state 93


state 109

    (58) factor -> MAS var_cte .

    POR             reduce using rule 58 (factor -> MAS var_cte .)
    DIV             reduce using rule 58 (factor -> MAS var_cte .)
    MAS             reduce using rule 58 (factor -> MAS var_cte .)
    MENOS           reduce using rule 58 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 58 (factor -> MAS var_cte .)
    MENOR           reduce using rule 58 (factor -> MAS var_cte .)
    DIFF            reduce using rule 58 (factor -> MAS var_cte .)
    IGIG            reduce using rule 58 (factor -> MAS var_cte .)
    MAYIG           reduce using rule 58 (factor -> MAS var_cte .)
    MENIG           reduce using rule 58 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 58 (factor -> MAS var_cte .)
    AND             reduce using rule 58 (factor -> MAS var_cte .)
    OR              reduce using rule 58 (factor -> MAS var_cte .)
    PARDER          reduce using rule 58 (factor -> MAS var_cte .)
    COMA            reduce using rule 58 (factor -> MAS var_cte .)


state 110

    (59) factor -> MENOS var_cte .

    POR             reduce using rule 59 (factor -> MENOS var_cte .)
    DIV             reduce using rule 59 (factor -> MENOS var_cte .)
    MAS             reduce using rule 59 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 59 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 59 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 59 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 59 (factor -> MENOS var_cte .)
    IGIG            reduce using rule 59 (factor -> MENOS var_cte .)
    MAYIG           reduce using rule 59 (factor -> MENOS var_cte .)
    MENIG           reduce using rule 59 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 59 (factor -> MENOS var_cte .)
    AND             reduce using rule 59 (factor -> MENOS var_cte .)
    OR              reduce using rule 59 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 59 (factor -> MENOS var_cte .)
    COMA            reduce using rule 59 (factor -> MENOS var_cte .)


state 111

    (10) llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .

    ID              reduce using rule 10 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    IF              reduce using rule 10 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    WRITE           reduce using rule 10 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    WHILE           reduce using rule 10 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    LLAVDER         reduce using rule 10 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)


state 112

    (11) argumentos_llamada -> argumentos_llamada COMA . expresion
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    expresion                      shift and go to state 135
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 113

    (37) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_if PUNCOM
    (38) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (68) verificar_if -> .

    LLAVIZQ         reduce using rule 68 (verificar_if -> .)

    verificar_if                   shift and go to state 136

state 114

    (32) escritura -> WRITE PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 137


state 115

    (33) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 33 (print_expresion -> expresion multiples_print .)


state 116

    (35) multiples_print -> COMA . print_expresion
    (33) print_expresion -> . expresion multiples_print
    (34) print_expresion -> . CTESTRING multiples_print
    (40) expresion -> . expresion AND expresion
    (41) expresion -> . expresion OR expresion
    (42) expresion -> . exp
    (43) expresion -> . exp MAYOR exp
    (44) expresion -> . exp MENOR exp
    (45) expresion -> . exp DIFF exp
    (46) expresion -> . exp IGIG exp
    (47) expresion -> . exp MAYIG exp
    (48) expresion -> . exp MENIG exp
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 86
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    print_expresion                shift and go to state 138
    expresion                      shift and go to state 85
    exp                            shift and go to state 68
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 117

    (36) multiples_print -> empty .

    PARDER          reduce using rule 36 (multiples_print -> empty .)


state 118

    (34) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 34 (print_expresion -> CTESTRING multiples_print .)


state 119

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion . verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion
    (72) verificar_expresion_while -> .

    AND             shift and go to state 92
    OR              shift and go to state 93
    PARDER          reduce using rule 72 (verificar_expresion_while -> .)

    verificar_expresion_while      shift and go to state 139

state 120

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque . RETURN exp PUNCOM

    RETURN          shift and go to state 140


state 121

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque . RETURN PUNCOM

    RETURN          shift and go to state 141


state 122

    (40) expresion -> expresion AND expresion .
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 40 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 40 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 40 (expresion -> expresion AND expresion .)
    AND             shift and go to state 92
    OR              shift and go to state 93

  ! AND             [ reduce using rule 40 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 40 (expresion -> expresion AND expresion .) ]


state 123

    (41) expresion -> expresion OR expresion .
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 41 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 41 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 41 (expresion -> expresion OR expresion .)
    AND             shift and go to state 92
    OR              shift and go to state 93

  ! AND             [ reduce using rule 41 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 41 (expresion -> expresion OR expresion .) ]


state 124

    (43) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 43 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 43 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 43 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 43 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 43 (expresion -> exp MAYOR exp .)


state 125

    (44) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 44 (expresion -> exp MENOR exp .)
    AND             reduce using rule 44 (expresion -> exp MENOR exp .)
    OR              reduce using rule 44 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 44 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 44 (expresion -> exp MENOR exp .)


state 126

    (45) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 45 (expresion -> exp DIFF exp .)
    AND             reduce using rule 45 (expresion -> exp DIFF exp .)
    OR              reduce using rule 45 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 45 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 45 (expresion -> exp DIFF exp .)


state 127

    (46) expresion -> exp IGIG exp .

    PUNCOM          reduce using rule 46 (expresion -> exp IGIG exp .)
    AND             reduce using rule 46 (expresion -> exp IGIG exp .)
    OR              reduce using rule 46 (expresion -> exp IGIG exp .)
    PARDER          reduce using rule 46 (expresion -> exp IGIG exp .)
    COMA            reduce using rule 46 (expresion -> exp IGIG exp .)


state 128

    (47) expresion -> exp MAYIG exp .

    PUNCOM          reduce using rule 47 (expresion -> exp MAYIG exp .)
    AND             reduce using rule 47 (expresion -> exp MAYIG exp .)
    OR              reduce using rule 47 (expresion -> exp MAYIG exp .)
    PARDER          reduce using rule 47 (expresion -> exp MAYIG exp .)
    COMA            reduce using rule 47 (expresion -> exp MAYIG exp .)


state 129

    (48) expresion -> exp MENIG exp .

    PUNCOM          reduce using rule 48 (expresion -> exp MENIG exp .)
    AND             reduce using rule 48 (expresion -> exp MENIG exp .)
    OR              reduce using rule 48 (expresion -> exp MENIG exp .)
    PARDER          reduce using rule 48 (expresion -> exp MENIG exp .)
    COMA            reduce using rule 48 (expresion -> exp MENIG exp .)


state 130

    (50) exp_operacion -> MAS termino . exp_operacion
    (50) exp_operacion -> . MAS termino exp_operacion
    (51) exp_operacion -> . MENOS termino exp_operacion
    (52) exp_operacion -> . empty
    (67) empty -> .

    MAS             shift and go to state 101
    MENOS           shift and go to state 102
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    exp_operacion                  shift and go to state 142
    empty                          shift and go to state 103

state 131

    (51) exp_operacion -> MENOS termino . exp_operacion
    (50) exp_operacion -> . MAS termino exp_operacion
    (51) exp_operacion -> . MENOS termino exp_operacion
    (52) exp_operacion -> . empty
    (67) empty -> .

    MAS             shift and go to state 101
    MENOS           shift and go to state 102
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    exp_operacion                  shift and go to state 143
    empty                          shift and go to state 103

state 132

    (54) termino_operador -> POR factor . termino_operador
    (54) termino_operador -> . POR factor termino_operador
    (55) termino_operador -> . DIV factor termino_operador
    (56) termino_operador -> . empty
    (67) empty -> .

    POR             shift and go to state 105
    DIV             shift and go to state 106
    MAS             reduce using rule 67 (empty -> .)
    MENOS           reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    termino_operador               shift and go to state 144
    empty                          shift and go to state 107

state 133

    (55) termino_operador -> DIV factor . termino_operador
    (54) termino_operador -> . POR factor termino_operador
    (55) termino_operador -> . DIV factor termino_operador
    (56) termino_operador -> . empty
    (67) empty -> .

    POR             shift and go to state 105
    DIV             shift and go to state 106
    MAS             reduce using rule 67 (empty -> .)
    MENOS           reduce using rule 67 (empty -> .)
    MAYOR           reduce using rule 67 (empty -> .)
    MENOR           reduce using rule 67 (empty -> .)
    DIFF            reduce using rule 67 (empty -> .)
    IGIG            reduce using rule 67 (empty -> .)
    MAYIG           reduce using rule 67 (empty -> .)
    MENIG           reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)
    AND             reduce using rule 67 (empty -> .)
    OR              reduce using rule 67 (empty -> .)
    PARDER          reduce using rule 67 (empty -> .)
    COMA            reduce using rule 67 (empty -> .)

    termino_operador               shift and go to state 145
    empty                          shift and go to state 107

state 134

    (57) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    IGIG            reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MAYIG           reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    MENIG           reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 57 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 57 (factor -> PARIZQ expresion PARDER .)


state 135

    (11) argumentos_llamada -> argumentos_llamada COMA expresion .
    (40) expresion -> expresion . AND expresion
    (41) expresion -> expresion . OR expresion

    PARDER          reduce using rule 11 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    COMA            reduce using rule 11 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    AND             shift and go to state 92
    OR              shift and go to state 93


state 136

    (37) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_if PUNCOM
    (38) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 146

state 137

    (32) escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 32 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 32 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WRITE           reduce using rule 32 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 32 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 32 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)


state 138

    (35) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 35 (multiples_print -> COMA print_expresion .)


state 139

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while . PARDER DO bloque llenar_cuadruplo_while

    PARDER          shift and go to state 147


state 140

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN . exp PUNCOM
    (49) exp -> . termino exp_operacion
    (53) termino -> . factor termino_operador
    (57) factor -> . PARIZQ expresion PARDER
    (58) factor -> . MAS var_cte
    (59) factor -> . MENOS var_cte
    (60) factor -> . var_cte
    (61) factor -> . empty
    (62) var_cte -> . ID
    (63) var_cte -> . CTEI
    (64) var_cte -> . CTEF
    (65) var_cte -> . CTEC
    (66) var_cte -> . CTEB
    (67) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 71
    MAS             shift and go to state 72
    MENOS           shift and go to state 74
    ID              shift and go to state 66
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTEB            shift and go to state 79
    POR             reduce using rule 67 (empty -> .)
    DIV             reduce using rule 67 (empty -> .)
    PUNCOM          reduce using rule 67 (empty -> .)

  ! MAS             [ reduce using rule 67 (empty -> .) ]
  ! MENOS           [ reduce using rule 67 (empty -> .) ]

    exp                            shift and go to state 148
    termino                        shift and go to state 69
    factor                         shift and go to state 70
    var_cte                        shift and go to state 73
    empty                          shift and go to state 75

state 141

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN . PUNCOM

    PUNCOM          shift and go to state 149


state 142

    (50) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    IGIG            reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    MAYIG           reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    MENIG           reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 50 (exp_operacion -> MAS termino exp_operacion .)


state 143

    (51) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    IGIG            reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    MAYIG           reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    MENIG           reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 51 (exp_operacion -> MENOS termino exp_operacion .)


state 144

    (54) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    IGIG            reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    MAYIG           reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    MENIG           reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 54 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 54 (termino_operador -> POR factor termino_operador .)


state 145

    (55) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    IGIG            reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    MAYIG           reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    MENIG           reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 55 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 55 (termino_operador -> DIV factor termino_operador .)


state 146

    (37) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_if PUNCOM
    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (69) verificar_bloque_if -> .
    (70) verificar_bloque_else -> .

    PUNCOM          reduce using rule 69 (verificar_bloque_if -> .)
    ELSE            reduce using rule 70 (verificar_bloque_else -> .)

    verificar_bloque_if            shift and go to state 150
    verificar_bloque_else          shift and go to state 151

state 147

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER . DO bloque llenar_cuadruplo_while

    DO              shift and go to state 152


state 148

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp . PUNCOM

    PUNCOM          shift and go to state 153


state 149

    (4) funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM .

    FUNC            reduce using rule 4 (funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM .)
    MAIN            reduce using rule 4 (funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM .)


state 150

    (37) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 154


state 151

    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else . ELSE bloque verificar_bloque_if PUNCOM

    ELSE            shift and go to state 155


state 152

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO . bloque llenar_cuadruplo_while
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 156

state 153

    (3) funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM .

    FUNC            reduce using rule 3 (funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM .)
    MAIN            reduce using rule 3 (funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM .)


state 154

    (37) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 37 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 37 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 37 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 37 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 37 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)


state 155

    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE . bloque verificar_bloque_if PUNCOM
    (23) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 157

state 156

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque . llenar_cuadruplo_while
    (73) llenar_cuadruplo_while -> .

    ID              reduce using rule 73 (llenar_cuadruplo_while -> .)
    IF              reduce using rule 73 (llenar_cuadruplo_while -> .)
    WRITE           reduce using rule 73 (llenar_cuadruplo_while -> .)
    WHILE           reduce using rule 73 (llenar_cuadruplo_while -> .)
    LLAVDER         reduce using rule 73 (llenar_cuadruplo_while -> .)

    llenar_cuadruplo_while         shift and go to state 158

state 157

    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque . verificar_bloque_if PUNCOM
    (69) verificar_bloque_if -> .

    PUNCOM          reduce using rule 69 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 159

state 158

    (39) while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .

    ID              reduce using rule 39 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    IF              reduce using rule 39 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    WRITE           reduce using rule 39 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    WHILE           reduce using rule 39 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)
    LLAVDER         reduce using rule 39 (while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while .)


state 159

    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 160


state 160

    (38) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 38 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 38 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 38 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 38 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 38 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 58 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 58 resolved as shift
WARNING: shift/reduce conflict for MAS in state 59 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 59 resolved as shift
WARNING: shift/reduce conflict for MAS in state 60 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 60 resolved as shift
WARNING: shift/reduce conflict for MAS in state 61 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 61 resolved as shift
WARNING: shift/reduce conflict for MAS in state 71 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 71 resolved as shift
WARNING: shift/reduce conflict for MAS in state 87 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 87 resolved as shift
WARNING: shift/reduce conflict for MAS in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 92 resolved as shift
WARNING: shift/reduce conflict for MAS in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 93 resolved as shift
WARNING: shift/reduce conflict for MAS in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 94 resolved as shift
WARNING: shift/reduce conflict for MAS in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 95 resolved as shift
WARNING: shift/reduce conflict for MAS in state 96 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 96 resolved as shift
WARNING: shift/reduce conflict for MAS in state 97 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 97 resolved as shift
WARNING: shift/reduce conflict for MAS in state 98 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 98 resolved as shift
WARNING: shift/reduce conflict for MAS in state 99 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 99 resolved as shift
WARNING: shift/reduce conflict for MAS in state 101 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 101 resolved as shift
WARNING: shift/reduce conflict for MAS in state 102 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 102 resolved as shift
WARNING: shift/reduce conflict for MAS in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 105 resolved as shift
WARNING: shift/reduce conflict for MAS in state 106 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 106 resolved as shift
WARNING: shift/reduce conflict for MAS in state 112 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 112 resolved as shift
WARNING: shift/reduce conflict for MAS in state 116 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for MAS in state 140 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 140 resolved as shift
WARNING: reduce/reduce conflict in state 82 resolved using rule (argumentos_llamada -> empty)
WARNING: rejected rule (factor -> empty) in state 82
