Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARR
    CORCHDER
    CORCHIZQ
    FOR
    MOD
    TO

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM VAR vars acum_func main
Rule 2     main -> MAIN PARIZQ PARDER bloque
Rule 3     funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
Rule 4     funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
Rule 5     save_type_name_func -> <empty>
Rule 6     save_params -> <empty>
Rule 7     vars_local -> VAR vars
Rule 8     bloque_func -> bloque
Rule 9     end_function -> <empty>
Rule 10    param -> TIPO ID COMA param
Rule 11    param -> TIPO ID
Rule 12    param -> empty
Rule 13    acum_func -> funcion acum_func
Rule 14    acum_func -> empty
Rule 15    llamada_funcion -> ID PARIZQ argumentos_llamada PARDER
Rule 16    argumentos_llamada -> argumentos_llamada COMA expresion
Rule 17    argumentos_llamada -> expresion
Rule 18    argumentos_llamada -> empty
Rule 19    id_lista -> ID COMA id_lista
Rule 20    id_lista -> ID
Rule 21    vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 22    vars -> empty
Rule 23    TIPO -> INT
Rule 24    TIPO -> FLOAT
Rule 25    TIPO -> CHAR
Rule 26    TIPO -> BOOL
Rule 27    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 28    estatuto -> asignacion
Rule 29    estatuto -> condicion
Rule 30    estatuto -> escritura
Rule 31    estatuto -> while_condicion
Rule 32    estatuto -> llamada_funcion
Rule 33    multiples_estatutos -> estatuto multiples_estatutos
Rule 34    multiples_estatutos -> empty
Rule 35    asignacion -> ID IGUAL expresion PUNCOM
Rule 36    escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM
Rule 37    print_expresion -> expresion multiples_print
Rule 38    print_expresion -> CTESTRING multiples_print
Rule 39    multiples_print -> COMA print_expresion
Rule 40    multiples_print -> empty
Rule 41    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
Rule 42    condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
Rule 43    while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
Rule 44    expresion -> expresion AND expresion
Rule 45    expresion -> expresion OR expresion
Rule 46    expresion -> exp
Rule 47    expresion -> exp MAYOR exp
Rule 48    expresion -> exp MENOR exp
Rule 49    expresion -> exp DIFF exp
Rule 50    expresion -> exp IGIG exp
Rule 51    expresion -> exp MAYIG exp
Rule 52    expresion -> exp MENIG exp
Rule 53    exp -> termino exp_operacion
Rule 54    exp_operacion -> MAS termino exp_operacion
Rule 55    exp_operacion -> MENOS termino exp_operacion
Rule 56    exp_operacion -> empty
Rule 57    termino -> factor termino_operador
Rule 58    termino_operador -> POR factor termino_operador
Rule 59    termino_operador -> DIV factor termino_operador
Rule 60    termino_operador -> empty
Rule 61    factor -> PARIZQ expresion PARDER
Rule 62    factor -> MAS var_cte
Rule 63    factor -> MENOS var_cte
Rule 64    factor -> var_cte
Rule 65    factor -> empty
Rule 66    var_cte -> ID
Rule 67    var_cte -> CTEI
Rule 68    var_cte -> CTEF
Rule 69    var_cte -> CTEC
Rule 70    var_cte -> CTEB
Rule 71    empty -> <empty>
Rule 72    verificar_if -> <empty>
Rule 73    verificar_bloque_if -> <empty>
Rule 74    verificar_bloque_else -> <empty>
Rule 75    save_position_while -> <empty>
Rule 76    check_while_exp -> <empty>
Rule 77    fill_jump_while -> <empty>

Terminals, with rules where they appear

AND                  : 44
ARR                  : 
BOOL                 : 26
CHAR                 : 25
COMA                 : 10 16 19 39
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 70
CTEC                 : 69
CTEF                 : 68
CTEI                 : 67
CTESTRING            : 38
DIFF                 : 49
DIV                  : 59
DO                   : 43
DOSPUN               : 21
ELSE                 : 42
FLOAT                : 24
FOR                  : 
FUNC                 : 3 4
ID                   : 1 3 4 10 11 15 19 20 35 66
IF                   : 41 42
IGIG                 : 50
IGUAL                : 35
INT                  : 23
LLAVDER              : 27
LLAVIZQ              : 27
MAIN                 : 2
MAS                  : 54 62
MAYIG                : 51
MAYOR                : 47
MENIG                : 52
MENOR                : 48
MENOS                : 55 63
MOD                  : 
OR                   : 45
PARDER               : 2 3 4 15 36 41 42 43 61
PARIZQ               : 2 3 4 15 36 41 42 43 61
POR                  : 58
PROGRAM              : 1
PUNCOM               : 1 3 4 21 35 36 41 42
RETURN               : 3 4
TO                   : 
VAR                  : 1 7
VOID                 : 4
WHILE                : 43
WRITE                : 36
error                : 

Nonterminals, with rules where they appear

TIPO                 : 3 10 11 21
acum_func            : 1 13
argumentos_llamada   : 15 16
asignacion           : 28
bloque               : 2 8 41 42 42 43
bloque_func          : 3 4
check_while_exp      : 43
condicion            : 29
empty                : 12 14 18 22 34 40 56 60 65
end_function         : 3 4
escritura            : 30
estatuto             : 33
exp                  : 3 46 47 47 48 48 49 49 50 50 51 51 52 52
exp_operacion        : 53 54 55
expresion            : 16 17 35 37 41 42 43 44 44 45 45 61
factor               : 57 58 59
fill_jump_while      : 43
funcion              : 13
id_lista             : 19 21
llamada_funcion      : 32
main                 : 1
multiples_estatutos  : 27 33
multiples_print      : 37 38
param                : 3 4 10
print_expresion      : 36 39
program              : 0
save_params          : 3 4
save_position_while  : 43
save_type_name_func  : 3 4
termino              : 53 54 55
termino_operador     : 57 58 59
var_cte              : 62 63 64
vars                 : 1 7 21
vars_local           : 3 4
verificar_bloque_else : 42
verificar_bloque_if  : 41 42
verificar_if         : 41 42
while_condicion      : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM VAR vars acum_func main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM VAR vars acum_func main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM VAR vars acum_func main

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . VAR vars acum_func main

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID PUNCOM VAR . vars acum_func main
    (21) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (22) vars -> . empty
    (19) id_lista -> . ID COMA id_lista
    (20) id_lista -> . ID
    (71) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 71 (empty -> .)
    MAIN            reduce using rule 71 (empty -> .)

    vars                           shift and go to state 7
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 6

    (19) id_lista -> ID . COMA id_lista
    (20) id_lista -> ID .

    COMA            shift and go to state 10
    DOSPUN          reduce using rule 20 (id_lista -> ID .)


state 7

    (1) program -> PROGRAM ID PUNCOM VAR vars . acum_func main
    (13) acum_func -> . funcion acum_func
    (14) acum_func -> . empty
    (3) funcion -> . FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (4) funcion -> . FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (71) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 71 (empty -> .)

    acum_func                      shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (21) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 15


state 9

    (22) vars -> empty .

    FUNC            reduce using rule 22 (vars -> empty .)
    MAIN            reduce using rule 22 (vars -> empty .)
    LLAVIZQ         reduce using rule 22 (vars -> empty .)


state 10

    (19) id_lista -> ID COMA . id_lista
    (19) id_lista -> . ID COMA id_lista
    (20) id_lista -> . ID

    ID              shift and go to state 6

    id_lista                       shift and go to state 16

state 11

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func . main
    (2) main -> . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 12

    (13) acum_func -> funcion . acum_func
    (13) acum_func -> . funcion acum_func
    (14) acum_func -> . empty
    (3) funcion -> . FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (4) funcion -> . FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (71) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 71 (empty -> .)

    funcion                        shift and go to state 12
    acum_func                      shift and go to state 19
    empty                          shift and go to state 13

state 13

    (14) acum_func -> empty .

    MAIN            reduce using rule 14 (acum_func -> empty .)


state 14

    (3) funcion -> FUNC . TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (4) funcion -> FUNC . VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (23) TIPO -> . INT
    (24) TIPO -> . FLOAT
    (25) TIPO -> . CHAR
    (26) TIPO -> . BOOL

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 20

state 15

    (21) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (23) TIPO -> . INT
    (24) TIPO -> . FLOAT
    (25) TIPO -> . CHAR
    (26) TIPO -> . BOOL

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25

    TIPO                           shift and go to state 26

state 16

    (19) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 19 (id_lista -> ID COMA id_lista .)


state 17

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func main .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM VAR vars acum_func main .)


state 18

    (2) main -> MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 27


state 19

    (13) acum_func -> funcion acum_func .

    MAIN            reduce using rule 13 (acum_func -> funcion acum_func .)


state 20

    (3) funcion -> FUNC TIPO . ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    ID              shift and go to state 28


state 21

    (4) funcion -> FUNC VOID . ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    ID              shift and go to state 29


state 22

    (23) TIPO -> INT .

    ID              reduce using rule 23 (TIPO -> INT .)
    PUNCOM          reduce using rule 23 (TIPO -> INT .)


state 23

    (24) TIPO -> FLOAT .

    ID              reduce using rule 24 (TIPO -> FLOAT .)
    PUNCOM          reduce using rule 24 (TIPO -> FLOAT .)


state 24

    (25) TIPO -> CHAR .

    ID              reduce using rule 25 (TIPO -> CHAR .)
    PUNCOM          reduce using rule 25 (TIPO -> CHAR .)


state 25

    (26) TIPO -> BOOL .

    ID              reduce using rule 26 (TIPO -> BOOL .)
    PUNCOM          reduce using rule 26 (TIPO -> BOOL .)


state 26

    (21) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 30


state 27

    (2) main -> MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 31


state 28

    (3) funcion -> FUNC TIPO ID . save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (5) save_type_name_func -> .

    PARIZQ          reduce using rule 5 (save_type_name_func -> .)

    save_type_name_func            shift and go to state 32

state 29

    (4) funcion -> FUNC VOID ID . save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (5) save_type_name_func -> .

    PARIZQ          reduce using rule 5 (save_type_name_func -> .)

    save_type_name_func            shift and go to state 33

state 30

    (21) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (21) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (22) vars -> . empty
    (19) id_lista -> . ID COMA id_lista
    (20) id_lista -> . ID
    (71) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 71 (empty -> .)
    MAIN            reduce using rule 71 (empty -> .)
    LLAVIZQ         reduce using rule 71 (empty -> .)

    id_lista                       shift and go to state 8
    vars                           shift and go to state 34
    empty                          shift and go to state 9

state 31

    (2) main -> MAIN PARIZQ PARDER . bloque
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 35

state 32

    (3) funcion -> FUNC TIPO ID save_type_name_func . PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    PARIZQ          shift and go to state 37


state 33

    (4) funcion -> FUNC VOID ID save_type_name_func . PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    PARIZQ          shift and go to state 38


state 34

    (21) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    FUNC            reduce using rule 21 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    MAIN            reduce using rule 21 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    LLAVIZQ         reduce using rule 21 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 35

    (2) main -> MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 2 (main -> MAIN PARIZQ PARDER bloque .)


state 36

    (27) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (33) multiples_estatutos -> . estatuto multiples_estatutos
    (34) multiples_estatutos -> . empty
    (28) estatuto -> . asignacion
    (29) estatuto -> . condicion
    (30) estatuto -> . escritura
    (31) estatuto -> . while_condicion
    (32) estatuto -> . llamada_funcion
    (71) empty -> .
    (35) asignacion -> . ID IGUAL expresion PUNCOM
    (41) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (36) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (43) while_condicion -> . WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (15) llamada_funcion -> . ID PARIZQ argumentos_llamada PARDER

    LLAVDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    WRITE           shift and go to state 49
    WHILE           shift and go to state 50

    multiples_estatutos            shift and go to state 39
    estatuto                       shift and go to state 40
    empty                          shift and go to state 41
    asignacion                     shift and go to state 42
    condicion                      shift and go to state 43
    escritura                      shift and go to state 44
    while_condicion                shift and go to state 45
    llamada_funcion                shift and go to state 46

state 37

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ . param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (10) param -> . TIPO ID COMA param
    (11) param -> . TIPO ID
    (12) param -> . empty
    (23) TIPO -> . INT
    (24) TIPO -> . FLOAT
    (25) TIPO -> . CHAR
    (26) TIPO -> . BOOL
    (71) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 71 (empty -> .)

    TIPO                           shift and go to state 51
    param                          shift and go to state 52
    empty                          shift and go to state 53

state 38

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ . param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function
    (10) param -> . TIPO ID COMA param
    (11) param -> . TIPO ID
    (12) param -> . empty
    (23) TIPO -> . INT
    (24) TIPO -> . FLOAT
    (25) TIPO -> . CHAR
    (26) TIPO -> . BOOL
    (71) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 71 (empty -> .)

    param                          shift and go to state 54
    TIPO                           shift and go to state 51
    empty                          shift and go to state 53

state 39

    (27) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 55


state 40

    (33) multiples_estatutos -> estatuto . multiples_estatutos
    (33) multiples_estatutos -> . estatuto multiples_estatutos
    (34) multiples_estatutos -> . empty
    (28) estatuto -> . asignacion
    (29) estatuto -> . condicion
    (30) estatuto -> . escritura
    (31) estatuto -> . while_condicion
    (32) estatuto -> . llamada_funcion
    (71) empty -> .
    (35) asignacion -> . ID IGUAL expresion PUNCOM
    (41) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> . IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (36) escritura -> . WRITE PARIZQ print_expresion PARDER PUNCOM
    (43) while_condicion -> . WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (15) llamada_funcion -> . ID PARIZQ argumentos_llamada PARDER

    LLAVDER         reduce using rule 71 (empty -> .)
    ID              shift and go to state 47
    IF              shift and go to state 48
    WRITE           shift and go to state 49
    WHILE           shift and go to state 50

    estatuto                       shift and go to state 40
    multiples_estatutos            shift and go to state 56
    empty                          shift and go to state 41
    asignacion                     shift and go to state 42
    condicion                      shift and go to state 43
    escritura                      shift and go to state 44
    while_condicion                shift and go to state 45
    llamada_funcion                shift and go to state 46

state 41

    (34) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 34 (multiples_estatutos -> empty .)


state 42

    (28) estatuto -> asignacion .

    ID              reduce using rule 28 (estatuto -> asignacion .)
    IF              reduce using rule 28 (estatuto -> asignacion .)
    WRITE           reduce using rule 28 (estatuto -> asignacion .)
    WHILE           reduce using rule 28 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 28 (estatuto -> asignacion .)


state 43

    (29) estatuto -> condicion .

    ID              reduce using rule 29 (estatuto -> condicion .)
    IF              reduce using rule 29 (estatuto -> condicion .)
    WRITE           reduce using rule 29 (estatuto -> condicion .)
    WHILE           reduce using rule 29 (estatuto -> condicion .)
    LLAVDER         reduce using rule 29 (estatuto -> condicion .)


state 44

    (30) estatuto -> escritura .

    ID              reduce using rule 30 (estatuto -> escritura .)
    IF              reduce using rule 30 (estatuto -> escritura .)
    WRITE           reduce using rule 30 (estatuto -> escritura .)
    WHILE           reduce using rule 30 (estatuto -> escritura .)
    LLAVDER         reduce using rule 30 (estatuto -> escritura .)


state 45

    (31) estatuto -> while_condicion .

    ID              reduce using rule 31 (estatuto -> while_condicion .)
    IF              reduce using rule 31 (estatuto -> while_condicion .)
    WRITE           reduce using rule 31 (estatuto -> while_condicion .)
    WHILE           reduce using rule 31 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 31 (estatuto -> while_condicion .)


state 46

    (32) estatuto -> llamada_funcion .

    ID              reduce using rule 32 (estatuto -> llamada_funcion .)
    IF              reduce using rule 32 (estatuto -> llamada_funcion .)
    WRITE           reduce using rule 32 (estatuto -> llamada_funcion .)
    WHILE           reduce using rule 32 (estatuto -> llamada_funcion .)
    LLAVDER         reduce using rule 32 (estatuto -> llamada_funcion .)


state 47

    (35) asignacion -> ID . IGUAL expresion PUNCOM
    (15) llamada_funcion -> ID . PARIZQ argumentos_llamada PARDER

    IGUAL           shift and go to state 57
    PARIZQ          shift and go to state 58


state 48

    (41) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> IF . PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM

    PARIZQ          shift and go to state 59


state 49

    (36) escritura -> WRITE . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 60


state 50

    (43) while_condicion -> WHILE . PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while

    PARIZQ          shift and go to state 61


state 51

    (10) param -> TIPO . ID COMA param
    (11) param -> TIPO . ID

    ID              shift and go to state 62


state 52

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param . PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function

    PARDER          shift and go to state 63


state 53

    (12) param -> empty .

    PARDER          reduce using rule 12 (param -> empty .)


state 54

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param . PARDER save_params vars_local bloque_func RETURN PUNCOM end_function

    PARDER          shift and go to state 64


state 55

    (27) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    RETURN          reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WRITE           reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 27 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 56

    (33) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 33 (multiples_estatutos -> estatuto multiples_estatutos .)


state 57

    (35) asignacion -> ID IGUAL . expresion PUNCOM
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 66
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 58

    (15) llamada_funcion -> ID PARIZQ . argumentos_llamada PARDER
    (16) argumentos_llamada -> . argumentos_llamada COMA expresion
    (17) argumentos_llamada -> . expresion
    (18) argumentos_llamada -> . empty
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (71) empty -> .
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    argumentos_llamada             shift and go to state 79
    expresion                      shift and go to state 80
    empty                          shift and go to state 81
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72

state 59

    (41) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> IF PARIZQ . expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 82
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 60

    (36) escritura -> WRITE PARIZQ . print_expresion PARDER PUNCOM
    (37) print_expresion -> . expresion multiples_print
    (38) print_expresion -> . CTESTRING multiples_print
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 85
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    print_expresion                shift and go to state 83
    expresion                      shift and go to state 84
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 61

    (43) while_condicion -> WHILE PARIZQ . save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while
    (75) save_position_while -> .

    PARIZQ          reduce using rule 75 (save_position_while -> .)
    MAS             reduce using rule 75 (save_position_while -> .)
    MENOS           reduce using rule 75 (save_position_while -> .)
    ID              reduce using rule 75 (save_position_while -> .)
    CTEI            reduce using rule 75 (save_position_while -> .)
    CTEF            reduce using rule 75 (save_position_while -> .)
    CTEC            reduce using rule 75 (save_position_while -> .)
    CTEB            reduce using rule 75 (save_position_while -> .)
    AND             reduce using rule 75 (save_position_while -> .)
    OR              reduce using rule 75 (save_position_while -> .)
    PARDER          reduce using rule 75 (save_position_while -> .)
    MAYOR           reduce using rule 75 (save_position_while -> .)
    MENOR           reduce using rule 75 (save_position_while -> .)
    DIFF            reduce using rule 75 (save_position_while -> .)
    IGIG            reduce using rule 75 (save_position_while -> .)
    MAYIG           reduce using rule 75 (save_position_while -> .)
    MENIG           reduce using rule 75 (save_position_while -> .)
    POR             reduce using rule 75 (save_position_while -> .)
    DIV             reduce using rule 75 (save_position_while -> .)

    save_position_while            shift and go to state 86

state 62

    (10) param -> TIPO ID . COMA param
    (11) param -> TIPO ID .

    COMA            shift and go to state 87
    PARDER          reduce using rule 11 (param -> TIPO ID .)


state 63

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER . save_params vars_local bloque_func RETURN exp PUNCOM end_function
    (6) save_params -> .

    VAR             reduce using rule 6 (save_params -> .)

    save_params                    shift and go to state 88

state 64

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER . save_params vars_local bloque_func RETURN PUNCOM end_function
    (6) save_params -> .

    VAR             reduce using rule 6 (save_params -> .)

    save_params                    shift and go to state 89

state 65

    (66) var_cte -> ID .

    POR             reduce using rule 66 (var_cte -> ID .)
    DIV             reduce using rule 66 (var_cte -> ID .)
    MAS             reduce using rule 66 (var_cte -> ID .)
    MENOS           reduce using rule 66 (var_cte -> ID .)
    MAYOR           reduce using rule 66 (var_cte -> ID .)
    MENOR           reduce using rule 66 (var_cte -> ID .)
    DIFF            reduce using rule 66 (var_cte -> ID .)
    IGIG            reduce using rule 66 (var_cte -> ID .)
    MAYIG           reduce using rule 66 (var_cte -> ID .)
    MENIG           reduce using rule 66 (var_cte -> ID .)
    PUNCOM          reduce using rule 66 (var_cte -> ID .)
    AND             reduce using rule 66 (var_cte -> ID .)
    OR              reduce using rule 66 (var_cte -> ID .)
    PARDER          reduce using rule 66 (var_cte -> ID .)
    COMA            reduce using rule 66 (var_cte -> ID .)


state 66

    (35) asignacion -> ID IGUAL expresion . PUNCOM
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92


state 67

    (46) expresion -> exp .
    (47) expresion -> exp . MAYOR exp
    (48) expresion -> exp . MENOR exp
    (49) expresion -> exp . DIFF exp
    (50) expresion -> exp . IGIG exp
    (51) expresion -> exp . MAYIG exp
    (52) expresion -> exp . MENIG exp

    PUNCOM          reduce using rule 46 (expresion -> exp .)
    AND             reduce using rule 46 (expresion -> exp .)
    OR              reduce using rule 46 (expresion -> exp .)
    PARDER          reduce using rule 46 (expresion -> exp .)
    COMA            reduce using rule 46 (expresion -> exp .)
    MAYOR           shift and go to state 93
    MENOR           shift and go to state 94
    DIFF            shift and go to state 95
    IGIG            shift and go to state 96
    MAYIG           shift and go to state 97
    MENIG           shift and go to state 98


state 68

    (53) exp -> termino . exp_operacion
    (54) exp_operacion -> . MAS termino exp_operacion
    (55) exp_operacion -> . MENOS termino exp_operacion
    (56) exp_operacion -> . empty
    (71) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    exp_operacion                  shift and go to state 99
    empty                          shift and go to state 102

state 69

    (57) termino -> factor . termino_operador
    (58) termino_operador -> . POR factor termino_operador
    (59) termino_operador -> . DIV factor termino_operador
    (60) termino_operador -> . empty
    (71) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 71 (empty -> .)
    MENOS           reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    termino_operador               shift and go to state 103
    empty                          shift and go to state 106

state 70

    (61) factor -> PARIZQ . expresion PARDER
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 107
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 71

    (62) factor -> MAS . var_cte
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB

    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78

    var_cte                        shift and go to state 108

state 72

    (64) factor -> var_cte .

    POR             reduce using rule 64 (factor -> var_cte .)
    DIV             reduce using rule 64 (factor -> var_cte .)
    MAS             reduce using rule 64 (factor -> var_cte .)
    MENOS           reduce using rule 64 (factor -> var_cte .)
    MAYOR           reduce using rule 64 (factor -> var_cte .)
    MENOR           reduce using rule 64 (factor -> var_cte .)
    DIFF            reduce using rule 64 (factor -> var_cte .)
    IGIG            reduce using rule 64 (factor -> var_cte .)
    MAYIG           reduce using rule 64 (factor -> var_cte .)
    MENIG           reduce using rule 64 (factor -> var_cte .)
    PUNCOM          reduce using rule 64 (factor -> var_cte .)
    AND             reduce using rule 64 (factor -> var_cte .)
    OR              reduce using rule 64 (factor -> var_cte .)
    PARDER          reduce using rule 64 (factor -> var_cte .)
    COMA            reduce using rule 64 (factor -> var_cte .)


state 73

    (63) factor -> MENOS . var_cte
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB

    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78

    var_cte                        shift and go to state 109

state 74

    (65) factor -> empty .

    POR             reduce using rule 65 (factor -> empty .)
    DIV             reduce using rule 65 (factor -> empty .)
    MAS             reduce using rule 65 (factor -> empty .)
    MENOS           reduce using rule 65 (factor -> empty .)
    MAYOR           reduce using rule 65 (factor -> empty .)
    MENOR           reduce using rule 65 (factor -> empty .)
    DIFF            reduce using rule 65 (factor -> empty .)
    IGIG            reduce using rule 65 (factor -> empty .)
    MAYIG           reduce using rule 65 (factor -> empty .)
    MENIG           reduce using rule 65 (factor -> empty .)
    PUNCOM          reduce using rule 65 (factor -> empty .)
    AND             reduce using rule 65 (factor -> empty .)
    OR              reduce using rule 65 (factor -> empty .)
    PARDER          reduce using rule 65 (factor -> empty .)
    COMA            reduce using rule 65 (factor -> empty .)


state 75

    (67) var_cte -> CTEI .

    POR             reduce using rule 67 (var_cte -> CTEI .)
    DIV             reduce using rule 67 (var_cte -> CTEI .)
    MAS             reduce using rule 67 (var_cte -> CTEI .)
    MENOS           reduce using rule 67 (var_cte -> CTEI .)
    MAYOR           reduce using rule 67 (var_cte -> CTEI .)
    MENOR           reduce using rule 67 (var_cte -> CTEI .)
    DIFF            reduce using rule 67 (var_cte -> CTEI .)
    IGIG            reduce using rule 67 (var_cte -> CTEI .)
    MAYIG           reduce using rule 67 (var_cte -> CTEI .)
    MENIG           reduce using rule 67 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 67 (var_cte -> CTEI .)
    AND             reduce using rule 67 (var_cte -> CTEI .)
    OR              reduce using rule 67 (var_cte -> CTEI .)
    PARDER          reduce using rule 67 (var_cte -> CTEI .)
    COMA            reduce using rule 67 (var_cte -> CTEI .)


state 76

    (68) var_cte -> CTEF .

    POR             reduce using rule 68 (var_cte -> CTEF .)
    DIV             reduce using rule 68 (var_cte -> CTEF .)
    MAS             reduce using rule 68 (var_cte -> CTEF .)
    MENOS           reduce using rule 68 (var_cte -> CTEF .)
    MAYOR           reduce using rule 68 (var_cte -> CTEF .)
    MENOR           reduce using rule 68 (var_cte -> CTEF .)
    DIFF            reduce using rule 68 (var_cte -> CTEF .)
    IGIG            reduce using rule 68 (var_cte -> CTEF .)
    MAYIG           reduce using rule 68 (var_cte -> CTEF .)
    MENIG           reduce using rule 68 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 68 (var_cte -> CTEF .)
    AND             reduce using rule 68 (var_cte -> CTEF .)
    OR              reduce using rule 68 (var_cte -> CTEF .)
    PARDER          reduce using rule 68 (var_cte -> CTEF .)
    COMA            reduce using rule 68 (var_cte -> CTEF .)


state 77

    (69) var_cte -> CTEC .

    POR             reduce using rule 69 (var_cte -> CTEC .)
    DIV             reduce using rule 69 (var_cte -> CTEC .)
    MAS             reduce using rule 69 (var_cte -> CTEC .)
    MENOS           reduce using rule 69 (var_cte -> CTEC .)
    MAYOR           reduce using rule 69 (var_cte -> CTEC .)
    MENOR           reduce using rule 69 (var_cte -> CTEC .)
    DIFF            reduce using rule 69 (var_cte -> CTEC .)
    IGIG            reduce using rule 69 (var_cte -> CTEC .)
    MAYIG           reduce using rule 69 (var_cte -> CTEC .)
    MENIG           reduce using rule 69 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 69 (var_cte -> CTEC .)
    AND             reduce using rule 69 (var_cte -> CTEC .)
    OR              reduce using rule 69 (var_cte -> CTEC .)
    PARDER          reduce using rule 69 (var_cte -> CTEC .)
    COMA            reduce using rule 69 (var_cte -> CTEC .)


state 78

    (70) var_cte -> CTEB .

    POR             reduce using rule 70 (var_cte -> CTEB .)
    DIV             reduce using rule 70 (var_cte -> CTEB .)
    MAS             reduce using rule 70 (var_cte -> CTEB .)
    MENOS           reduce using rule 70 (var_cte -> CTEB .)
    MAYOR           reduce using rule 70 (var_cte -> CTEB .)
    MENOR           reduce using rule 70 (var_cte -> CTEB .)
    DIFF            reduce using rule 70 (var_cte -> CTEB .)
    IGIG            reduce using rule 70 (var_cte -> CTEB .)
    MAYIG           reduce using rule 70 (var_cte -> CTEB .)
    MENIG           reduce using rule 70 (var_cte -> CTEB .)
    PUNCOM          reduce using rule 70 (var_cte -> CTEB .)
    AND             reduce using rule 70 (var_cte -> CTEB .)
    OR              reduce using rule 70 (var_cte -> CTEB .)
    PARDER          reduce using rule 70 (var_cte -> CTEB .)
    COMA            reduce using rule 70 (var_cte -> CTEB .)


state 79

    (15) llamada_funcion -> ID PARIZQ argumentos_llamada . PARDER
    (16) argumentos_llamada -> argumentos_llamada . COMA expresion

    PARDER          shift and go to state 110
    COMA            shift and go to state 111


state 80

    (17) argumentos_llamada -> expresion .
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

    PARDER          reduce using rule 17 (argumentos_llamada -> expresion .)
    COMA            reduce using rule 17 (argumentos_llamada -> expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92


state 81

    (18) argumentos_llamada -> empty .
    (65) factor -> empty .

  ! reduce/reduce conflict for PARDER resolved using rule 18 (argumentos_llamada -> empty .)
  ! reduce/reduce conflict for COMA resolved using rule 18 (argumentos_llamada -> empty .)
    PARDER          reduce using rule 18 (argumentos_llamada -> empty .)
    COMA            reduce using rule 18 (argumentos_llamada -> empty .)
    POR             reduce using rule 65 (factor -> empty .)
    DIV             reduce using rule 65 (factor -> empty .)
    MAS             reduce using rule 65 (factor -> empty .)
    MENOS           reduce using rule 65 (factor -> empty .)
    MAYOR           reduce using rule 65 (factor -> empty .)
    MENOR           reduce using rule 65 (factor -> empty .)
    DIFF            reduce using rule 65 (factor -> empty .)
    IGIG            reduce using rule 65 (factor -> empty .)
    MAYIG           reduce using rule 65 (factor -> empty .)
    MENIG           reduce using rule 65 (factor -> empty .)
    AND             reduce using rule 65 (factor -> empty .)
    OR              reduce using rule 65 (factor -> empty .)

  ! PARDER          [ reduce using rule 65 (factor -> empty .) ]
  ! COMA            [ reduce using rule 65 (factor -> empty .) ]


state 82

    (41) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> IF PARIZQ expresion . PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

    PARDER          shift and go to state 112
    AND             shift and go to state 91
    OR              shift and go to state 92


state 83

    (36) escritura -> WRITE PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 113


state 84

    (37) print_expresion -> expresion . multiples_print
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion
    (39) multiples_print -> . COMA print_expresion
    (40) multiples_print -> . empty
    (71) empty -> .

    AND             shift and go to state 91
    OR              shift and go to state 92
    COMA            shift and go to state 115
    PARDER          reduce using rule 71 (empty -> .)

    multiples_print                shift and go to state 114
    empty                          shift and go to state 116

state 85

    (38) print_expresion -> CTESTRING . multiples_print
    (39) multiples_print -> . COMA print_expresion
    (40) multiples_print -> . empty
    (71) empty -> .

    COMA            shift and go to state 115
    PARDER          reduce using rule 71 (empty -> .)

    multiples_print                shift and go to state 117
    empty                          shift and go to state 116

state 86

    (43) while_condicion -> WHILE PARIZQ save_position_while . expresion check_while_exp PARDER DO bloque fill_jump_while
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 118
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 87

    (10) param -> TIPO ID COMA . param
    (10) param -> . TIPO ID COMA param
    (11) param -> . TIPO ID
    (12) param -> . empty
    (23) TIPO -> . INT
    (24) TIPO -> . FLOAT
    (25) TIPO -> . CHAR
    (26) TIPO -> . BOOL
    (71) empty -> .

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    PARDER          reduce using rule 71 (empty -> .)

    TIPO                           shift and go to state 51
    param                          shift and go to state 119
    empty                          shift and go to state 53

state 88

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params . vars_local bloque_func RETURN exp PUNCOM end_function
    (7) vars_local -> . VAR vars

    VAR             shift and go to state 121

    vars_local                     shift and go to state 120

state 89

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params . vars_local bloque_func RETURN PUNCOM end_function
    (7) vars_local -> . VAR vars

    VAR             shift and go to state 121

    vars_local                     shift and go to state 122

state 90

    (35) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 35 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 35 (asignacion -> ID IGUAL expresion PUNCOM .)
    WRITE           reduce using rule 35 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 35 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 35 (asignacion -> ID IGUAL expresion PUNCOM .)


state 91

    (44) expresion -> expresion AND . expresion
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 123
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 92

    (45) expresion -> expresion OR . expresion
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 124
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 93

    (47) expresion -> exp MAYOR . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 125
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 94

    (48) expresion -> exp MENOR . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 126
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 95

    (49) expresion -> exp DIFF . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 127
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 96

    (50) expresion -> exp IGIG . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 128
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 97

    (51) expresion -> exp MAYIG . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 129
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 98

    (52) expresion -> exp MENIG . exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 130
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 99

    (53) exp -> termino exp_operacion .

    MAYOR           reduce using rule 53 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 53 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 53 (exp -> termino exp_operacion .)
    IGIG            reduce using rule 53 (exp -> termino exp_operacion .)
    MAYIG           reduce using rule 53 (exp -> termino exp_operacion .)
    MENIG           reduce using rule 53 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 53 (exp -> termino exp_operacion .)
    AND             reduce using rule 53 (exp -> termino exp_operacion .)
    OR              reduce using rule 53 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 53 (exp -> termino exp_operacion .)
    COMA            reduce using rule 53 (exp -> termino exp_operacion .)


state 100

    (54) exp_operacion -> MAS . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    termino                        shift and go to state 131
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 101

    (55) exp_operacion -> MENOS . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    termino                        shift and go to state 132
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 102

    (56) exp_operacion -> empty .

    MAYOR           reduce using rule 56 (exp_operacion -> empty .)
    MENOR           reduce using rule 56 (exp_operacion -> empty .)
    DIFF            reduce using rule 56 (exp_operacion -> empty .)
    IGIG            reduce using rule 56 (exp_operacion -> empty .)
    MAYIG           reduce using rule 56 (exp_operacion -> empty .)
    MENIG           reduce using rule 56 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 56 (exp_operacion -> empty .)
    AND             reduce using rule 56 (exp_operacion -> empty .)
    OR              reduce using rule 56 (exp_operacion -> empty .)
    PARDER          reduce using rule 56 (exp_operacion -> empty .)
    COMA            reduce using rule 56 (exp_operacion -> empty .)


state 103

    (57) termino -> factor termino_operador .

    MAS             reduce using rule 57 (termino -> factor termino_operador .)
    MENOS           reduce using rule 57 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 57 (termino -> factor termino_operador .)
    MENOR           reduce using rule 57 (termino -> factor termino_operador .)
    DIFF            reduce using rule 57 (termino -> factor termino_operador .)
    IGIG            reduce using rule 57 (termino -> factor termino_operador .)
    MAYIG           reduce using rule 57 (termino -> factor termino_operador .)
    MENIG           reduce using rule 57 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 57 (termino -> factor termino_operador .)
    AND             reduce using rule 57 (termino -> factor termino_operador .)
    OR              reduce using rule 57 (termino -> factor termino_operador .)
    PARDER          reduce using rule 57 (termino -> factor termino_operador .)
    COMA            reduce using rule 57 (termino -> factor termino_operador .)


state 104

    (58) termino_operador -> POR . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    factor                         shift and go to state 133
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 105

    (59) termino_operador -> DIV . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    factor                         shift and go to state 134
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 106

    (60) termino_operador -> empty .

    MAS             reduce using rule 60 (termino_operador -> empty .)
    MENOS           reduce using rule 60 (termino_operador -> empty .)
    MAYOR           reduce using rule 60 (termino_operador -> empty .)
    MENOR           reduce using rule 60 (termino_operador -> empty .)
    DIFF            reduce using rule 60 (termino_operador -> empty .)
    IGIG            reduce using rule 60 (termino_operador -> empty .)
    MAYIG           reduce using rule 60 (termino_operador -> empty .)
    MENIG           reduce using rule 60 (termino_operador -> empty .)
    PUNCOM          reduce using rule 60 (termino_operador -> empty .)
    AND             reduce using rule 60 (termino_operador -> empty .)
    OR              reduce using rule 60 (termino_operador -> empty .)
    PARDER          reduce using rule 60 (termino_operador -> empty .)
    COMA            reduce using rule 60 (termino_operador -> empty .)


state 107

    (61) factor -> PARIZQ expresion . PARDER
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

    PARDER          shift and go to state 135
    AND             shift and go to state 91
    OR              shift and go to state 92


state 108

    (62) factor -> MAS var_cte .

    POR             reduce using rule 62 (factor -> MAS var_cte .)
    DIV             reduce using rule 62 (factor -> MAS var_cte .)
    MAS             reduce using rule 62 (factor -> MAS var_cte .)
    MENOS           reduce using rule 62 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 62 (factor -> MAS var_cte .)
    MENOR           reduce using rule 62 (factor -> MAS var_cte .)
    DIFF            reduce using rule 62 (factor -> MAS var_cte .)
    IGIG            reduce using rule 62 (factor -> MAS var_cte .)
    MAYIG           reduce using rule 62 (factor -> MAS var_cte .)
    MENIG           reduce using rule 62 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 62 (factor -> MAS var_cte .)
    AND             reduce using rule 62 (factor -> MAS var_cte .)
    OR              reduce using rule 62 (factor -> MAS var_cte .)
    PARDER          reduce using rule 62 (factor -> MAS var_cte .)
    COMA            reduce using rule 62 (factor -> MAS var_cte .)


state 109

    (63) factor -> MENOS var_cte .

    POR             reduce using rule 63 (factor -> MENOS var_cte .)
    DIV             reduce using rule 63 (factor -> MENOS var_cte .)
    MAS             reduce using rule 63 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 63 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 63 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 63 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 63 (factor -> MENOS var_cte .)
    IGIG            reduce using rule 63 (factor -> MENOS var_cte .)
    MAYIG           reduce using rule 63 (factor -> MENOS var_cte .)
    MENIG           reduce using rule 63 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 63 (factor -> MENOS var_cte .)
    AND             reduce using rule 63 (factor -> MENOS var_cte .)
    OR              reduce using rule 63 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 63 (factor -> MENOS var_cte .)
    COMA            reduce using rule 63 (factor -> MENOS var_cte .)


state 110

    (15) llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .

    ID              reduce using rule 15 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    IF              reduce using rule 15 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    WRITE           reduce using rule 15 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    WHILE           reduce using rule 15 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)
    LLAVDER         reduce using rule 15 (llamada_funcion -> ID PARIZQ argumentos_llamada PARDER .)


state 111

    (16) argumentos_llamada -> argumentos_llamada COMA . expresion
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    expresion                      shift and go to state 136
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 112

    (41) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_if PUNCOM
    (42) condicion -> IF PARIZQ expresion PARDER . verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (72) verificar_if -> .

    LLAVIZQ         reduce using rule 72 (verificar_if -> .)

    verificar_if                   shift and go to state 137

state 113

    (36) escritura -> WRITE PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 138


state 114

    (37) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 37 (print_expresion -> expresion multiples_print .)


state 115

    (39) multiples_print -> COMA . print_expresion
    (37) print_expresion -> . expresion multiples_print
    (38) print_expresion -> . CTESTRING multiples_print
    (44) expresion -> . expresion AND expresion
    (45) expresion -> . expresion OR expresion
    (46) expresion -> . exp
    (47) expresion -> . exp MAYOR exp
    (48) expresion -> . exp MENOR exp
    (49) expresion -> . exp DIFF exp
    (50) expresion -> . exp IGIG exp
    (51) expresion -> . exp MAYIG exp
    (52) expresion -> . exp MENIG exp
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 85
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    print_expresion                shift and go to state 139
    expresion                      shift and go to state 84
    exp                            shift and go to state 67
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 116

    (40) multiples_print -> empty .

    PARDER          reduce using rule 40 (multiples_print -> empty .)


state 117

    (38) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 38 (print_expresion -> CTESTRING multiples_print .)


state 118

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion . check_while_exp PARDER DO bloque fill_jump_while
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion
    (76) check_while_exp -> .

    AND             shift and go to state 91
    OR              shift and go to state 92
    PARDER          reduce using rule 76 (check_while_exp -> .)

    check_while_exp                shift and go to state 140

state 119

    (10) param -> TIPO ID COMA param .

    PARDER          reduce using rule 10 (param -> TIPO ID COMA param .)


state 120

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local . bloque_func RETURN exp PUNCOM end_function
    (8) bloque_func -> . bloque
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque_func                    shift and go to state 141
    bloque                         shift and go to state 142

state 121

    (7) vars_local -> VAR . vars
    (21) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (22) vars -> . empty
    (19) id_lista -> . ID COMA id_lista
    (20) id_lista -> . ID
    (71) empty -> .

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 71 (empty -> .)

    vars                           shift and go to state 143
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 122

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local . bloque_func RETURN PUNCOM end_function
    (8) bloque_func -> . bloque
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque_func                    shift and go to state 144
    bloque                         shift and go to state 142

state 123

    (44) expresion -> expresion AND expresion .
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 44 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 44 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 44 (expresion -> expresion AND expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 44 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 44 (expresion -> expresion AND expresion .) ]


state 124

    (45) expresion -> expresion OR expresion .
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 45 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 45 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 45 (expresion -> expresion OR expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92

  ! AND             [ reduce using rule 45 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 45 (expresion -> expresion OR expresion .) ]


state 125

    (47) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 47 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 47 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 47 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 47 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 47 (expresion -> exp MAYOR exp .)


state 126

    (48) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 48 (expresion -> exp MENOR exp .)
    AND             reduce using rule 48 (expresion -> exp MENOR exp .)
    OR              reduce using rule 48 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 48 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 48 (expresion -> exp MENOR exp .)


state 127

    (49) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 49 (expresion -> exp DIFF exp .)
    AND             reduce using rule 49 (expresion -> exp DIFF exp .)
    OR              reduce using rule 49 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 49 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 49 (expresion -> exp DIFF exp .)


state 128

    (50) expresion -> exp IGIG exp .

    PUNCOM          reduce using rule 50 (expresion -> exp IGIG exp .)
    AND             reduce using rule 50 (expresion -> exp IGIG exp .)
    OR              reduce using rule 50 (expresion -> exp IGIG exp .)
    PARDER          reduce using rule 50 (expresion -> exp IGIG exp .)
    COMA            reduce using rule 50 (expresion -> exp IGIG exp .)


state 129

    (51) expresion -> exp MAYIG exp .

    PUNCOM          reduce using rule 51 (expresion -> exp MAYIG exp .)
    AND             reduce using rule 51 (expresion -> exp MAYIG exp .)
    OR              reduce using rule 51 (expresion -> exp MAYIG exp .)
    PARDER          reduce using rule 51 (expresion -> exp MAYIG exp .)
    COMA            reduce using rule 51 (expresion -> exp MAYIG exp .)


state 130

    (52) expresion -> exp MENIG exp .

    PUNCOM          reduce using rule 52 (expresion -> exp MENIG exp .)
    AND             reduce using rule 52 (expresion -> exp MENIG exp .)
    OR              reduce using rule 52 (expresion -> exp MENIG exp .)
    PARDER          reduce using rule 52 (expresion -> exp MENIG exp .)
    COMA            reduce using rule 52 (expresion -> exp MENIG exp .)


state 131

    (54) exp_operacion -> MAS termino . exp_operacion
    (54) exp_operacion -> . MAS termino exp_operacion
    (55) exp_operacion -> . MENOS termino exp_operacion
    (56) exp_operacion -> . empty
    (71) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    exp_operacion                  shift and go to state 145
    empty                          shift and go to state 102

state 132

    (55) exp_operacion -> MENOS termino . exp_operacion
    (54) exp_operacion -> . MAS termino exp_operacion
    (55) exp_operacion -> . MENOS termino exp_operacion
    (56) exp_operacion -> . empty
    (71) empty -> .

    MAS             shift and go to state 100
    MENOS           shift and go to state 101
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    exp_operacion                  shift and go to state 146
    empty                          shift and go to state 102

state 133

    (58) termino_operador -> POR factor . termino_operador
    (58) termino_operador -> . POR factor termino_operador
    (59) termino_operador -> . DIV factor termino_operador
    (60) termino_operador -> . empty
    (71) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 71 (empty -> .)
    MENOS           reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    termino_operador               shift and go to state 147
    empty                          shift and go to state 106

state 134

    (59) termino_operador -> DIV factor . termino_operador
    (58) termino_operador -> . POR factor termino_operador
    (59) termino_operador -> . DIV factor termino_operador
    (60) termino_operador -> . empty
    (71) empty -> .

    POR             shift and go to state 104
    DIV             shift and go to state 105
    MAS             reduce using rule 71 (empty -> .)
    MENOS           reduce using rule 71 (empty -> .)
    MAYOR           reduce using rule 71 (empty -> .)
    MENOR           reduce using rule 71 (empty -> .)
    DIFF            reduce using rule 71 (empty -> .)
    IGIG            reduce using rule 71 (empty -> .)
    MAYIG           reduce using rule 71 (empty -> .)
    MENIG           reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    PARDER          reduce using rule 71 (empty -> .)
    COMA            reduce using rule 71 (empty -> .)

    termino_operador               shift and go to state 148
    empty                          shift and go to state 106

state 135

    (61) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    IGIG            reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MAYIG           reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    MENIG           reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 61 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 61 (factor -> PARIZQ expresion PARDER .)


state 136

    (16) argumentos_llamada -> argumentos_llamada COMA expresion .
    (44) expresion -> expresion . AND expresion
    (45) expresion -> expresion . OR expresion

    PARDER          reduce using rule 16 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    COMA            reduce using rule 16 (argumentos_llamada -> argumentos_llamada COMA expresion .)
    AND             shift and go to state 91
    OR              shift and go to state 92


state 137

    (41) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_if PUNCOM
    (42) condicion -> IF PARIZQ expresion PARDER verificar_if . bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 149

state 138

    (36) escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 36 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 36 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WRITE           reduce using rule 36 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 36 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 36 (escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM .)


state 139

    (39) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 39 (multiples_print -> COMA print_expresion .)


state 140

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp . PARDER DO bloque fill_jump_while

    PARDER          shift and go to state 150


state 141

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func . RETURN exp PUNCOM end_function

    RETURN          shift and go to state 151


state 142

    (8) bloque_func -> bloque .

    RETURN          reduce using rule 8 (bloque_func -> bloque .)


state 143

    (7) vars_local -> VAR vars .

    LLAVIZQ         reduce using rule 7 (vars_local -> VAR vars .)


state 144

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func . RETURN PUNCOM end_function

    RETURN          shift and go to state 152


state 145

    (54) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    IGIG            reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    MAYIG           reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    MENIG           reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 54 (exp_operacion -> MAS termino exp_operacion .)


state 146

    (55) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    IGIG            reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    MAYIG           reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    MENIG           reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 55 (exp_operacion -> MENOS termino exp_operacion .)


state 147

    (58) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    IGIG            reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    MAYIG           reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    MENIG           reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 58 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 58 (termino_operador -> POR factor termino_operador .)


state 148

    (59) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    IGIG            reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    MAYIG           reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    MENIG           reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 59 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 59 (termino_operador -> DIV factor termino_operador .)


state 149

    (41) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_if PUNCOM
    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque . verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM
    (73) verificar_bloque_if -> .
    (74) verificar_bloque_else -> .

    PUNCOM          reduce using rule 73 (verificar_bloque_if -> .)
    ELSE            reduce using rule 74 (verificar_bloque_else -> .)

    verificar_bloque_if            shift and go to state 153
    verificar_bloque_else          shift and go to state 154

state 150

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER . DO bloque fill_jump_while

    DO              shift and go to state 155


state 151

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN . exp PUNCOM end_function
    (53) exp -> . termino exp_operacion
    (57) termino -> . factor termino_operador
    (61) factor -> . PARIZQ expresion PARDER
    (62) factor -> . MAS var_cte
    (63) factor -> . MENOS var_cte
    (64) factor -> . var_cte
    (65) factor -> . empty
    (66) var_cte -> . ID
    (67) var_cte -> . CTEI
    (68) var_cte -> . CTEF
    (69) var_cte -> . CTEC
    (70) var_cte -> . CTEB
    (71) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 70
    MAS             shift and go to state 71
    MENOS           shift and go to state 73
    ID              shift and go to state 65
    CTEI            shift and go to state 75
    CTEF            shift and go to state 76
    CTEC            shift and go to state 77
    CTEB            shift and go to state 78
    POR             reduce using rule 71 (empty -> .)
    DIV             reduce using rule 71 (empty -> .)
    PUNCOM          reduce using rule 71 (empty -> .)

  ! MAS             [ reduce using rule 71 (empty -> .) ]
  ! MENOS           [ reduce using rule 71 (empty -> .) ]

    exp                            shift and go to state 156
    termino                        shift and go to state 68
    factor                         shift and go to state 69
    var_cte                        shift and go to state 72
    empty                          shift and go to state 74

state 152

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN . PUNCOM end_function

    PUNCOM          shift and go to state 157


state 153

    (41) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 158


state 154

    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else . ELSE bloque verificar_bloque_if PUNCOM

    ELSE            shift and go to state 159


state 155

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO . bloque fill_jump_while
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 160

state 156

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp . PUNCOM end_function

    PUNCOM          shift and go to state 161


state 157

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM . end_function
    (9) end_function -> .

    FUNC            reduce using rule 9 (end_function -> .)
    MAIN            reduce using rule 9 (end_function -> .)

    end_function                   shift and go to state 162

state 158

    (41) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 41 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 41 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 41 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 41 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 41 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM .)


state 159

    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE . bloque verificar_bloque_if PUNCOM
    (27) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 36

    bloque                         shift and go to state 163

state 160

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque . fill_jump_while
    (77) fill_jump_while -> .

    ID              reduce using rule 77 (fill_jump_while -> .)
    IF              reduce using rule 77 (fill_jump_while -> .)
    WRITE           reduce using rule 77 (fill_jump_while -> .)
    WHILE           reduce using rule 77 (fill_jump_while -> .)
    LLAVDER         reduce using rule 77 (fill_jump_while -> .)

    fill_jump_while                shift and go to state 164

state 161

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM . end_function
    (9) end_function -> .

    FUNC            reduce using rule 9 (end_function -> .)
    MAIN            reduce using rule 9 (end_function -> .)

    end_function                   shift and go to state 165

state 162

    (4) funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .

    FUNC            reduce using rule 4 (funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .)
    MAIN            reduce using rule 4 (funcion -> FUNC VOID ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN PUNCOM end_function .)


state 163

    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque . verificar_bloque_if PUNCOM
    (73) verificar_bloque_if -> .

    PUNCOM          reduce using rule 73 (verificar_bloque_if -> .)

    verificar_bloque_if            shift and go to state 166

state 164

    (43) while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .

    ID              reduce using rule 43 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    IF              reduce using rule 43 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    WRITE           reduce using rule 43 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    WHILE           reduce using rule 43 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)
    LLAVDER         reduce using rule 43 (while_condicion -> WHILE PARIZQ save_position_while expresion check_while_exp PARDER DO bloque fill_jump_while .)


state 165

    (3) funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .

    FUNC            reduce using rule 3 (funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .)
    MAIN            reduce using rule 3 (funcion -> FUNC TIPO ID save_type_name_func PARIZQ param PARDER save_params vars_local bloque_func RETURN exp PUNCOM end_function .)


state 166

    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if . PUNCOM

    PUNCOM          shift and go to state 167


state 167

    (42) condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .

    ID              reduce using rule 42 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    IF              reduce using rule 42 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WRITE           reduce using rule 42 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    WHILE           reduce using rule 42 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)
    LLAVDER         reduce using rule 42 (condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 57 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 57 resolved as shift
WARNING: shift/reduce conflict for MAS in state 58 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 58 resolved as shift
WARNING: shift/reduce conflict for MAS in state 59 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 59 resolved as shift
WARNING: shift/reduce conflict for MAS in state 60 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 60 resolved as shift
WARNING: shift/reduce conflict for MAS in state 70 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 70 resolved as shift
WARNING: shift/reduce conflict for MAS in state 86 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 86 resolved as shift
WARNING: shift/reduce conflict for MAS in state 91 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 91 resolved as shift
WARNING: shift/reduce conflict for MAS in state 92 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 92 resolved as shift
WARNING: shift/reduce conflict for MAS in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 93 resolved as shift
WARNING: shift/reduce conflict for MAS in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 94 resolved as shift
WARNING: shift/reduce conflict for MAS in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 95 resolved as shift
WARNING: shift/reduce conflict for MAS in state 96 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 96 resolved as shift
WARNING: shift/reduce conflict for MAS in state 97 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 97 resolved as shift
WARNING: shift/reduce conflict for MAS in state 98 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 98 resolved as shift
WARNING: shift/reduce conflict for MAS in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 100 resolved as shift
WARNING: shift/reduce conflict for MAS in state 101 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 101 resolved as shift
WARNING: shift/reduce conflict for MAS in state 104 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 104 resolved as shift
WARNING: shift/reduce conflict for MAS in state 105 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 105 resolved as shift
WARNING: shift/reduce conflict for MAS in state 111 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 111 resolved as shift
WARNING: shift/reduce conflict for MAS in state 115 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for MAS in state 151 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 81 resolved using rule (argumentos_llamada -> empty)
WARNING: rejected rule (factor -> empty) in state 81
