Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARR
    BOOL
    CORCHDER
    CORCHIZQ
    CTEB
    MOD
    RETURN
    VOID

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque
Rule 2     funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque
Rule 3     acum_func -> funcion acum_func
Rule 4     acum_func -> empty
Rule 5     id_lista -> ID COMA id_lista
Rule 6     id_lista -> ID
Rule 7     vars -> id_lista DOSPUN TIPO PUNCOM vars
Rule 8     vars -> empty
Rule 9     TIPO -> INT
Rule 10    TIPO -> FLOAT
Rule 11    TIPO -> CHAR
Rule 12    bloque -> LLAVIZQ multiples_estatutos LLAVDER
Rule 13    estatuto -> asignacion
Rule 14    estatuto -> condicion
Rule 15    estatuto -> escritura
Rule 16    estatuto -> while_condicion
Rule 17    estatuto -> for_condicion
Rule 18    multiples_estatutos -> estatuto multiples_estatutos
Rule 19    multiples_estatutos -> empty
Rule 20    asignacion -> ID IGUAL expresion PUNCOM
Rule 21    escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM
Rule 22    print_expresion -> expresion multiples_print
Rule 23    print_expresion -> CTESTRING multiples_print
Rule 24    multiples_print -> COMA print_expresion
Rule 25    multiples_print -> empty
Rule 26    condicion -> IF PARIZQ expresion PARDER bloque PUNCOM
Rule 27    condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
Rule 28    else_condicion -> ELSE bloque
Rule 29    while_condicion -> WHILE PARIZQ expresion PARDER DO bloque
Rule 30    for_condicion -> FOR asignacion TO expresion DO bloque
Rule 31    expresion -> expresion AND expresion
Rule 32    expresion -> expresion OR expresion
Rule 33    expresion -> exp
Rule 34    expresion -> exp MAYOR exp
Rule 35    expresion -> exp MENOR exp
Rule 36    expresion -> exp DIFF exp
Rule 37    exp -> termino exp_operacion
Rule 38    exp_operacion -> MAS termino exp_operacion
Rule 39    exp_operacion -> MENOS termino exp_operacion
Rule 40    exp_operacion -> empty
Rule 41    termino -> factor termino_operador
Rule 42    termino_operador -> POR factor termino_operador
Rule 43    termino_operador -> DIV factor termino_operador
Rule 44    termino_operador -> empty
Rule 45    factor -> PARIZQ expresion PARDER
Rule 46    factor -> MAS var_cte
Rule 47    factor -> MENOS var_cte
Rule 48    factor -> var_cte
Rule 49    factor -> empty
Rule 50    var_cte -> ID
Rule 51    var_cte -> CTEI
Rule 52    var_cte -> CTEF
Rule 53    var_cte -> CTEC
Rule 54    empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
ARR                  : 
BOOL                 : 
CHAR                 : 11
COMA                 : 5 24
CORCHDER             : 
CORCHIZQ             : 
CTEB                 : 
CTEC                 : 53
CTEF                 : 52
CTEI                 : 51
CTESTRING            : 23
DIFF                 : 36
DIV                  : 43
DO                   : 29 30
DOSPUN               : 7
ELSE                 : 28
FLOAT                : 10
FOR                  : 30
FUNC                 : 2
ID                   : 1 2 2 5 6 20 50
IF                   : 26 27
IGUAL                : 20
INT                  : 9
LLAVDER              : 12
LLAVIZQ              : 12
MAIN                 : 1
MAS                  : 38 46
MAYOR                : 34
MENOR                : 35
MENOS                : 39 47
MOD                  : 
OR                   : 32
PARDER               : 1 2 21 26 27 29 45
PARIZQ               : 1 2 21 26 27 29 45
POR                  : 42
PRINT                : 21
PROGRAM              : 1
PUNCOM               : 1 7 20 21 26 27
RETURN               : 
TO                   : 30
VAR                  : 1
VOID                 : 
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

TIPO                 : 2 2 7
acum_func            : 1 3
asignacion           : 13 30
bloque               : 1 2 26 27 28 29 30
condicion            : 14
else_condicion       : 27
empty                : 4 8 19 25 40 44 49
escritura            : 15
estatuto             : 18
exp                  : 33 34 34 35 35 36 36
exp_operacion        : 37 38 39
expresion            : 20 22 26 27 29 30 31 31 32 32 45
factor               : 41 42 43
for_condicion        : 17
funcion              : 3
id_lista             : 5 7
multiples_estatutos  : 12 18
multiples_print      : 22 23
print_expresion      : 21 24
program              : 0
termino              : 37 38 39
termino_operador     : 41 42 43
var_cte              : 46 47 48
vars                 : 1 2 7
while_condicion      : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque

    PUNCOM          shift and go to state 4


state 4

    (1) program -> PROGRAM ID PUNCOM . VAR vars acum_func MAIN PARIZQ PARDER bloque

    VAR             shift and go to state 5


state 5

    (1) program -> PROGRAM ID PUNCOM VAR . vars acum_func MAIN PARIZQ PARDER bloque
    (7) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (8) vars -> . empty
    (5) id_lista -> . ID COMA id_lista
    (6) id_lista -> . ID
    (54) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 54 (empty -> .)
    MAIN            reduce using rule 54 (empty -> .)

    vars                           shift and go to state 7
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 6

    (5) id_lista -> ID . COMA id_lista
    (6) id_lista -> ID .

    COMA            shift and go to state 10
    DOSPUN          reduce using rule 6 (id_lista -> ID .)


state 7

    (1) program -> PROGRAM ID PUNCOM VAR vars . acum_func MAIN PARIZQ PARDER bloque
    (3) acum_func -> . funcion acum_func
    (4) acum_func -> . empty
    (2) funcion -> . FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque
    (54) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 54 (empty -> .)

    acum_func                      shift and go to state 11
    funcion                        shift and go to state 12
    empty                          shift and go to state 13

state 8

    (7) vars -> id_lista . DOSPUN TIPO PUNCOM vars

    DOSPUN          shift and go to state 15


state 9

    (8) vars -> empty .

    FUNC            reduce using rule 8 (vars -> empty .)
    MAIN            reduce using rule 8 (vars -> empty .)
    LLAVIZQ         reduce using rule 8 (vars -> empty .)


state 10

    (5) id_lista -> ID COMA . id_lista
    (5) id_lista -> . ID COMA id_lista
    (6) id_lista -> . ID

    ID              shift and go to state 6

    id_lista                       shift and go to state 16

state 11

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func . MAIN PARIZQ PARDER bloque

    MAIN            shift and go to state 17


state 12

    (3) acum_func -> funcion . acum_func
    (3) acum_func -> . funcion acum_func
    (4) acum_func -> . empty
    (2) funcion -> . FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque
    (54) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 54 (empty -> .)

    funcion                        shift and go to state 12
    acum_func                      shift and go to state 18
    empty                          shift and go to state 13

state 13

    (4) acum_func -> empty .

    MAIN            reduce using rule 4 (acum_func -> empty .)


state 14

    (2) funcion -> FUNC . TIPO ID PARIZQ TIPO ID PARDER vars bloque
    (9) TIPO -> . INT
    (10) TIPO -> . FLOAT
    (11) TIPO -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO                           shift and go to state 19

state 15

    (7) vars -> id_lista DOSPUN . TIPO PUNCOM vars
    (9) TIPO -> . INT
    (10) TIPO -> . FLOAT
    (11) TIPO -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO                           shift and go to state 23

state 16

    (5) id_lista -> ID COMA id_lista .

    DOSPUN          reduce using rule 5 (id_lista -> ID COMA id_lista .)


state 17

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN . PARIZQ PARDER bloque

    PARIZQ          shift and go to state 24


state 18

    (3) acum_func -> funcion acum_func .

    MAIN            reduce using rule 3 (acum_func -> funcion acum_func .)


state 19

    (2) funcion -> FUNC TIPO . ID PARIZQ TIPO ID PARDER vars bloque

    ID              shift and go to state 25


state 20

    (9) TIPO -> INT .

    ID              reduce using rule 9 (TIPO -> INT .)
    PUNCOM          reduce using rule 9 (TIPO -> INT .)


state 21

    (10) TIPO -> FLOAT .

    ID              reduce using rule 10 (TIPO -> FLOAT .)
    PUNCOM          reduce using rule 10 (TIPO -> FLOAT .)


state 22

    (11) TIPO -> CHAR .

    ID              reduce using rule 11 (TIPO -> CHAR .)
    PUNCOM          reduce using rule 11 (TIPO -> CHAR .)


state 23

    (7) vars -> id_lista DOSPUN TIPO . PUNCOM vars

    PUNCOM          shift and go to state 26


state 24

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ . PARDER bloque

    PARDER          shift and go to state 27


state 25

    (2) funcion -> FUNC TIPO ID . PARIZQ TIPO ID PARDER vars bloque

    PARIZQ          shift and go to state 28


state 26

    (7) vars -> id_lista DOSPUN TIPO PUNCOM . vars
    (7) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (8) vars -> . empty
    (5) id_lista -> . ID COMA id_lista
    (6) id_lista -> . ID
    (54) empty -> .

    ID              shift and go to state 6
    FUNC            reduce using rule 54 (empty -> .)
    MAIN            reduce using rule 54 (empty -> .)
    LLAVIZQ         reduce using rule 54 (empty -> .)

    id_lista                       shift and go to state 8
    vars                           shift and go to state 29
    empty                          shift and go to state 9

state 27

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER . bloque
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 30

state 28

    (2) funcion -> FUNC TIPO ID PARIZQ . TIPO ID PARDER vars bloque
    (9) TIPO -> . INT
    (10) TIPO -> . FLOAT
    (11) TIPO -> . CHAR

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    TIPO                           shift and go to state 32

state 29

    (7) vars -> id_lista DOSPUN TIPO PUNCOM vars .

    FUNC            reduce using rule 7 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    MAIN            reduce using rule 7 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)
    LLAVIZQ         reduce using rule 7 (vars -> id_lista DOSPUN TIPO PUNCOM vars .)


state 30

    (1) program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque .

    $end            reduce using rule 1 (program -> PROGRAM ID PUNCOM VAR vars acum_func MAIN PARIZQ PARDER bloque .)


state 31

    (12) bloque -> LLAVIZQ . multiples_estatutos LLAVDER
    (18) multiples_estatutos -> . estatuto multiples_estatutos
    (19) multiples_estatutos -> . empty
    (13) estatuto -> . asignacion
    (14) estatuto -> . condicion
    (15) estatuto -> . escritura
    (16) estatuto -> . while_condicion
    (17) estatuto -> . for_condicion
    (54) empty -> .
    (20) asignacion -> . ID IGUAL expresion PUNCOM
    (26) condicion -> . IF PARIZQ expresion PARDER bloque PUNCOM
    (27) condicion -> . IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
    (21) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (29) while_condicion -> . WHILE PARIZQ expresion PARDER DO bloque
    (30) for_condicion -> . FOR asignacion TO expresion DO bloque

    LLAVDER         reduce using rule 54 (empty -> .)
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45

    multiples_estatutos            shift and go to state 33
    estatuto                       shift and go to state 34
    empty                          shift and go to state 35
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    while_condicion                shift and go to state 39
    for_condicion                  shift and go to state 40

state 32

    (2) funcion -> FUNC TIPO ID PARIZQ TIPO . ID PARDER vars bloque

    ID              shift and go to state 46


state 33

    (12) bloque -> LLAVIZQ multiples_estatutos . LLAVDER

    LLAVDER         shift and go to state 47


state 34

    (18) multiples_estatutos -> estatuto . multiples_estatutos
    (18) multiples_estatutos -> . estatuto multiples_estatutos
    (19) multiples_estatutos -> . empty
    (13) estatuto -> . asignacion
    (14) estatuto -> . condicion
    (15) estatuto -> . escritura
    (16) estatuto -> . while_condicion
    (17) estatuto -> . for_condicion
    (54) empty -> .
    (20) asignacion -> . ID IGUAL expresion PUNCOM
    (26) condicion -> . IF PARIZQ expresion PARDER bloque PUNCOM
    (27) condicion -> . IF PARIZQ expresion PARDER bloque else_condicion PUNCOM
    (21) escritura -> . PRINT PARIZQ print_expresion PARDER PUNCOM
    (29) while_condicion -> . WHILE PARIZQ expresion PARDER DO bloque
    (30) for_condicion -> . FOR asignacion TO expresion DO bloque

    LLAVDER         reduce using rule 54 (empty -> .)
    ID              shift and go to state 41
    IF              shift and go to state 42
    PRINT           shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45

    estatuto                       shift and go to state 34
    multiples_estatutos            shift and go to state 48
    empty                          shift and go to state 35
    asignacion                     shift and go to state 36
    condicion                      shift and go to state 37
    escritura                      shift and go to state 38
    while_condicion                shift and go to state 39
    for_condicion                  shift and go to state 40

state 35

    (19) multiples_estatutos -> empty .

    LLAVDER         reduce using rule 19 (multiples_estatutos -> empty .)


state 36

    (13) estatuto -> asignacion .

    ID              reduce using rule 13 (estatuto -> asignacion .)
    IF              reduce using rule 13 (estatuto -> asignacion .)
    PRINT           reduce using rule 13 (estatuto -> asignacion .)
    WHILE           reduce using rule 13 (estatuto -> asignacion .)
    FOR             reduce using rule 13 (estatuto -> asignacion .)
    LLAVDER         reduce using rule 13 (estatuto -> asignacion .)


state 37

    (14) estatuto -> condicion .

    ID              reduce using rule 14 (estatuto -> condicion .)
    IF              reduce using rule 14 (estatuto -> condicion .)
    PRINT           reduce using rule 14 (estatuto -> condicion .)
    WHILE           reduce using rule 14 (estatuto -> condicion .)
    FOR             reduce using rule 14 (estatuto -> condicion .)
    LLAVDER         reduce using rule 14 (estatuto -> condicion .)


state 38

    (15) estatuto -> escritura .

    ID              reduce using rule 15 (estatuto -> escritura .)
    IF              reduce using rule 15 (estatuto -> escritura .)
    PRINT           reduce using rule 15 (estatuto -> escritura .)
    WHILE           reduce using rule 15 (estatuto -> escritura .)
    FOR             reduce using rule 15 (estatuto -> escritura .)
    LLAVDER         reduce using rule 15 (estatuto -> escritura .)


state 39

    (16) estatuto -> while_condicion .

    ID              reduce using rule 16 (estatuto -> while_condicion .)
    IF              reduce using rule 16 (estatuto -> while_condicion .)
    PRINT           reduce using rule 16 (estatuto -> while_condicion .)
    WHILE           reduce using rule 16 (estatuto -> while_condicion .)
    FOR             reduce using rule 16 (estatuto -> while_condicion .)
    LLAVDER         reduce using rule 16 (estatuto -> while_condicion .)


state 40

    (17) estatuto -> for_condicion .

    ID              reduce using rule 17 (estatuto -> for_condicion .)
    IF              reduce using rule 17 (estatuto -> for_condicion .)
    PRINT           reduce using rule 17 (estatuto -> for_condicion .)
    WHILE           reduce using rule 17 (estatuto -> for_condicion .)
    FOR             reduce using rule 17 (estatuto -> for_condicion .)
    LLAVDER         reduce using rule 17 (estatuto -> for_condicion .)


state 41

    (20) asignacion -> ID . IGUAL expresion PUNCOM

    IGUAL           shift and go to state 49


state 42

    (26) condicion -> IF . PARIZQ expresion PARDER bloque PUNCOM
    (27) condicion -> IF . PARIZQ expresion PARDER bloque else_condicion PUNCOM

    PARIZQ          shift and go to state 50


state 43

    (21) escritura -> PRINT . PARIZQ print_expresion PARDER PUNCOM

    PARIZQ          shift and go to state 51


state 44

    (29) while_condicion -> WHILE . PARIZQ expresion PARDER DO bloque

    PARIZQ          shift and go to state 52


state 45

    (30) for_condicion -> FOR . asignacion TO expresion DO bloque
    (20) asignacion -> . ID IGUAL expresion PUNCOM

    ID              shift and go to state 41

    asignacion                     shift and go to state 53

state 46

    (2) funcion -> FUNC TIPO ID PARIZQ TIPO ID . PARDER vars bloque

    PARDER          shift and go to state 54


state 47

    (12) bloque -> LLAVIZQ multiples_estatutos LLAVDER .

    $end            reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    FUNC            reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    MAIN            reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PUNCOM          reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ELSE            reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    ID              reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    IF              reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    PRINT           reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    WHILE           reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    FOR             reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)
    LLAVDER         reduce using rule 12 (bloque -> LLAVIZQ multiples_estatutos LLAVDER .)


state 48

    (18) multiples_estatutos -> estatuto multiples_estatutos .

    LLAVDER         reduce using rule 18 (multiples_estatutos -> estatuto multiples_estatutos .)


state 49

    (20) asignacion -> ID IGUAL . expresion PUNCOM
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 56
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 50

    (26) condicion -> IF PARIZQ . expresion PARDER bloque PUNCOM
    (27) condicion -> IF PARIZQ . expresion PARDER bloque else_condicion PUNCOM
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 68
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 51

    (21) escritura -> PRINT PARIZQ . print_expresion PARDER PUNCOM
    (22) print_expresion -> . expresion multiples_print
    (23) print_expresion -> . CTESTRING multiples_print
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 71
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    print_expresion                shift and go to state 69
    expresion                      shift and go to state 70
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 52

    (29) while_condicion -> WHILE PARIZQ . expresion PARDER DO bloque
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 72
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 53

    (30) for_condicion -> FOR asignacion . TO expresion DO bloque

    TO              shift and go to state 73


state 54

    (2) funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER . vars bloque
    (7) vars -> . id_lista DOSPUN TIPO PUNCOM vars
    (8) vars -> . empty
    (5) id_lista -> . ID COMA id_lista
    (6) id_lista -> . ID
    (54) empty -> .

    ID              shift and go to state 6
    LLAVIZQ         reduce using rule 54 (empty -> .)

    vars                           shift and go to state 74
    id_lista                       shift and go to state 8
    empty                          shift and go to state 9

state 55

    (50) var_cte -> ID .

    POR             reduce using rule 50 (var_cte -> ID .)
    DIV             reduce using rule 50 (var_cte -> ID .)
    MAS             reduce using rule 50 (var_cte -> ID .)
    MENOS           reduce using rule 50 (var_cte -> ID .)
    MAYOR           reduce using rule 50 (var_cte -> ID .)
    MENOR           reduce using rule 50 (var_cte -> ID .)
    DIFF            reduce using rule 50 (var_cte -> ID .)
    PUNCOM          reduce using rule 50 (var_cte -> ID .)
    AND             reduce using rule 50 (var_cte -> ID .)
    OR              reduce using rule 50 (var_cte -> ID .)
    PARDER          reduce using rule 50 (var_cte -> ID .)
    COMA            reduce using rule 50 (var_cte -> ID .)
    DO              reduce using rule 50 (var_cte -> ID .)


state 56

    (20) asignacion -> ID IGUAL expresion . PUNCOM
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

    PUNCOM          shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 57

    (33) expresion -> exp .
    (34) expresion -> exp . MAYOR exp
    (35) expresion -> exp . MENOR exp
    (36) expresion -> exp . DIFF exp

    PUNCOM          reduce using rule 33 (expresion -> exp .)
    AND             reduce using rule 33 (expresion -> exp .)
    OR              reduce using rule 33 (expresion -> exp .)
    PARDER          reduce using rule 33 (expresion -> exp .)
    COMA            reduce using rule 33 (expresion -> exp .)
    DO              reduce using rule 33 (expresion -> exp .)
    MAYOR           shift and go to state 78
    MENOR           shift and go to state 79
    DIFF            shift and go to state 80


state 58

    (37) exp -> termino . exp_operacion
    (38) exp_operacion -> . MAS termino exp_operacion
    (39) exp_operacion -> . MENOS termino exp_operacion
    (40) exp_operacion -> . empty
    (54) empty -> .

    MAS             shift and go to state 82
    MENOS           shift and go to state 83
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    exp_operacion                  shift and go to state 81
    empty                          shift and go to state 84

state 59

    (41) termino -> factor . termino_operador
    (42) termino_operador -> . POR factor termino_operador
    (43) termino_operador -> . DIV factor termino_operador
    (44) termino_operador -> . empty
    (54) empty -> .

    POR             shift and go to state 86
    DIV             shift and go to state 87
    MAS             reduce using rule 54 (empty -> .)
    MENOS           reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    termino_operador               shift and go to state 85
    empty                          shift and go to state 88

state 60

    (45) factor -> PARIZQ . expresion PARDER
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 89
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 61

    (46) factor -> MAS . var_cte
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC

    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67

    var_cte                        shift and go to state 90

state 62

    (48) factor -> var_cte .

    POR             reduce using rule 48 (factor -> var_cte .)
    DIV             reduce using rule 48 (factor -> var_cte .)
    MAS             reduce using rule 48 (factor -> var_cte .)
    MENOS           reduce using rule 48 (factor -> var_cte .)
    MAYOR           reduce using rule 48 (factor -> var_cte .)
    MENOR           reduce using rule 48 (factor -> var_cte .)
    DIFF            reduce using rule 48 (factor -> var_cte .)
    PUNCOM          reduce using rule 48 (factor -> var_cte .)
    AND             reduce using rule 48 (factor -> var_cte .)
    OR              reduce using rule 48 (factor -> var_cte .)
    PARDER          reduce using rule 48 (factor -> var_cte .)
    COMA            reduce using rule 48 (factor -> var_cte .)
    DO              reduce using rule 48 (factor -> var_cte .)


state 63

    (47) factor -> MENOS . var_cte
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC

    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67

    var_cte                        shift and go to state 91

state 64

    (49) factor -> empty .

    POR             reduce using rule 49 (factor -> empty .)
    DIV             reduce using rule 49 (factor -> empty .)
    MAS             reduce using rule 49 (factor -> empty .)
    MENOS           reduce using rule 49 (factor -> empty .)
    MAYOR           reduce using rule 49 (factor -> empty .)
    MENOR           reduce using rule 49 (factor -> empty .)
    DIFF            reduce using rule 49 (factor -> empty .)
    PUNCOM          reduce using rule 49 (factor -> empty .)
    AND             reduce using rule 49 (factor -> empty .)
    OR              reduce using rule 49 (factor -> empty .)
    PARDER          reduce using rule 49 (factor -> empty .)
    COMA            reduce using rule 49 (factor -> empty .)
    DO              reduce using rule 49 (factor -> empty .)


state 65

    (51) var_cte -> CTEI .

    POR             reduce using rule 51 (var_cte -> CTEI .)
    DIV             reduce using rule 51 (var_cte -> CTEI .)
    MAS             reduce using rule 51 (var_cte -> CTEI .)
    MENOS           reduce using rule 51 (var_cte -> CTEI .)
    MAYOR           reduce using rule 51 (var_cte -> CTEI .)
    MENOR           reduce using rule 51 (var_cte -> CTEI .)
    DIFF            reduce using rule 51 (var_cte -> CTEI .)
    PUNCOM          reduce using rule 51 (var_cte -> CTEI .)
    AND             reduce using rule 51 (var_cte -> CTEI .)
    OR              reduce using rule 51 (var_cte -> CTEI .)
    PARDER          reduce using rule 51 (var_cte -> CTEI .)
    COMA            reduce using rule 51 (var_cte -> CTEI .)
    DO              reduce using rule 51 (var_cte -> CTEI .)


state 66

    (52) var_cte -> CTEF .

    POR             reduce using rule 52 (var_cte -> CTEF .)
    DIV             reduce using rule 52 (var_cte -> CTEF .)
    MAS             reduce using rule 52 (var_cte -> CTEF .)
    MENOS           reduce using rule 52 (var_cte -> CTEF .)
    MAYOR           reduce using rule 52 (var_cte -> CTEF .)
    MENOR           reduce using rule 52 (var_cte -> CTEF .)
    DIFF            reduce using rule 52 (var_cte -> CTEF .)
    PUNCOM          reduce using rule 52 (var_cte -> CTEF .)
    AND             reduce using rule 52 (var_cte -> CTEF .)
    OR              reduce using rule 52 (var_cte -> CTEF .)
    PARDER          reduce using rule 52 (var_cte -> CTEF .)
    COMA            reduce using rule 52 (var_cte -> CTEF .)
    DO              reduce using rule 52 (var_cte -> CTEF .)


state 67

    (53) var_cte -> CTEC .

    POR             reduce using rule 53 (var_cte -> CTEC .)
    DIV             reduce using rule 53 (var_cte -> CTEC .)
    MAS             reduce using rule 53 (var_cte -> CTEC .)
    MENOS           reduce using rule 53 (var_cte -> CTEC .)
    MAYOR           reduce using rule 53 (var_cte -> CTEC .)
    MENOR           reduce using rule 53 (var_cte -> CTEC .)
    DIFF            reduce using rule 53 (var_cte -> CTEC .)
    PUNCOM          reduce using rule 53 (var_cte -> CTEC .)
    AND             reduce using rule 53 (var_cte -> CTEC .)
    OR              reduce using rule 53 (var_cte -> CTEC .)
    PARDER          reduce using rule 53 (var_cte -> CTEC .)
    COMA            reduce using rule 53 (var_cte -> CTEC .)
    DO              reduce using rule 53 (var_cte -> CTEC .)


state 68

    (26) condicion -> IF PARIZQ expresion . PARDER bloque PUNCOM
    (27) condicion -> IF PARIZQ expresion . PARDER bloque else_condicion PUNCOM
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

    PARDER          shift and go to state 92
    AND             shift and go to state 76
    OR              shift and go to state 77


state 69

    (21) escritura -> PRINT PARIZQ print_expresion . PARDER PUNCOM

    PARDER          shift and go to state 93


state 70

    (22) print_expresion -> expresion . multiples_print
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion
    (24) multiples_print -> . COMA print_expresion
    (25) multiples_print -> . empty
    (54) empty -> .

    AND             shift and go to state 76
    OR              shift and go to state 77
    COMA            shift and go to state 95
    PARDER          reduce using rule 54 (empty -> .)

    multiples_print                shift and go to state 94
    empty                          shift and go to state 96

state 71

    (23) print_expresion -> CTESTRING . multiples_print
    (24) multiples_print -> . COMA print_expresion
    (25) multiples_print -> . empty
    (54) empty -> .

    COMA            shift and go to state 95
    PARDER          reduce using rule 54 (empty -> .)

    multiples_print                shift and go to state 97
    empty                          shift and go to state 96

state 72

    (29) while_condicion -> WHILE PARIZQ expresion . PARDER DO bloque
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

    PARDER          shift and go to state 98
    AND             shift and go to state 76
    OR              shift and go to state 77


state 73

    (30) for_condicion -> FOR asignacion TO . expresion DO bloque
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 99
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 74

    (2) funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER vars . bloque
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 100

state 75

    (20) asignacion -> ID IGUAL expresion PUNCOM .

    ID              reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    IF              reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    PRINT           reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    WHILE           reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    FOR             reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    LLAVDER         reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)
    TO              reduce using rule 20 (asignacion -> ID IGUAL expresion PUNCOM .)


state 76

    (31) expresion -> expresion AND . expresion
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 101
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 77

    (32) expresion -> expresion OR . expresion
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    expresion                      shift and go to state 102
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 78

    (34) expresion -> exp MAYOR . exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    exp                            shift and go to state 103
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 79

    (35) expresion -> exp MENOR . exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    exp                            shift and go to state 104
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 80

    (36) expresion -> exp DIFF . exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    exp                            shift and go to state 105
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 81

    (37) exp -> termino exp_operacion .

    MAYOR           reduce using rule 37 (exp -> termino exp_operacion .)
    MENOR           reduce using rule 37 (exp -> termino exp_operacion .)
    DIFF            reduce using rule 37 (exp -> termino exp_operacion .)
    PUNCOM          reduce using rule 37 (exp -> termino exp_operacion .)
    AND             reduce using rule 37 (exp -> termino exp_operacion .)
    OR              reduce using rule 37 (exp -> termino exp_operacion .)
    PARDER          reduce using rule 37 (exp -> termino exp_operacion .)
    COMA            reduce using rule 37 (exp -> termino exp_operacion .)
    DO              reduce using rule 37 (exp -> termino exp_operacion .)


state 82

    (38) exp_operacion -> MAS . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    termino                        shift and go to state 106
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 83

    (39) exp_operacion -> MENOS . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    termino                        shift and go to state 107
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 84

    (40) exp_operacion -> empty .

    MAYOR           reduce using rule 40 (exp_operacion -> empty .)
    MENOR           reduce using rule 40 (exp_operacion -> empty .)
    DIFF            reduce using rule 40 (exp_operacion -> empty .)
    PUNCOM          reduce using rule 40 (exp_operacion -> empty .)
    AND             reduce using rule 40 (exp_operacion -> empty .)
    OR              reduce using rule 40 (exp_operacion -> empty .)
    PARDER          reduce using rule 40 (exp_operacion -> empty .)
    COMA            reduce using rule 40 (exp_operacion -> empty .)
    DO              reduce using rule 40 (exp_operacion -> empty .)


state 85

    (41) termino -> factor termino_operador .

    MAS             reduce using rule 41 (termino -> factor termino_operador .)
    MENOS           reduce using rule 41 (termino -> factor termino_operador .)
    MAYOR           reduce using rule 41 (termino -> factor termino_operador .)
    MENOR           reduce using rule 41 (termino -> factor termino_operador .)
    DIFF            reduce using rule 41 (termino -> factor termino_operador .)
    PUNCOM          reduce using rule 41 (termino -> factor termino_operador .)
    AND             reduce using rule 41 (termino -> factor termino_operador .)
    OR              reduce using rule 41 (termino -> factor termino_operador .)
    PARDER          reduce using rule 41 (termino -> factor termino_operador .)
    COMA            reduce using rule 41 (termino -> factor termino_operador .)
    DO              reduce using rule 41 (termino -> factor termino_operador .)


state 86

    (42) termino_operador -> POR . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    factor                         shift and go to state 108
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 87

    (43) termino_operador -> DIV . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    factor                         shift and go to state 109
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 88

    (44) termino_operador -> empty .

    MAS             reduce using rule 44 (termino_operador -> empty .)
    MENOS           reduce using rule 44 (termino_operador -> empty .)
    MAYOR           reduce using rule 44 (termino_operador -> empty .)
    MENOR           reduce using rule 44 (termino_operador -> empty .)
    DIFF            reduce using rule 44 (termino_operador -> empty .)
    PUNCOM          reduce using rule 44 (termino_operador -> empty .)
    AND             reduce using rule 44 (termino_operador -> empty .)
    OR              reduce using rule 44 (termino_operador -> empty .)
    PARDER          reduce using rule 44 (termino_operador -> empty .)
    COMA            reduce using rule 44 (termino_operador -> empty .)
    DO              reduce using rule 44 (termino_operador -> empty .)


state 89

    (45) factor -> PARIZQ expresion . PARDER
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

    PARDER          shift and go to state 110
    AND             shift and go to state 76
    OR              shift and go to state 77


state 90

    (46) factor -> MAS var_cte .

    POR             reduce using rule 46 (factor -> MAS var_cte .)
    DIV             reduce using rule 46 (factor -> MAS var_cte .)
    MAS             reduce using rule 46 (factor -> MAS var_cte .)
    MENOS           reduce using rule 46 (factor -> MAS var_cte .)
    MAYOR           reduce using rule 46 (factor -> MAS var_cte .)
    MENOR           reduce using rule 46 (factor -> MAS var_cte .)
    DIFF            reduce using rule 46 (factor -> MAS var_cte .)
    PUNCOM          reduce using rule 46 (factor -> MAS var_cte .)
    AND             reduce using rule 46 (factor -> MAS var_cte .)
    OR              reduce using rule 46 (factor -> MAS var_cte .)
    PARDER          reduce using rule 46 (factor -> MAS var_cte .)
    COMA            reduce using rule 46 (factor -> MAS var_cte .)
    DO              reduce using rule 46 (factor -> MAS var_cte .)


state 91

    (47) factor -> MENOS var_cte .

    POR             reduce using rule 47 (factor -> MENOS var_cte .)
    DIV             reduce using rule 47 (factor -> MENOS var_cte .)
    MAS             reduce using rule 47 (factor -> MENOS var_cte .)
    MENOS           reduce using rule 47 (factor -> MENOS var_cte .)
    MAYOR           reduce using rule 47 (factor -> MENOS var_cte .)
    MENOR           reduce using rule 47 (factor -> MENOS var_cte .)
    DIFF            reduce using rule 47 (factor -> MENOS var_cte .)
    PUNCOM          reduce using rule 47 (factor -> MENOS var_cte .)
    AND             reduce using rule 47 (factor -> MENOS var_cte .)
    OR              reduce using rule 47 (factor -> MENOS var_cte .)
    PARDER          reduce using rule 47 (factor -> MENOS var_cte .)
    COMA            reduce using rule 47 (factor -> MENOS var_cte .)
    DO              reduce using rule 47 (factor -> MENOS var_cte .)


state 92

    (26) condicion -> IF PARIZQ expresion PARDER . bloque PUNCOM
    (27) condicion -> IF PARIZQ expresion PARDER . bloque else_condicion PUNCOM
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 111

state 93

    (21) escritura -> PRINT PARIZQ print_expresion PARDER . PUNCOM

    PUNCOM          shift and go to state 112


state 94

    (22) print_expresion -> expresion multiples_print .

    PARDER          reduce using rule 22 (print_expresion -> expresion multiples_print .)


state 95

    (24) multiples_print -> COMA . print_expresion
    (22) print_expresion -> . expresion multiples_print
    (23) print_expresion -> . CTESTRING multiples_print
    (31) expresion -> . expresion AND expresion
    (32) expresion -> . expresion OR expresion
    (33) expresion -> . exp
    (34) expresion -> . exp MAYOR exp
    (35) expresion -> . exp MENOR exp
    (36) expresion -> . exp DIFF exp
    (37) exp -> . termino exp_operacion
    (41) termino -> . factor termino_operador
    (45) factor -> . PARIZQ expresion PARDER
    (46) factor -> . MAS var_cte
    (47) factor -> . MENOS var_cte
    (48) factor -> . var_cte
    (49) factor -> . empty
    (50) var_cte -> . ID
    (51) var_cte -> . CTEI
    (52) var_cte -> . CTEF
    (53) var_cte -> . CTEC
    (54) empty -> .

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    CTESTRING       shift and go to state 71
    PARIZQ          shift and go to state 60
    MAS             shift and go to state 61
    MENOS           shift and go to state 63
    ID              shift and go to state 55
    CTEI            shift and go to state 65
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    POR             reduce using rule 54 (empty -> .)
    DIV             reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)

  ! MAS             [ reduce using rule 54 (empty -> .) ]
  ! MENOS           [ reduce using rule 54 (empty -> .) ]

    print_expresion                shift and go to state 113
    expresion                      shift and go to state 70
    exp                            shift and go to state 57
    termino                        shift and go to state 58
    factor                         shift and go to state 59
    var_cte                        shift and go to state 62
    empty                          shift and go to state 64

state 96

    (25) multiples_print -> empty .

    PARDER          reduce using rule 25 (multiples_print -> empty .)


state 97

    (23) print_expresion -> CTESTRING multiples_print .

    PARDER          reduce using rule 23 (print_expresion -> CTESTRING multiples_print .)


state 98

    (29) while_condicion -> WHILE PARIZQ expresion PARDER . DO bloque

    DO              shift and go to state 114


state 99

    (30) for_condicion -> FOR asignacion TO expresion . DO bloque
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

    DO              shift and go to state 115
    AND             shift and go to state 76
    OR              shift and go to state 77


state 100

    (2) funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque .

    FUNC            reduce using rule 2 (funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque .)
    MAIN            reduce using rule 2 (funcion -> FUNC TIPO ID PARIZQ TIPO ID PARDER vars bloque .)


state 101

    (31) expresion -> expresion AND expresion .
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 31 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 31 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 31 (expresion -> expresion AND expresion .)
    DO              reduce using rule 31 (expresion -> expresion AND expresion .)
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! AND             [ reduce using rule 31 (expresion -> expresion AND expresion .) ]
  ! OR              [ reduce using rule 31 (expresion -> expresion AND expresion .) ]


state 102

    (32) expresion -> expresion OR expresion .
    (31) expresion -> expresion . AND expresion
    (32) expresion -> expresion . OR expresion

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    PUNCOM          reduce using rule 32 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 32 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 32 (expresion -> expresion OR expresion .)
    DO              reduce using rule 32 (expresion -> expresion OR expresion .)
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! AND             [ reduce using rule 32 (expresion -> expresion OR expresion .) ]
  ! OR              [ reduce using rule 32 (expresion -> expresion OR expresion .) ]


state 103

    (34) expresion -> exp MAYOR exp .

    PUNCOM          reduce using rule 34 (expresion -> exp MAYOR exp .)
    AND             reduce using rule 34 (expresion -> exp MAYOR exp .)
    OR              reduce using rule 34 (expresion -> exp MAYOR exp .)
    PARDER          reduce using rule 34 (expresion -> exp MAYOR exp .)
    COMA            reduce using rule 34 (expresion -> exp MAYOR exp .)
    DO              reduce using rule 34 (expresion -> exp MAYOR exp .)


state 104

    (35) expresion -> exp MENOR exp .

    PUNCOM          reduce using rule 35 (expresion -> exp MENOR exp .)
    AND             reduce using rule 35 (expresion -> exp MENOR exp .)
    OR              reduce using rule 35 (expresion -> exp MENOR exp .)
    PARDER          reduce using rule 35 (expresion -> exp MENOR exp .)
    COMA            reduce using rule 35 (expresion -> exp MENOR exp .)
    DO              reduce using rule 35 (expresion -> exp MENOR exp .)


state 105

    (36) expresion -> exp DIFF exp .

    PUNCOM          reduce using rule 36 (expresion -> exp DIFF exp .)
    AND             reduce using rule 36 (expresion -> exp DIFF exp .)
    OR              reduce using rule 36 (expresion -> exp DIFF exp .)
    PARDER          reduce using rule 36 (expresion -> exp DIFF exp .)
    COMA            reduce using rule 36 (expresion -> exp DIFF exp .)
    DO              reduce using rule 36 (expresion -> exp DIFF exp .)


state 106

    (38) exp_operacion -> MAS termino . exp_operacion
    (38) exp_operacion -> . MAS termino exp_operacion
    (39) exp_operacion -> . MENOS termino exp_operacion
    (40) exp_operacion -> . empty
    (54) empty -> .

    MAS             shift and go to state 82
    MENOS           shift and go to state 83
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    exp_operacion                  shift and go to state 116
    empty                          shift and go to state 84

state 107

    (39) exp_operacion -> MENOS termino . exp_operacion
    (38) exp_operacion -> . MAS termino exp_operacion
    (39) exp_operacion -> . MENOS termino exp_operacion
    (40) exp_operacion -> . empty
    (54) empty -> .

    MAS             shift and go to state 82
    MENOS           shift and go to state 83
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    exp_operacion                  shift and go to state 117
    empty                          shift and go to state 84

state 108

    (42) termino_operador -> POR factor . termino_operador
    (42) termino_operador -> . POR factor termino_operador
    (43) termino_operador -> . DIV factor termino_operador
    (44) termino_operador -> . empty
    (54) empty -> .

    POR             shift and go to state 86
    DIV             shift and go to state 87
    MAS             reduce using rule 54 (empty -> .)
    MENOS           reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    termino_operador               shift and go to state 118
    empty                          shift and go to state 88

state 109

    (43) termino_operador -> DIV factor . termino_operador
    (42) termino_operador -> . POR factor termino_operador
    (43) termino_operador -> . DIV factor termino_operador
    (44) termino_operador -> . empty
    (54) empty -> .

    POR             shift and go to state 86
    DIV             shift and go to state 87
    MAS             reduce using rule 54 (empty -> .)
    MENOS           reduce using rule 54 (empty -> .)
    MAYOR           reduce using rule 54 (empty -> .)
    MENOR           reduce using rule 54 (empty -> .)
    DIFF            reduce using rule 54 (empty -> .)
    PUNCOM          reduce using rule 54 (empty -> .)
    AND             reduce using rule 54 (empty -> .)
    OR              reduce using rule 54 (empty -> .)
    PARDER          reduce using rule 54 (empty -> .)
    COMA            reduce using rule 54 (empty -> .)
    DO              reduce using rule 54 (empty -> .)

    termino_operador               shift and go to state 119
    empty                          shift and go to state 88

state 110

    (45) factor -> PARIZQ expresion PARDER .

    POR             reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    DIV             reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    MAS             reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    MENOS           reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    MAYOR           reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    MENOR           reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    DIFF            reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    PUNCOM          reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    AND             reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    OR              reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 45 (factor -> PARIZQ expresion PARDER .)
    DO              reduce using rule 45 (factor -> PARIZQ expresion PARDER .)


state 111

    (26) condicion -> IF PARIZQ expresion PARDER bloque . PUNCOM
    (27) condicion -> IF PARIZQ expresion PARDER bloque . else_condicion PUNCOM
    (28) else_condicion -> . ELSE bloque

    PUNCOM          shift and go to state 120
    ELSE            shift and go to state 122

    else_condicion                 shift and go to state 121

state 112

    (21) escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .

    ID              reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    IF              reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    PRINT           reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    WHILE           reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    FOR             reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)
    LLAVDER         reduce using rule 21 (escritura -> PRINT PARIZQ print_expresion PARDER PUNCOM .)


state 113

    (24) multiples_print -> COMA print_expresion .

    PARDER          reduce using rule 24 (multiples_print -> COMA print_expresion .)


state 114

    (29) while_condicion -> WHILE PARIZQ expresion PARDER DO . bloque
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 123

state 115

    (30) for_condicion -> FOR asignacion TO expresion DO . bloque
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 124

state 116

    (38) exp_operacion -> MAS termino exp_operacion .

    MAYOR           reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    MENOR           reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    DIFF            reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    PUNCOM          reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    AND             reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    OR              reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    PARDER          reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    COMA            reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)
    DO              reduce using rule 38 (exp_operacion -> MAS termino exp_operacion .)


state 117

    (39) exp_operacion -> MENOS termino exp_operacion .

    MAYOR           reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    MENOR           reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    DIFF            reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    PUNCOM          reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    AND             reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    OR              reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    PARDER          reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    COMA            reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)
    DO              reduce using rule 39 (exp_operacion -> MENOS termino exp_operacion .)


state 118

    (42) termino_operador -> POR factor termino_operador .

    MAS             reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    MENOS           reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    MAYOR           reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    MENOR           reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    DIFF            reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    PUNCOM          reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    AND             reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    OR              reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    PARDER          reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    COMA            reduce using rule 42 (termino_operador -> POR factor termino_operador .)
    DO              reduce using rule 42 (termino_operador -> POR factor termino_operador .)


state 119

    (43) termino_operador -> DIV factor termino_operador .

    MAS             reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    MENOS           reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    MAYOR           reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    MENOR           reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    DIFF            reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    PUNCOM          reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    AND             reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    OR              reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    PARDER          reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    COMA            reduce using rule 43 (termino_operador -> DIV factor termino_operador .)
    DO              reduce using rule 43 (termino_operador -> DIV factor termino_operador .)


state 120

    (26) condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .

    ID              reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    IF              reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    PRINT           reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    WHILE           reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    FOR             reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)
    LLAVDER         reduce using rule 26 (condicion -> IF PARIZQ expresion PARDER bloque PUNCOM .)


state 121

    (27) condicion -> IF PARIZQ expresion PARDER bloque else_condicion . PUNCOM

    PUNCOM          shift and go to state 125


state 122

    (28) else_condicion -> ELSE . bloque
    (12) bloque -> . LLAVIZQ multiples_estatutos LLAVDER

    LLAVIZQ         shift and go to state 31

    bloque                         shift and go to state 126

state 123

    (29) while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .

    ID              reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)
    IF              reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)
    PRINT           reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)
    WHILE           reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)
    FOR             reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)
    LLAVDER         reduce using rule 29 (while_condicion -> WHILE PARIZQ expresion PARDER DO bloque .)


state 124

    (30) for_condicion -> FOR asignacion TO expresion DO bloque .

    ID              reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)
    IF              reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)
    PRINT           reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)
    WHILE           reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)
    FOR             reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)
    LLAVDER         reduce using rule 30 (for_condicion -> FOR asignacion TO expresion DO bloque .)


state 125

    (27) condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .

    ID              reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    IF              reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    PRINT           reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    WHILE           reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    FOR             reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)
    LLAVDER         reduce using rule 27 (condicion -> IF PARIZQ expresion PARDER bloque else_condicion PUNCOM .)


state 126

    (28) else_condicion -> ELSE bloque .

    PUNCOM          reduce using rule 28 (else_condicion -> ELSE bloque .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 49 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 49 resolved as shift
WARNING: shift/reduce conflict for MAS in state 50 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 50 resolved as shift
WARNING: shift/reduce conflict for MAS in state 51 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 51 resolved as shift
WARNING: shift/reduce conflict for MAS in state 52 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 52 resolved as shift
WARNING: shift/reduce conflict for MAS in state 60 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 60 resolved as shift
WARNING: shift/reduce conflict for MAS in state 73 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 73 resolved as shift
WARNING: shift/reduce conflict for MAS in state 76 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 76 resolved as shift
WARNING: shift/reduce conflict for MAS in state 77 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 77 resolved as shift
WARNING: shift/reduce conflict for MAS in state 78 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 78 resolved as shift
WARNING: shift/reduce conflict for MAS in state 79 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 79 resolved as shift
WARNING: shift/reduce conflict for MAS in state 80 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 80 resolved as shift
WARNING: shift/reduce conflict for MAS in state 82 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 82 resolved as shift
WARNING: shift/reduce conflict for MAS in state 83 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 83 resolved as shift
WARNING: shift/reduce conflict for MAS in state 86 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 86 resolved as shift
WARNING: shift/reduce conflict for MAS in state 87 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 87 resolved as shift
WARNING: shift/reduce conflict for MAS in state 95 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
