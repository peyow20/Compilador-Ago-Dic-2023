
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARR BOOL CHAR COMA CORCHDER CORCHIZQ CTEB CTEC CTEF CTEI CTESTRING DIFF DIV DO DOSPUN ELSE FLOAT FOR FUNC ID IF IGIG IGUAL INT LLAVDER LLAVIZQ MAIN MAS MAYIG MAYOR MENIG MENOR MENOS MOD OR PARDER PARIZQ POR PROGRAM PUNCOM RETURN TO VAR VOID WHILE WRITEprogram : PROGRAM ID PUNCOM VAR vars acum_func mainmain : MAIN PARIZQ PARDER bloquefuncion : FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM\n               | FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOMparam : TIPO ID COMA param\n             | TIPO ID \n             | emptyacum_func : funcion acum_func\n                  | emptyllamada_funcion : ID PARIZQ argumentos_llamada PARDERargumentos_llamada : argumentos_llamada COMA expresion\n                          | expresion\n                          | emptyid_lista : ID COMA id_lista\n               | IDvars : id_lista DOSPUN TIPO PUNCOM vars\n            | emptyTIPO : INT\n            | FLOAT\n            | CHAR\n            | BOOLarreglo : ARR LLAVIZQ CTEI LLAVDERbloque : LLAVIZQ multiples_estatutos LLAVDERestatuto : asignacion\n                 | condicion\n                 | escritura\n                 | while_condicion\n                 | llamada_funcionmultiples_estatutos : estatuto multiples_estatutos\n                       | emptyasignacion : ID IGUAL expresion PUNCOMescritura : WRITE PARIZQ print_expresion PARDER PUNCOMprint_expresion : expresion multiples_print\n                       | CTESTRING multiples_printmultiples_print : COMA  print_expresion\n                 | emptycondicion : IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM\n                 | IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOMwhile_condicion : WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_whileexpresion : expresion AND expresionexpresion : expresion OR expresionexpresion : exp \n                 | exp MAYOR exp\n                 | exp MENOR exp\n                 | exp DIFF exp\n                 | exp IGIG exp\n                 | exp MAYIG exp\n                 | exp MENIG expexp : termino exp_operacionexp_operacion : MAS termino exp_operacion\n                     | MENOS termino exp_operacion\n                     | emptytermino : factor termino_operadortermino_operador : POR factor termino_operador\n                        | DIV factor termino_operador\n                        | emptyfactor : PARIZQ expresion PARDER\n              | MAS var_cte\n              | MENOS var_cte\n              | var_cte\n              | emptyvar_cte : ID\n               | CTEI\n               | CTEF\n               | CTEC\n               | CTEBempty :verificar_if : verificar_bloque_if : verificar_bloque_else : guardar_posicion_while : verificar_expresion_while : llenar_cuadruplo_while : '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,17,35,56,],[0,-1,-2,-23,]),'ID':([2,5,10,20,21,22,23,24,25,30,36,37,42,44,45,46,47,48,56,58,59,60,61,62,64,65,71,72,74,87,91,92,93,94,95,96,97,98,99,101,102,105,106,111,112,116,137,140,154,156,158,160,],[3,6,6,28,29,-18,-19,-20,-21,6,49,53,49,-24,-25,-26,-27,-28,-23,66,66,66,66,-71,6,6,66,66,66,66,-31,66,66,66,66,66,66,66,66,66,66,66,66,-10,66,66,-32,66,-37,-73,-39,-38,]),'PUNCOM':([3,22,23,24,25,26,56,58,66,67,68,69,70,73,75,76,77,78,79,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,114,122,123,124,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,148,150,157,159,],[4,-18,-19,-20,-21,30,-23,-67,-62,91,-42,-67,-67,-60,-61,-63,-64,-65,-66,-67,-67,-67,-67,-67,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,137,-40,-41,-43,-44,-45,-46,-47,-48,-67,-67,-67,-67,-57,-67,149,-50,-51,-54,-55,-69,153,154,-69,160,]),'VAR':([4,54,55,],[5,64,65,]),'FUNC':([5,7,9,12,30,34,149,153,],[-67,14,-17,14,-67,-16,-4,-3,]),'MAIN':([5,7,9,11,12,13,19,30,34,149,153,],[-67,-67,-17,18,-67,-9,-8,-67,-16,-4,-3,]),'COMA':([6,53,59,61,66,68,69,70,73,75,76,77,78,79,80,81,82,85,86,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,116,122,123,124,125,126,127,128,129,130,131,132,133,134,135,142,143,144,145,],[10,63,-67,-67,-62,-42,-67,-67,-60,-61,-63,-64,-65,-66,112,-12,-13,116,116,-67,-67,-67,-67,-67,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-40,-41,-43,-44,-45,-46,-47,-48,-67,-67,-67,-67,-57,-11,-50,-51,-54,-55,]),'DOSPUN':([6,8,16,],[-15,15,-14,]),'LLAVIZQ':([9,30,31,34,64,65,89,90,113,136,152,155,],[-17,-67,36,-16,-67,-67,36,36,-68,36,36,36,]),'VOID':([14,],[21,]),'INT':([14,15,32,33,63,],[22,22,22,22,22,]),'FLOAT':([14,15,32,33,63,],[23,23,23,23,23,]),'CHAR':([14,15,32,33,63,],[24,24,24,24,24,]),'BOOL':([14,15,32,33,63,],[25,25,25,25,25,]),'PARIZQ':([18,28,29,49,50,51,52,58,59,60,61,62,71,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[27,32,33,59,60,61,62,71,71,71,71,-71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'PARDER':([27,32,33,38,39,40,53,59,60,61,62,63,66,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,138,139,142,143,144,145,],[31,-67,-67,54,-7,55,-6,-67,-67,-67,-71,-67,-62,-42,-67,-67,-67,-60,-61,-63,-64,-65,-66,111,-12,-13,113,114,-67,-67,-67,-5,-67,-67,-67,-67,-67,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,134,-58,-59,-67,-33,-67,-36,-34,-72,-40,-41,-43,-44,-45,-46,-47,-48,-67,-67,-67,-67,-57,-11,-35,147,-50,-51,-54,-55,]),'LLAVDER':([36,41,42,43,44,45,46,47,48,56,57,91,111,137,154,156,158,160,],[-67,56,-67,-30,-24,-25,-26,-27,-28,-23,-29,-31,-10,-32,-37,-73,-39,-38,]),'IF':([36,42,44,45,46,47,48,56,91,111,137,154,156,158,160,],[50,50,-24,-25,-26,-27,-28,-23,-31,-10,-32,-37,-73,-39,-38,]),'WRITE':([36,42,44,45,46,47,48,56,91,111,137,154,156,158,160,],[51,51,-24,-25,-26,-27,-28,-23,-31,-10,-32,-37,-73,-39,-38,]),'WHILE':([36,42,44,45,46,47,48,56,91,111,137,154,156,158,160,],[52,52,-24,-25,-26,-27,-28,-23,-31,-10,-32,-37,-73,-39,-38,]),'IGUAL':([49,],[58,]),'RETURN':([56,120,121,],[-23,140,141,]),'ELSE':([56,146,151,],[-23,-70,155,]),'MAS':([58,59,60,61,62,66,69,70,71,73,75,76,77,78,79,82,87,92,93,94,95,96,97,98,99,101,102,104,105,106,107,109,110,112,116,130,131,132,133,134,140,144,145,],[72,72,72,72,-71,-62,101,-67,72,-60,-61,-63,-64,-65,-66,-61,72,72,72,72,72,72,72,72,72,72,72,-53,72,72,-56,-58,-59,72,72,101,101,-67,-67,-57,72,-54,-55,]),'MENOS':([58,59,60,61,62,66,69,70,71,73,75,76,77,78,79,82,87,92,93,94,95,96,97,98,99,101,102,104,105,106,107,109,110,112,116,130,131,132,133,134,140,144,145,],[74,74,74,74,-71,-62,102,-67,74,-60,-61,-63,-64,-65,-66,-61,74,74,74,74,74,74,74,74,74,74,74,-53,74,74,-56,-58,-59,74,74,102,102,-67,-67,-57,74,-54,-55,]),'CTEI':([58,59,60,61,62,71,72,74,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[76,76,76,76,-71,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'CTEF':([58,59,60,61,62,71,72,74,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[77,77,77,77,-71,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'CTEC':([58,59,60,61,62,71,72,74,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[78,78,78,78,-71,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'CTEB':([58,59,60,61,62,71,72,74,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[79,79,79,79,-71,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'POR':([58,59,60,61,62,66,70,71,73,75,76,77,78,79,82,87,92,93,94,95,96,97,98,99,101,102,105,106,109,110,112,116,132,133,134,140,],[-67,-67,-67,-67,-71,-62,105,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-58,-59,-67,-67,105,105,-57,-67,]),'DIV':([58,59,60,61,62,66,70,71,73,75,76,77,78,79,82,87,92,93,94,95,96,97,98,99,101,102,105,106,109,110,112,116,132,133,134,140,],[-67,-67,-67,-67,-71,-62,106,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-67,-58,-59,-67,-67,106,106,-57,-67,]),'MAYOR':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,94,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'MENOR':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,95,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'DIFF':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,96,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'IGIG':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,97,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'MAYIG':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,98,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'MENIG':([58,59,60,61,62,66,68,69,70,71,73,75,76,77,78,79,82,87,92,93,100,101,102,103,104,105,106,107,109,110,112,116,130,131,132,133,134,142,143,144,145,],[-67,-67,-67,-67,-71,-62,99,-67,-67,-67,-60,-61,-63,-64,-65,-66,-61,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,-58,-59,-67,-67,-67,-67,-67,-67,-57,-50,-51,-54,-55,]),'AND':([58,59,60,61,62,66,67,68,69,70,71,73,75,76,77,78,79,81,82,83,85,87,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,142,143,144,145,],[-67,-67,-67,-67,-71,-62,92,-42,-67,-67,-67,-60,-61,-63,-64,-65,-66,92,-61,92,92,-67,-67,-67,-67,-67,-67,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,92,-58,-59,-67,-67,92,92,92,-43,-44,-45,-46,-47,-48,-67,-67,-67,-67,-57,92,-50,-51,-54,-55,]),'OR':([58,59,60,61,62,66,67,68,69,70,71,73,75,76,77,78,79,81,82,83,85,87,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,116,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,142,143,144,145,],[-67,-67,-67,-67,-71,-62,93,-42,-67,-67,-67,-60,-61,-63,-64,-65,-66,93,-61,93,93,-67,-67,-67,-67,-67,-67,-67,-67,-67,-49,-67,-67,-52,-53,-67,-67,-56,93,-58,-59,-67,-67,93,93,93,-43,-44,-45,-46,-47,-48,-67,-67,-67,-67,-57,93,-50,-51,-54,-55,]),'CTESTRING':([61,116,],[86,86,]),'DO':([147,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([5,30,64,65,],[7,34,89,90,]),'id_lista':([5,10,30,64,65,],[8,16,8,8,8,]),'empty':([5,7,12,30,32,33,36,42,58,59,60,61,63,64,65,69,70,71,85,86,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,130,131,132,133,140,],[9,13,13,9,39,39,43,43,75,82,75,75,39,9,9,103,107,75,117,117,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,103,103,107,107,75,]),'acum_func':([7,12,],[11,19,]),'funcion':([7,12,],[12,12,]),'main':([11,],[17,]),'TIPO':([14,15,32,33,63,],[20,26,37,37,37,]),'bloque':([31,89,90,136,152,155,],[35,120,121,146,156,157,]),'param':([32,33,63,],[38,40,88,]),'multiples_estatutos':([36,42,],[41,57,]),'estatuto':([36,42,],[42,42,]),'asignacion':([36,42,],[44,44,]),'condicion':([36,42,],[45,45,]),'escritura':([36,42,],[46,46,]),'while_condicion':([36,42,],[47,47,]),'llamada_funcion':([36,42,],[48,48,]),'expresion':([58,59,60,61,71,87,92,93,112,116,],[67,81,83,85,108,119,122,123,135,85,]),'exp':([58,59,60,61,71,87,92,93,94,95,96,97,98,99,112,116,140,],[68,68,68,68,68,68,68,68,124,125,126,127,128,129,68,68,148,]),'termino':([58,59,60,61,71,87,92,93,94,95,96,97,98,99,101,102,112,116,140,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,130,131,69,69,69,]),'factor':([58,59,60,61,71,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,132,133,70,70,70,]),'var_cte':([58,59,60,61,71,72,74,87,92,93,94,95,96,97,98,99,101,102,105,106,112,116,140,],[73,73,73,73,73,109,110,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'argumentos_llamada':([59,],[80,]),'print_expresion':([61,116,],[84,138,]),'guardar_posicion_while':([62,],[87,]),'exp_operacion':([69,130,131,],[100,142,143,]),'termino_operador':([70,132,133,],[104,144,145,]),'multiples_print':([85,86,],[115,118,]),'verificar_if':([113,],[136,]),'verificar_expresion_while':([119,],[139,]),'verificar_bloque_if':([146,157,],[150,159,]),'verificar_bloque_else':([146,],[151,]),'llenar_cuadruplo_while':([156,],[158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID PUNCOM VAR vars acum_func main','program',7,'p_program','parser_1.py',161),
  ('main -> MAIN PARIZQ PARDER bloque','main',4,'p_main','parser_1.py',184),
  ('funcion -> FUNC TIPO ID PARIZQ param PARDER VAR vars bloque RETURN exp PUNCOM','funcion',12,'p_funcion','parser_1.py',188),
  ('funcion -> FUNC VOID ID PARIZQ param PARDER VAR vars bloque RETURN PUNCOM','funcion',11,'p_funcion','parser_1.py',189),
  ('param -> TIPO ID COMA param','param',4,'p_param','parser_1.py',192),
  ('param -> TIPO ID','param',2,'p_param','parser_1.py',193),
  ('param -> empty','param',1,'p_param','parser_1.py',194),
  ('acum_func -> funcion acum_func','acum_func',2,'p_acum_func','parser_1.py',199),
  ('acum_func -> empty','acum_func',1,'p_acum_func','parser_1.py',200),
  ('llamada_funcion -> ID PARIZQ argumentos_llamada PARDER','llamada_funcion',4,'p_llamada_funcion','parser_1.py',204),
  ('argumentos_llamada -> argumentos_llamada COMA expresion','argumentos_llamada',3,'p_argumentos_llamada','parser_1.py',207),
  ('argumentos_llamada -> expresion','argumentos_llamada',1,'p_argumentos_llamada','parser_1.py',208),
  ('argumentos_llamada -> empty','argumentos_llamada',1,'p_argumentos_llamada','parser_1.py',209),
  ('id_lista -> ID COMA id_lista','id_lista',3,'p_id_lista','parser_1.py',216),
  ('id_lista -> ID','id_lista',1,'p_id_lista','parser_1.py',217),
  ('vars -> id_lista DOSPUN TIPO PUNCOM vars','vars',5,'p_vars','parser_1.py',240),
  ('vars -> empty','vars',1,'p_vars','parser_1.py',241),
  ('TIPO -> INT','TIPO',1,'p_TIPO','parser_1.py',249),
  ('TIPO -> FLOAT','TIPO',1,'p_TIPO','parser_1.py',250),
  ('TIPO -> CHAR','TIPO',1,'p_TIPO','parser_1.py',251),
  ('TIPO -> BOOL','TIPO',1,'p_TIPO','parser_1.py',252),
  ('arreglo -> ARR LLAVIZQ CTEI LLAVDER','arreglo',4,'p_arreglo','parser_1.py',257),
  ('bloque -> LLAVIZQ multiples_estatutos LLAVDER','bloque',3,'p_bloque','parser_1.py',261),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser_1.py',268),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser_1.py',269),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','parser_1.py',270),
  ('estatuto -> while_condicion','estatuto',1,'p_estatuto','parser_1.py',271),
  ('estatuto -> llamada_funcion','estatuto',1,'p_estatuto','parser_1.py',272),
  ('multiples_estatutos -> estatuto multiples_estatutos','multiples_estatutos',2,'p_multiples_estatutos','parser_1.py',276),
  ('multiples_estatutos -> empty','multiples_estatutos',1,'p_multiples_estatutos','parser_1.py',277),
  ('asignacion -> ID IGUAL expresion PUNCOM','asignacion',4,'p_asignacion','parser_1.py',283),
  ('escritura -> WRITE PARIZQ print_expresion PARDER PUNCOM','escritura',5,'p_escritura','parser_1.py',322),
  ('print_expresion -> expresion multiples_print','print_expresion',2,'p_print_expresion','parser_1.py',326),
  ('print_expresion -> CTESTRING multiples_print','print_expresion',2,'p_print_expresion','parser_1.py',327),
  ('multiples_print -> COMA print_expresion','multiples_print',2,'p_multiples_print','parser_1.py',339),
  ('multiples_print -> empty','multiples_print',1,'p_multiples_print','parser_1.py',340),
  ('condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_if PUNCOM','condicion',8,'p_condicion','parser_1.py',343),
  ('condicion -> IF PARIZQ expresion PARDER verificar_if bloque verificar_bloque_else ELSE bloque verificar_bloque_if PUNCOM','condicion',11,'p_condicion','parser_1.py',344),
  ('while_condicion -> WHILE PARIZQ guardar_posicion_while expresion verificar_expresion_while PARDER DO bloque llenar_cuadruplo_while','while_condicion',9,'p_while_condicion','parser_1.py',347),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion_and','parser_1.py',355),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion_or','parser_1.py',359),
  ('expresion -> exp','expresion',1,'p_expresion','parser_1.py',363),
  ('expresion -> exp MAYOR exp','expresion',3,'p_expresion','parser_1.py',364),
  ('expresion -> exp MENOR exp','expresion',3,'p_expresion','parser_1.py',365),
  ('expresion -> exp DIFF exp','expresion',3,'p_expresion','parser_1.py',366),
  ('expresion -> exp IGIG exp','expresion',3,'p_expresion','parser_1.py',367),
  ('expresion -> exp MAYIG exp','expresion',3,'p_expresion','parser_1.py',368),
  ('expresion -> exp MENIG exp','expresion',3,'p_expresion','parser_1.py',369),
  ('exp -> termino exp_operacion','exp',2,'p_exp','parser_1.py',395),
  ('exp_operacion -> MAS termino exp_operacion','exp_operacion',3,'p_exp_operacion','parser_1.py',400),
  ('exp_operacion -> MENOS termino exp_operacion','exp_operacion',3,'p_exp_operacion','parser_1.py',401),
  ('exp_operacion -> empty','exp_operacion',1,'p_exp_operacion','parser_1.py',402),
  ('termino -> factor termino_operador','termino',2,'p_termino','parser_1.py',414),
  ('termino_operador -> POR factor termino_operador','termino_operador',3,'p_termino_operador','parser_1.py',419),
  ('termino_operador -> DIV factor termino_operador','termino_operador',3,'p_termino_operador','parser_1.py',420),
  ('termino_operador -> empty','termino_operador',1,'p_termino_operador','parser_1.py',421),
  ('factor -> PARIZQ expresion PARDER','factor',3,'p_factor','parser_1.py',431),
  ('factor -> MAS var_cte','factor',2,'p_factor','parser_1.py',432),
  ('factor -> MENOS var_cte','factor',2,'p_factor','parser_1.py',433),
  ('factor -> var_cte','factor',1,'p_factor','parser_1.py',434),
  ('factor -> empty','factor',1,'p_factor','parser_1.py',435),
  ('var_cte -> ID','var_cte',1,'p_var_cte','parser_1.py',439),
  ('var_cte -> CTEI','var_cte',1,'p_var_cte','parser_1.py',440),
  ('var_cte -> CTEF','var_cte',1,'p_var_cte','parser_1.py',441),
  ('var_cte -> CTEC','var_cte',1,'p_var_cte','parser_1.py',442),
  ('var_cte -> CTEB','var_cte',1,'p_var_cte','parser_1.py',443),
  ('empty -> <empty>','empty',0,'p_empty','parser_1.py',468),
  ('verificar_if -> <empty>','verificar_if',0,'p_verificar_if','parser_1.py',633),
  ('verificar_bloque_if -> <empty>','verificar_bloque_if',0,'p_verificar_bloque_if','parser_1.py',647),
  ('verificar_bloque_else -> <empty>','verificar_bloque_else',0,'p_verificar_bloque_else','parser_1.py',659),
  ('guardar_posicion_while -> <empty>','guardar_posicion_while',0,'p_guardar_posicion_while','parser_1.py',671),
  ('verificar_expresion_while -> <empty>','verificar_expresion_while',0,'p_verificar_expresion_while','parser_1.py',677),
  ('llenar_cuadruplo_while -> <empty>','llenar_cuadruplo_while',0,'p_llenar_cuadruplo_while','parser_1.py',689),
]
